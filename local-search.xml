<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>少年Sunday2022第35期简单开箱</title>
    <link href="/2023/11/25/Sunday/"/>
    <url>/2023/11/25/Sunday/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Sunday/01%E5%B0%81%E9%9D%A2.jpg" alt="封面"></p><h2 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h2><p>2021年，恰逢《海贼王》1000话，我买了两本少年Jump漫画杂志，做了一次开箱。之后便想，如果有机会，把另外两家（少年Sunday 和 少年Magazine）也买一期收藏。</p><p>2022年的某天，看到了少年Jump和少年Sunday联合做了一期企划，让《海贼王》作者尾田荣一郎与《名侦探柯南》作者青山刚昌坐在一起对谈，内容将分为前后篇，分别刊载在7月25日的少年Jump和7月27日的少年Sunday。</p><p>7月22日，我在淘宝购买了预售的这两本杂志，购买店铺叫做樱花通贩进口原版图书，两本合计91元。</p><p><img src="/img/Sunday/00%E8%B4%AD%E4%B9%B0%E8%AE%B0%E5%BD%95.jpg" alt="封面"></p><p>结果，等到了九月份还没有发货。询问商家，被告知书在海关，还需要等到十月初。</p><p><img src="/img/Sunday/00%E5%AE%A2%E6%9C%8D%E5%9B%9E%E7%AD%94.jpg" alt="封面"></p><p>十月中旬，商家主动联系，告诉我只有少年Sunday，少年Jump缺货。最后少年Jump退了款，只收到了少年Sunday。这时候距离购买已经过了三个月。这种店再也不会买了。因为只收到了一本，心情不好，随便翻了翻，就放到书架上了。</p><p>到今年，打算还是把它拿出来，拍一拍，写点什么。</p><h2 id="关于少年Sunday"><a href="#关于少年Sunday" class="headerlink" title="关于少年Sunday"></a>关于少年Sunday</h2><p>周刊少年Sunday由小学馆出版发行，创始于1959年3月17日，每周一期。</p><p>少年Sunday主要以面向中小学生的轻松漫画为主，年龄层可能比另外两家更偏低。现在销量次于少年Jump和少年Magazine，位居业界第三位。</p><p>早期，手冢治虫的《多罗罗》，赤冢不二夫的《阿松》都在Sunday上连载。</p><p>1978年，高桥留美子开始连载《福星小子》，1987年开始连载《乱马1&#x2F;2》，1996年开始连载《犬夜叉》。在《乱马1&#x2F;2》连载期间，正好是少年Jump正在连载《七龙珠》，这两部作品被编辑部推到第一线，在全方位竞争。编辑部不许他们完结，直到重复的剧情都画无可画。</p><p>1981年，安达充开始连载《棒球英豪》。</p><p>1987年，青山刚昌开始连载《魔术快斗》，1994年开始连载《名侦探柯南》。</p><p>这之后，少年Sunday连载的知名作品还有：《旋风管家》，《只有神知道的世界》，《魔笛MAGI》，《粗点心战争》等。</p><p>正在连载作品在之后介绍！</p><h2 id="整体感受"><a href="#整体感受" class="headerlink" title="整体感受"></a>整体感受</h2><p>整体上和我前一年买的少年Jump是相似的。少年Jump买的恰好是合刊，而且集英社财大气粗，会感觉更精美一些。比如少年Jump每本都是500多页，有较多的彩页和海报（大的小的都有）。这次买的少年Sunday是普通一期，页数只有400多页，彩页只有开始的几张，没有附送海报。</p><p>发行期数是2022年第35卷，8月10日号，于7月27日发售。小学馆发行，特别定价360日元（最近日元贬值，合人民币17.36元），比少年Jump要贵60日元。纸质同样是比较差的再生纸，有各种颜色的底色。</p><p>封面是《名侦探柯南》的主角柯南和《海贼王》的索隆。与此对应，访谈前篇所在的那期少年Jump封面是《海贼王》的主角路飞和《名侦探柯南》的安室透（为什么是安室透啊喂）</p><p><img src="/img/Sunday/02%E5%B0%81%E9%9D%A2.jpg" alt="封面"></p><p>封底是Cygames的手游广告吧，不懂。后来发现好像是碧蓝幻想。<br><img src="/img/Sunday/03%E5%B0%81%E5%BA%95.jpg" alt="封底"></p><p>侧写：<br><img src="/img/Sunday/04%E4%B9%A6%E8%84%8A.jpg" alt="书脊"><br><img src="/img/Sunday/05%E4%B9%A6%E8%84%8A.jpg" alt="书脊"></p><h2 id="翻起来"><a href="#翻起来" class="headerlink" title="翻起来"></a>翻起来</h2><p>照例，首先看看目录。目录在最后一页。C位是柯南，左右两边的作品本期都有彩页，可能是本期主打。<br><img src="/img/Sunday/06%E7%9B%AE%E5%BD%95.jpg" alt="目录"></p><p>翻开首页，下面是一张单独的明信片，是这两期Jump和Sunday的封面图，《海贼王》的路飞和索隆，《名侦探柯南》的柯南和安室透。<br><img src="/img/Sunday/07%E6%98%8E%E4%BF%A1%E7%89%87.jpg" alt="明信片"><br><img src="/img/Sunday/08%E6%98%8E%E4%BF%A1%E7%89%87%E8%83%8C%E9%9D%A2.jpg" alt="明信片背面"><br>翻过明信片，是青山刚昌X尾田荣一郎特别对谈的封面，背景图是海贼王和柯南的漫画单行本100卷每一本的封面。海贼王和柯南都在2021年发售了第100卷单行本。<br><img src="/img/Sunday/09%E5%AF%B9%E8%B0%88%E5%B0%81%E9%9D%A2.jpg" alt="对谈封面"></p><p>下一页开始就是两人对谈内容的后半篇。原文的翻译已经很早就看过了（没什么猛料），贴上民间汉化：</p><p><a href="/img/Sunday/https://www.bilibili.com/read/cv17765011/">【访谈翻译】青山刚昌×尾田荣一郎特别对谈（前篇） - 哔哩哔哩 (bilibili.com)</a></p><p><a href="/img/Sunday/https://www.bilibili.com/read/cv17767322/">【访谈翻译】青山刚昌×尾田荣一郎特别对谈（后篇） - 哔哩哔哩 (bilibili.com)</a></p><p>不过尾田的头还是那个鱼啊<br><img src="/img/Sunday/10%E5%AF%B9%E8%B0%88.jpg" alt="对谈"></p><p>去年上映的两部电影的宣传，票房都不错。柯南剧场版M25《万圣节的新娘》，海贼王剧场版《RED》<br><img src="/img/Sunday/11%E5%89%A7%E5%9C%BA%E7%89%88.jpg" alt="剧场版"></p><p>话说我已经记不住M20之后的剧场版标题了。上一次去电影院看还是2016年10月的《纯黑的噩梦》，小孩吵闹，体验不好。我在电影院看过的剧场版只有M15《沉默的十五分钟》，M19《业火的向日葵》，M20《纯黑的噩梦》三部。没想到第一次看的M15《沉默的十五分钟》是这三部里最好看的，查了一下，国内上映时间是2011年11月4日，当时上初一，和两个同学一起，场次信息是通过MTime时光网查询的，支付方式可能是现金？我还专门打电话问有没有日语原版，回答是没有，全市可能都没有，于是看了国语配音版。</p><p>继续翻页，尾田的红裤衩和裸足…<br><img src="/img/Sunday/12%E5%AF%B9%E8%B0%88%E7%BB%93%E6%9D%9F.jpg" alt="对谈结束"></p><p>继续翻页，看起来有一些新连载。<br><img src="/img/Sunday/13%E6%96%B0%E8%BF%9E%E8%BD%BD.jpg" alt="新连载"></p><p>宣传页，2022十月新番，名侦探柯南衍生爆笑动画，网飞播出，《名侦探柯南犯人犯泽先生》。主人公是搬到犯罪都市米花町准备实施犯罪的小黑，本期公布了声优是苍井翔太。<br><img src="/img/Sunday/14%E7%8A%AF%E4%BA%BA%E7%8A%AF%E6%B3%BD%E5%85%88%E7%94%9F.jpg" alt="犯人犯泽先生"></p><p>下一页是卖复制原画。4800日元<br><img src="/img/Sunday/15%E5%8D%96%E5%8E%9F%E7%94%BB.jpg" alt="卖原画"></p><p>下一页还是卖原画。</p><p>下一页是宣传由杂志正在连载漫画改编，正在播出的TV动画《彻夜之歌》，杂志发售那周应该是播第四话，播出时间是7月28日（星期四）24:55，即星期五的凌晨0:55。深夜动画的播出时间一般写前一天的时间，所以会大于24小时。同时宣传CD和漫画最新单行本。<br><img src="/img/Sunday/16%E5%BD%BB%E5%A4%9C%E4%B9%8B%E6%AD%8C.jpg" alt="彻夜之歌"></p><h3 id="名侦探柯南"><a href="#名侦探柯南" class="headerlink" title="名侦探柯南"></a>名侦探柯南</h3><p>彩页结束，柯南开始，一上来就赤裸着上身。新系列的第一话，总1097话。<br><img src="/img/Sunday/17%E6%9F%AF%E5%8D%97%E5%B0%81%E9%9D%A2.jpg" alt="柯南封面"></p><p>柯南的一起案件一般是连载三话。<br>第一话，剧情开始，嫌疑人和受害者出现，最后一页发现尸体。<br>第二页，警察来到，柯南各种调查，百思不得其解，最后一页灵光一现。<br>第三话，发射麻醉针，开始推理，犯人痛哭下跪，事件解决，剧情结束。</p><p>截一张柯哀同框。看来这一集是和少年侦探团行动，去静冈的海水浴场。夏天的故事。<br><img src="/img/Sunday/18%E6%9F%AF%E5%8D%97.jpg" alt="柯南"></p><p>博士腰疼，不能出门，怎么是冲矢昴在开车带娃。还有若狭留美，好像是朗姆篇的重要角色（姓 Rumi…），不太懂，没看到朗姆篇，我对柯南主线的认知还停留在列车上波本现身和赤井秀一复活，柯导看着一堆屏幕笑。<br><img src="/img/Sunday/19%E5%86%B2%E7%9F%A2%E6%98%B4.jpg" alt="冲矢昴"><br>到海边浴场，遇到受害者和嫌疑犯，预定经典三选一。<br>最后一页，果然是发现尸体。<br><img src="/img/Sunday/20%E5%8F%91%E7%8E%B0%E8%A2%AB%E5%AE%B3%E8%80%85.jpg" alt="发现被害者"></p><h3 id="古见同学有交流障碍症"><a href="#古见同学有交流障碍症" class="headerlink" title="古见同学有交流障碍症"></a>古见同学有交流障碍症</h3><p>下一页，古见同学有交流障碍症。该作画风总是将我劝退。</p><p>2016年在少年Sunday开始连载，2021年10月动画化第一季，2022年4月动画第二季。<br><img src="/img/Sunday/21%E5%8F%A4%E8%A7%81.jpg" alt="古见同学有交流障碍症"><br>这一话好像是和夏季校服有关的故事。<br><img src="/img/Sunday/22%E5%8F%A4%E8%A7%81.jpg" alt="古见同学有交流障碍症"><br>看不懂。大概是古见同学的笑颜1兆分吧。<br><img src="/img/Sunday/23%E5%8F%A4%E8%A7%81.jpg" alt="古见同学有交流障碍症"></p><h3 id="插页-连载作品介绍1"><a href="#插页-连载作品介绍1" class="headerlink" title="插页 连载作品介绍1"></a>插页 连载作品介绍1</h3><p>杂志社可能是判断有很多读者第一次买少年Sunday，在插页中介绍了杂志正在连载的所有作品。</p><p>前一页介绍的是《名侦探柯南》和《古见同学有交流障碍症》</p><p><img src="/img/Sunday/24%E4%BB%8B%E7%BB%8D.jpg" alt="连载作品介绍1"></p><p>后一页介绍的是《葬送的芙莉莲》和《彻夜之歌》<br><img src="/img/Sunday/25%E4%BB%8B%E7%BB%8D.jpg" alt="连载作品介绍1"></p><h3 id="葬送的芙莉莲"><a href="#葬送的芙莉莲" class="headerlink" title="葬送的芙莉莲"></a>葬送的芙莉莲</h3><p>少年Sunday最近的热门作品，2020年开始连载，本季（2023年10月）动画化，花了很大力气推广。</p><p>故事是长寿的精灵在打倒魔王的五十年后，再次踏上旅途的故事，重走当年和伙伴们冒险的地方，回忆当年的故事，邂逅新的人和事。主打一个温馨治愈。<br><img src="/img/Sunday/26%E8%8A%99%E8%8E%89%E8%8E%B2.jpg" alt="葬送的芙莉莲"></p><h3 id="彻夜之歌"><a href="#彻夜之歌" class="headerlink" title="彻夜之歌"></a>彻夜之歌</h3><p>2019年开始连载，2022年7月动画化，在倒A档播出。</p><p>讲述初二的男主每夜每夜睡不着，出门碰到少女吸血鬼的故事。<br><img src="/img/Sunday/27%E5%BD%BB%E5%A4%9C%E4%B9%8B%E6%AD%8C.jpg" alt="彻夜之歌"></p><h3 id="法兽医，将棋"><a href="#法兽医，将棋" class="headerlink" title="法兽医，将棋"></a>法兽医，将棋</h3><p>《Last Karte-法兽医学者 当麻健匠的记忆-》，讲述法兽医学者的故事，不懂。<br><img src="/img/Sunday/28%E6%B3%95%E5%85%BD%E5%8C%BB%E5%AD%A6%E8%80%85.jpg" alt="法兽医学者"></p><p>《龙与莓》，讲述将棋的故事，更不懂了。<br><img src="/img/Sunday/29%E9%BE%99%E4%B8%8E%E8%8E%93.jpg" alt="龙与莓"></p><h3 id="连载作品介绍2"><a href="#连载作品介绍2" class="headerlink" title="连载作品介绍2"></a>连载作品介绍2</h3><p><img src="/img/Sunday/30%E4%BB%8B%E7%BB%8D.jpg" alt="连载作品介绍2"></p><p><img src="/img/Sunday/31%E4%BB%8B%E7%BB%8D.jpg" alt="连载作品介绍2"></p><h3 id="在魔王城说晚安"><a href="#在魔王城说晚安" class="headerlink" title="在魔王城说晚安"></a>在魔王城说晚安</h3><p>2016年开始连载，2020年10月动画化第一季。</p><p>讲述被抓到魔王城的幼女为了追求更安稳的睡眠，各种折腾魔王城的故事。<br><img src="/img/Sunday/32%E9%AD%94%E7%8E%8B%E5%9F%8E.jpg" alt="在魔王城说晚安"></p><h3 id="帝乃三姐妹原来很好搞定"><a href="#帝乃三姐妹原来很好搞定" class="headerlink" title="帝乃三姐妹原来很好搞定"></a>帝乃三姐妹原来很好搞定</h3><p>2022年新连载，彩页，待遇啊。<br><img src="/img/Sunday/33%E5%B8%9D%E4%B9%83%E4%B8%89%E5%A7%90%E5%A6%B9.jpg" alt="帝乃三姐妹"></p><p>画风看起来还不错。<br><img src="/img/Sunday/34%E5%B8%9D%E4%B9%83%E4%B8%89%E5%A7%90%E5%A6%B91.jpg" alt="帝乃三姐妹"></p><p>跨页，很有震撼力。<br><img src="/img/Sunday/35%E5%B8%9D%E4%B9%83%E4%B8%89%E5%A7%90%E5%A6%B92.jpg" alt="帝乃三姐妹"></p><p><img src="/img/Sunday/36%E5%B8%9D%E4%B9%83%E4%B8%89%E5%A7%90%E5%A6%B93.jpg" alt="帝乃三姐妹"><br><img src="/img/Sunday/37%E5%B8%9D%E4%B9%83%E4%B8%89%E5%A7%90%E5%A6%B94.jpg" alt="帝乃三姐妹"></p><h3 id="MAO摩绪"><a href="#MAO摩绪" class="headerlink" title="MAO摩绪"></a>MAO摩绪</h3><p>高桥留美子老师的新作，2019年开始连载。<br><img src="/img/Sunday/38MAO.jpg" alt="MAO"><br>上面有《福星小子》重新动画化，10月播出的信息。</p><h3 id="连载作品介绍3"><a href="#连载作品介绍3" class="headerlink" title="连载作品介绍3"></a>连载作品介绍3</h3><p><img src="/img/Sunday/39%E4%BB%8B%E7%BB%8D3.jpg" alt="连载作品介绍3"><br><img src="/img/Sunday/40%E4%BB%8B%E7%BB%8D3.jpg" alt="连载作品介绍3"></p><h3 id="总之就是非常可爱"><a href="#总之就是非常可爱" class="headerlink" title="总之就是非常可爱"></a>总之就是非常可爱</h3><p>我先放一颗柠檬在这 🍋</p><p>畑健二郎继《旋风管家!》完结后，2017年开始连载的新作。</p><p>讲述自己作为漫画家和声优结婚后的日常（不是）</p><p><img src="/img/Sunday/41%E6%80%BB%E4%B9%8B%E5%B0%B1%E6%98%AF%E9%9D%9E%E5%B8%B8%E5%8F%AF%E7%88%B1.jpg" alt="总之就是非常可爱"></p><p>我是追《旋风管家》追到完结的。虽然那时候都在吐槽怎么还不完结。完结的时候马上就要高考，有一天中午放学回家，刷贴吧刷了一中午。</p><p>我爱会长，所以2018年暑假做MAD，把最后一个镜头留给了会长桂雏菊。我第一次听《残酷天使的行动纲领》是会长唱的版本，听得比原版更多，更熟悉。会长唱的圣诞歌也循环过很多遍。（《木之芽风》也很好听）</p><p><a href="https://www.bilibili.com/video/BV1Ys411M7NY">https://www.bilibili.com/video/BV1Ys411M7NY</a></p><p>甚至在大一加入学生会也与此相关。学校的标志性建筑就是钟塔，和《旋风管家》中的白皇学园有些相似，于是幻想着塔顶的学生会办公室和会长坐那嚼巧克力的画面，就进了学生会。</p><p><img src="/img/Sunday/42%E4%BC%9A%E9%95%BF%E5%90%83%E5%B7%A7%E5%85%8B%E5%8A%9B.jpg" alt="会长吃巧克力"></p><p>之后就是大学的那几年，在B漫上看《总之就是非常可爱》，用大会员白嫖的漫画券，40话到138话都解锁了。应该都是每周追的连载。追这部可能纯粹就是吃狗粮和吃情怀了，毕竟主角和会长真的好像，然后在B漫评论区看网友整什么花活。</p><p>比如这样</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">.      (⌒﹀⌒ ⌒﹀⌒)<br>　   /  (🍋)  (🍋)    \<br>　 ｜      <span class="hljs-regexp">/ ︻ ╲  /</span>)  \<br>　 <span class="hljs-regexp">/ \      \ __/</span> ( /  ∩ )丶<br>　/    ╲＿︶╱   ノ╱ ｜<br>    L＿＿ ＿＿＿/  ＿＿|<br>           不  过  如  此<br></code></pre></td></tr></table></figure><p>好像看前情提要和评论区的乐趣比本篇还多（有时候本篇只有9页）。值得怀念的旧时光。</p><p>后来，剧情好像就往奇怪的方向发展了，一个发糖的作品，搞什么主线呢？这一话依然是讲古代的故事。</p><p><img src="/img/Sunday/43%E6%80%BB%E4%B9%8B%E5%B0%B1%E6%98%AF%E9%9D%9E%E5%B8%B8%E5%8F%AF%E7%88%B1.jpg" alt="总之就是非常可爱"><br><img src="/img/Sunday/44%E6%80%BB%E4%B9%8B%E5%B0%B1%E6%98%AF%E9%9D%9E%E5%B8%B8%E5%8F%AF%E7%88%B1.jpg" alt="总之就是非常可爱"><br><img src="/img/Sunday/45%E6%80%BB%E4%B9%8B%E5%B0%B1%E6%98%AF%E9%9D%9E%E5%B8%B8%E5%8F%AF%E7%88%B1.jpg" alt="总之就是非常可爱"></p><h3 id="涩谷站邻近家族"><a href="#涩谷站邻近家族" class="headerlink" title="涩谷站邻近家族"></a>涩谷站邻近家族</h3><p>久米田康治2021年开始回归Sunday的新连载，故事好像是讲涩谷区的小学生。<br><img src="/img/Sunday/46%E6%B6%A9%E8%B0%B7%E7%AB%99.jpg" alt="涩谷站邻近家族"><br>（听说是久米田有女儿又一力证）</p><h3 id="其他连载作品"><a href="#其他连载作品" class="headerlink" title="其他连载作品"></a>其他连载作品</h3><p>之后的作品都是完全不了解的，只放图，就不介绍了。</p><p>RED BLUE，讲综合格斗技的？有一张彩页。<br><img src="/img/Sunday/47REDBLUE.jpg" alt="RED BLUE"></p><p>你是008，校园特工<br><img src="/img/Sunday/48_008.jpg" alt="你是008"></p><p>作品介绍两张<br><img src="/img/Sunday/49%E4%BB%8B%E7%BB%8D4.jpg" alt="连载作品介绍4"><br><img src="/img/Sunday/50%E4%BB%8B%E7%BB%8D4.jpg" alt="连载作品介绍4"></p><p>舞妓家的料理人，2021年改编过动画，首页介绍网飞正在改编为真人电视剧。电视剧已经在2023年1月播出了，豆瓣评分7.9.</p><p>摘录豆瓣的电视剧版简介：</p><p>节目统筹是枝裕和、制作人川村元气，加上森七菜和出口夏希等豪华演员阵容，携手将卖破200万本的火红漫画搬上荧屏！故事以京都的艺伎区为舞台，讲述舞伎（艺伎学徒）堇和料理人季代在舞伎宿舍里的日子，诉说由美食交织而成的日常生活。</p><p><img src="/img/Sunday/51%E8%88%9E%E5%A6%93%E5%AE%B6%E7%9A%84%E6%96%99%E7%90%86%E4%BA%BA.jpg" alt="舞妓家的料理人"></p><p>Love Comedy Quest</p><p><img src="/img/Sunday/52Love_Comedy_Quest.jpg" alt="Love Comedy Quest"></p><p>Golden Spiral</p><p><img src="/img/Sunday/53Golden_Spiral.jpg" alt="Golden Spiral"></p><p>白山与三田</p><p><img src="/img/Sunday/54%E7%99%BD%E5%B1%B1%E4%B8%8E%E4%B8%89%E7%94%B0.jpg" alt="白山与三田"></p><p>连载作品介绍5<br><img src="/img/Sunday/55%E4%BB%8B%E7%BB%8D5.jpg" alt="连载作品介绍5"><br><img src="/img/Sunday/56%E4%BB%8B%E7%BB%8D5.jpg" alt="连载作品介绍5"></p><p>Volley Volley<br><img src="/img/Sunday/57Volley_Volley.jpg" alt="Volley Volley"></p><p>看名字以为是讲排球，结果是网球。原来volley是网球里的截击球，不等球落地直接击球。后来把网球的球网升高，两边都只能用volley的方式击球，才发展出了排球。这张图就是截击了吧。</p><p><img src="/img/Sunday/58%E6%88%AA%E5%87%BB.jpg" alt="Volley"></p><p>青樱 防卫大学校物语<br><img src="/img/Sunday/59%E9%98%B2%E5%8D%AB.jpg" alt="青樱 防卫大学校物语"></p><p>Be Blues，2011年开始连载的足球漫画。场面画得好，多放几张图。<br><img src="/img/Sunday/60Be_Blues.jpg" alt="Be Blues"><br><img src="/img/Sunday/61Be_Blues.jpg" alt="Be Blues"><br><img src="/img/Sunday/62Be_Blues.jpg" alt="Be Blues"><br><img src="/img/Sunday/63Be_Blues.jpg" alt="Be Blues"></p><h3 id="尾页"><a href="#尾页" class="headerlink" title="尾页"></a>尾页</h3><p>少年 Sunday 的读者有奖调查<br><img src="/img/Sunday/64%E8%AF%BB%E8%80%85%E8%B0%83%E6%9F%A5.jpg" alt="读者调查"><br><img src="/img/Sunday/65%E8%AF%BB%E8%80%85%E8%B0%83%E6%9F%A5.jpg" alt="读者调查"><br>新井隆广的单篇<br><img src="/img/Sunday/66%E7%9F%AD%E7%AF%87.jpg"></p><p>下一期 36·37合并号于8月3日发售，封面和8张彩页是乃木坂46四期生——贺喜遥香。<br><img src="/img/Sunday/67%E4%B8%8B%E6%9C%9F%E9%A2%84%E5%91%8A.jpg" alt="下期预告"></p><p>末页。<br><img src="/img/Sunday/68%E6%9C%AB%E9%A1%B5.jpg"></p><p>结束，明年有机会继续买杂志再做开箱。</p>]]></content>
    
    
    <categories>
      
      <category>折腾搞事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>开箱</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国庆上海杭州游记</title>
    <link href="/2023/11/04/%E6%B8%B8%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E/"/>
    <url>/2023/11/04/%E6%B8%B8%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E/</url>
    
    <content type="html"><![CDATA[<p>国庆假期去上海杭州一共玩了6天。四年以来第一次出陕西省以及第一次去华东地区，玩的很开心。整理一些旅途记录。</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="一、机票背刺"><a href="#一、机票背刺" class="headerlink" title="一、机票背刺"></a>一、机票背刺</h3><p>此前没有乘坐内地民航的经验，听说提前两三个月订飞机票最划算，7月初看了看价格，南航上午10:30航班770元飞浦东，可以接受，其他时间的航班都更贵一些。于是买了南航的票，加上基建燃油一共800多。</p><p>9月27日，出发前三天，查询机票，显示890元，但当天其他几个航班都变成了600多，11:00起飞的东航同样机型飞虹桥只要603元。到晚上，变成了601元，而我乘坐的南航航班价格跌到了600元。11:30起飞的吉祥航空只要535元。</p><p>9月28日，出发前两天，南航的价格显示是555元了，而东航已经降到了510元。也就是说，提前两个多月订票的我，还没出发已经一人亏了260，而且还是飞浦东。</p><p>事后发现，西安到上海每天有24架次航班，但上海飞西安的机票没有出现降价情况，在出发前两天，上海飞西安的票价仍然是1200以上。据我分析，是因为从上海来西安的乘客比西安去上海的乘客多得多，但大多数飞机是要往返的。上海来西安供小于求，而西安去上海供大于求，航空公司卖不出去票，就降价甩卖了。</p><p>之后又发现，西安出发的目的地班次较多的航线都有这个现象，节假日刚开始，西安飞往北上广深以及乌鲁木齐的航班价格都比我预想的便宜得多，但飞往厦门三亚等旅游胜地的班次较少，价格还都在千元以上。</p><p>实际乘机体验：（暴论）坐中小型飞机跟挤公交车没啥区别，座位前后很挤，飞机小小的，乘客吵吵闹闹的。飞机是空客321，座位是左三右三的布局。</p><h3 id="二、人多的地方也要去"><a href="#二、人多的地方也要去" class="headerlink" title="二、人多的地方也要去"></a>二、人多的地方也要去</h3><p>提前做攻略的时候，我会刻意避开人流量最多的旅游景点，比如上海城隍庙，夜晚的南京路和外滩，杭州西湖的断桥和三潭印月岛。实际上这些地方我们最后都去了，虽然的确人多，但体验还是不错的，最有名气的地方是有它的道理。</p><h3 id="三、整体感受"><a href="#三、整体感受" class="headerlink" title="三、整体感受"></a>三、整体感受</h3><p>初见上海感受：</p><ul><li>乡下人第一次坐机场内部轨道交通（卫星厅开往航站楼）</li><li>城市很大很现代，地铁很宽敞。但没有我想像的人多。（可能上海人都去西安了）</li><li>老外的确很多，在景区里，街道上，地铁上，时不时能碰到。</li><li>非机动车禁行标志很多，许多道路都是自行车禁行，比如南京路全段，骑车只能上人行道。在西安只有一些高架桥和隧道是非机动车禁行的，大马路基本都有非机动车道。</li><li>上海也有逆行的电动车。</li><li>上海渡轮上有外卖员骑着电动车过江送外卖。</li><li>饮食完全习惯，太好吃了。</li></ul><p>初见杭州感受：</p><ul><li>人多，明显人多，地铁上人多。街道上还好。</li><li>杭州公交不能刷长安通的交通联合。幸好准备了乘车码。</li><li>亚运会的氛围也没那么浓，只碰到了几个吉祥物雕塑而已。</li><li>外地车禁入+单双号限行，路上车少，打车真爽。</li><li>城市中心有群山，山里有12公里长的隧道，山上石阶路没有路灯却有蛇。杭州人不怕吗？</li></ul><h2 id="先放照片"><a href="#先放照片" class="headerlink" title="先放照片"></a>先放照片</h2><p>已经写好了一万五千字的流水账游记，但决定先放照片，游记之后慢慢润色更新。</p><p>从陆家嘴地铁站出站，第一眼看到的景象。天空微微下着小雨，云雾缭绕，看不到大楼的顶端。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%88%9D%E8%A7%81%E9%99%86%E5%AE%B6%E5%98%B4.jpg" alt="初见陆家嘴"></p><p>正疑惑三件套怎么只有两件，从国金商场走到人行天桥，看到了完整的三件套。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E9%99%86%E5%AE%B6%E5%98%B4%E4%B8%89%E4%BB%B6%E5%A5%97.jpg" alt="陆家嘴三件套"></p><p>向北看到东方明珠塔。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%88%9D%E8%A7%81%E4%B8%9C%E6%96%B9%E6%98%8E%E7%8F%A0.jpg" alt="初见东方明珠"></p><p>在北外滩坐轮渡，远眺东方明珠和外滩。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%8C%97%E5%A4%96%E6%BB%A9%E8%BD%AE%E6%B8%A1%E8%BF%9C%E7%9C%BA%E5%A4%96%E6%BB%A9.jpg" alt="北外滩轮渡远眺外滩"></p><p>第二天，城隍庙，豫园门前<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E8%B1%AB%E5%9B%AD%E9%97%A8%E5%89%8D.jpg" alt="豫园门前"></p><p>去外滩的路上<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%90%91%E5%A4%96%E6%BB%A9%E5%89%8D%E8%BF%9B.jpg" alt="向外滩前进"></p><p>南京路的尽头，正对着江对岸的东方明珠。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E4%B8%9C%E6%96%B9%E6%98%8E%E7%8F%A0%E8%AF%81%E4%BB%B6%E7%85%A7.jpg" alt="东方明珠证件照"></p><p>傍晚的南京路，拉链式过马路。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%82%8D%E6%99%9A%E5%8D%97%E4%BA%AC%E8%B7%AF.jpg" alt="傍晚南京路"></p><p>最经典的黄浦江夜景，外滩远眺浦东。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%A4%96%E6%BB%A9%E5%A4%9C%E6%99%AF.jpg" alt="外滩夜景"></p><p>把东方明珠拉近些。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E6%8B%89%E8%BF%91%E4%B8%9C%E6%96%B9%E6%98%8E%E7%8F%A0.jpg" alt="拉近东方明珠"></p><p>回头是外滩的老建筑<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%9B%9E%E5%A4%B4%E7%9C%8B%E5%A4%96%E6%BB%A9.jpg" alt="回头看外滩"></p><p>南京西路，静安寺大门前，上面是20路无轨电车的电线。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E9%9D%99%E5%AE%89%E5%AF%BA.jpg" alt="静安寺"></p><p>来到杭州，第一站打卡大运河南端拱宸桥。桥前小船上趴着蚣(gōng)蝮(fù)<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E6%8B%B1%E5%AE%B8%E6%A1%A5.jpg" alt="拱宸桥"><br>法喜寺经典角度<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E6%B3%95%E5%96%9C%E5%AF%BA.jpg" alt="法喜寺"></p><p>西湖，岳庙对面准备上船，远处的桥应该是苏堤的一部分。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E8%A5%BF%E6%B9%96.jpg" alt="西湖"></p><p>三潭印月塔上落着一只鸟，可能是鱼鹰<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E4%B8%89%E6%BD%AD%E5%8D%B0%E6%9C%88%E9%B8%9F.jpg" alt="三潭印月鸟"></p><p>在桥上，看别人泛舟西湖<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E8%A5%BF%E6%B9%96%E6%B8%B8%E8%88%B9.jpg" alt="西湖游船"></p><p>浙博之江馆 王守仁家书<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E7%8E%8B%E5%AE%88%E4%BB%81%E5%AE%B6%E4%B9%A6.jpg" alt="王守仁家书"></p><p>良渚古城地图<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E8%89%AF%E6%B8%9A%E5%9C%B0%E5%9B%BE.jpg" alt="良渚地图"></p><p>良渚玉琮王<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E8%89%AF%E6%B8%9A%E7%8E%89%E7%90%AE%E7%8E%8B.jpg" alt="良渚玉琮王"></p><p>爬山去！沿着茶园中的小路上山<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E8%8C%B6%E5%9B%AD%E5%B0%8F%E5%BE%84.jpg" alt="茶园小径"></p><p>发现野生蘑菇！<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E9%87%8E%E7%94%9F%E8%98%91%E8%8F%87.jpg" alt="野生蘑菇"></p><p>258米，我走上来的，自己走上来的。后来发现这好像是西湖以南，钱塘江以北的群山里最高的山了。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%A4%B4%E9%BE%99%E5%A4%B4%E5%B1%B1.jpg" alt="头龙头山"></p><p>山上远眺钱塘江<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E8%BF%9C%E7%9C%BA%E9%92%B1%E5%A1%98%E6%B1%9F.jpg" alt="远眺钱塘江"></p><p>山中有蛇无灯，入夜前匆忙下山，到六和塔<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%85%AD%E5%92%8C%E5%A1%94.jpg" alt="六和塔"></p><p>返程前的最后一张，杭州亚运会吉祥物 宸宸，琮琮，莲莲。他们的原型已全部打卡，照片都已出现。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E4%BA%9A%E8%BF%90%E5%90%89%E7%A5%A5%E7%89%A9.jpg" alt="亚运吉祥物"></p><p>万字游记等着吧！</p><h2 id="上海·第一天"><a href="#上海·第一天" class="headerlink" title="上海·第一天"></a>上海·第一天</h2><h3 id="抵达上海"><a href="#抵达上海" class="headerlink" title="抵达上海"></a>抵达上海</h3><p>西安地铁6转4转14到机场。14号线在渭北的站间距够远的。上车发现有穿cosplay服装的，果然都在空港新城下了，临空会展有漫展。</p><p>跟着标识，T3航站楼出发，先托运行李，再去安检。托运行李排队挺久，安检最左边通道不用排队。登机口是H55好像，不近，旁边有个茶话弄，价格和市内一样。</p><p>很随便地上了飞机，体验比较差，虽然不是廉航，但坐位前后左右都很挤，每一排左三右三共六个人，中间过道只能过一个人。飞机小小，吵吵闹闹。午饭勉强下咽，体验远不如高铁，主打一个比高铁快。10:46起飞，12:50左右降落，飞行时间两小时。</p><p><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E8%B7%A8%E8%BF%87%E9%AB%98%E5%B1%B1.jpg" alt="跨过高山"></p><p>飞过秦岭山区，进入南阳，就是平原。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E8%B7%A8%E8%BF%87%E5%A4%A7%E6%B1%9F.jpg" alt="跨过大江"></p><p>飞机接近上海开始往南，飞到了洋山港附近海上，然后才往北。马上着陆的时候看到旁边还是鱼塘。降落之后，在跑道滑滑滑，绕了一大圈，最后把我们放到了卫星厅。我还在想不会要走两公里的时候，下了楼发现卫星厅和航站楼之间是轨道交通连接。列车进站后，先开启另一侧的车门，让出发的旅客下车。之后关闭另一侧车门，打开这一侧，让到达的旅客上车。</p><p><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E6%9C%BA%E5%9C%BA%E5%9C%B0%E9%93%81.jpg" alt="机场地铁"></p><p>即使这样，也感觉在浦东机场走了好久。最后乘坐地铁二号线离开。再次感叹，8B就是好。</p><p>2号线 浦东机场到龙阳路（换乘）<br>7号线 龙阳路到镇坪路</p><p>酒店订在镇坪路的汉庭酒店，坐了一个多小时地铁才到。出站就是酒店。订的家庭房，一间450，不含早餐。前台推荐加个早餐，两天三人份的早餐只要49元。拿到了六张早餐券。</p><h3 id="浦东"><a href="#浦东" class="headerlink" title="浦东"></a>浦东</h3><p>镇坪路是3&#x2F;4&#x2F;7号线的换乘站，3&#x2F;4号线是同一条高架线，7号线是地下线。从这去哪里都比较方便。放下行李后，直奔陆家嘴。在陆家嘴7号口出站，眼前就是高耸入云的注射器和打蛋器，云雾缭绕。</p><p><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E4%BA%91%E9%9B%BE%E7%BC%AD%E7%BB%95.jpg" alt="拉近顶端"></p><p>看到左边二层有观景台，从身后的国进商场可以进入。到楼上，往北走了一点，才看到开瓶器是被注射器挡住了。在人行天桥边拍照边走向明珠环岛。人车分流，下面走车，上面走人，穿行在各个建筑之间。</p><p>走到东方明珠，天已经快黑了。要赶泰同栈渡口的轮渡，走得很急很累。轮渡是20分钟一班，末班车是7:10。终于赶上了六点半的轮渡。乘船的有游客也有普通市民，不少人骑着自行车和电动车上船，还有送外卖的。船费只要两块钱。轮渡上楼后有座位，但人们上楼后基本都站在船舱外，夜幕降临，可以欣赏到炫彩的东方明珠塔和远处金碧辉煌的外滩。<br><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%8C%97%E5%A4%96%E6%BB%A9%E8%BD%AE%E6%B8%A1%E8%BF%9C%E7%9C%BA%E5%A4%96%E6%BB%A9.jpg" alt="北外滩轮渡远眺外滩"></p><p><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E9%BB%84%E6%B5%A6%E6%B1%9F%E6%B8%B8%E8%88%B9.jpg" alt="江上驶过各种游船"></p><p>不一会到了对岸公平路渡口，在北外滩来福士地下一层的怀旧街区，吃了大壶春。</p><p><img src="/img/%E4%B8%8A%E6%B5%B7%E6%9D%AD%E5%B7%9E%E6%B8%B8%E8%AE%B0/%E5%A4%A7%E5%A3%B6%E6%98%A5.jpg" alt="大壶春"></p><p>点了四个虾肉生煎，四个鲜肉生煎，一碗馄饨。又买了别家的煎饺和春卷。吃到第一口就惊呆了，比我以前吃过的任何生煎都好吃。西安根本没有这个味道。肉馅很实在，有油但又不咸。虾肉馄饨也很鲜美。</p><p>本来还打算去北外滩看看夜景，然后去外白渡桥和乍浦路桥。实在是体力不足，进提篮桥地铁站回了酒店。发现上海地铁口的标识不甚明显，车上也没有明显的当前站点标识，（跑马灯或者LED屏幕那种），很多时候只是贴着线路图，到了哪一站需要自己听报站。</p><h2 id="上海第二天"><a href="#上海第二天" class="headerlink" title="上海第二天"></a>上海第二天</h2><p>未完待续。。。</p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝鸡青铜器博物馆参观记录</title>
    <link href="/2023/09/03/%E5%AE%9D%E9%B8%A1%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86%E5%8F%82%E8%A7%82%E8%AE%B0%E5%BD%95(48P)/"/>
    <url>/2023/09/03/%E5%AE%9D%E9%B8%A1%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86%E5%8F%82%E8%A7%82%E8%AE%B0%E5%BD%95(48P)/</url>
    
    <content type="html"><![CDATA[<p>本想着简单整理整理照片，结果过去了这么久才整理好。</p><h2 id="杨家村窖藏"><a href="#杨家村窖藏" class="headerlink" title="杨家村窖藏"></a>杨家村窖藏</h2><p>进入博物馆的第一个展厅，就被杨家村窖藏震撼。</p><p>杨家村窖藏是2003年在宝鸡眉县杨家村出土的二十七件西周青铜器，件件有铭文，总字数多达四千多字，是以往青铜器出土的历史上绝无仅有的。</p><p>铭文记载了物主单氏家族和西周诸王的历史，这也是第一次从出土文物中证明《史记》所记载的西周诸王世系的正确。</p><h3 id="单五父壶"><a href="#单五父壶" class="headerlink" title="单五父壶"></a>单五父壶</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%8D%95%E4%BA%94%E7%88%B6%E5%A3%B6.jpg" alt="单五父壶"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%8D%95%E4%BA%94%E7%88%B6%E5%A3%B62.jpg" alt="单五父壶2"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%8D%95%E4%BA%94%E7%88%B6%E5%A3%B6%E4%BB%8B%E7%BB%8D.jpg" alt="单五父壶介绍"><br>铭文：单五父乍（作）朕皇考尊壶，其万年子子孙孙永宝用。<br>壶身比一般的青铜器大，但雕琢得很精细。“斑驳绿锈中透出金色的铜体”，的确，壶身很多地方都能看到原本的铜色，青色的外表都是长年累月留下的痕迹。</p><h3 id="单叔鬲"><a href="#单叔鬲" class="headerlink" title="单叔鬲"></a>单叔鬲</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%8D%95%E5%8F%94%E9%AC%B2.jpg" alt="单叔鬲"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%8D%95%E5%8F%94%E9%AC%B2%E4%BB%8B%E7%BB%8D.jpg" alt="单叔鬲"></p><h3 id="天盂"><a href="#天盂" class="headerlink" title="天盂"></a>天盂</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%A4%A9%E7%9B%82.jpg" alt="天盂"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%A4%A9%E7%9B%82%E4%BB%8B%E7%BB%8D.jpg" alt="天盂介绍"><br>盂，铭文同样有子子孙孙永宝用，这几个字的金文已经能认出来了。</p><h3 id="逨盘"><a href="#逨盘" class="headerlink" title="逨盘"></a>逨盘</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E9%80%A8%E7%9B%98.jpg" alt="逨盘"><br>逨盘，盘内底铸有铭文21行，约360字。</p><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E9%80%A8%E7%9B%98%E9%93%AD%E6%96%87.jpg" alt="逨盘铭文"></p><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E9%80%A8%E7%9B%98%E9%93%AD%E6%96%87%E9%87%8A%E4%B9%89.jpg" alt="逨盘铭文释义"></p><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E9%80%A8%E7%9B%98%E4%BB%B7%E5%80%BC.jpg" alt="逨盘价值"><br>逨盘记载的西周十二王，与史记记载一致。当今天子应是周宣王，宣王之后就是幽王了，或许正是因为公子争权，犬戎入侵，单家才会把这些重要的祭祀礼器埋藏到山崖中，直到两千多年后重见天日。</p><p>东周单氏多见《春秋》经传,在孟津。后人皆以为单为周成王后。如今看来，单氏在文王、武王时已分封，可能是平王东迁时，迁徙到孟津的，就像郑国和虢国。</p><h2 id="何尊"><a href="#何尊" class="headerlink" title="何尊"></a>何尊</h2><p>远远地看到了“中国”二字<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%B8%AD%E5%9B%BD.jpg" alt="中国"><br>人很多，毕竟是镇馆之宝。</p><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BD%95%E5%B0%8A1.jpg" alt="何尊1"><br>何尊，1963年出土于贾村塬，来自西周早期，对称布局，饕餮纹样，还带着122字的铭文。其中就有迄今为止发现的最早的“中国”二字。“余其宅兹中国”。</p><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BD%95%E5%B0%8A2.jpg" alt="何尊2"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BD%95%E5%B0%8A%E4%BF%AF%E8%A7%86.jpg" alt="何尊俯视"></p><p>知识介绍：<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BD%95%E5%B0%8A%E4%BB%8B%E7%BB%8D1.jpg" alt="何尊介绍1"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BD%95%E5%B0%8A%E4%BB%8B%E7%BB%8D2.jpg" alt="何尊介绍2"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BD%95%E5%B0%8A%E4%BB%8B%E7%BB%8D3.jpg" alt="何尊介绍3"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BD%95%E5%B0%8A%E4%BB%8B%E7%BB%8D4.jpg" alt="何尊介绍4"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BD%95%E5%B0%8A%E4%BB%8B%E7%BB%8D5.jpg" alt="何尊介绍5"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BD%95%E5%B0%8A%E4%BB%8B%E7%BB%8D6.jpg" alt="何尊介绍6"></p><h2 id="各类青铜器"><a href="#各类青铜器" class="headerlink" title="各类青铜器"></a>各类青铜器</h2><p>接下来展示的是各式各样的青铜器。</p><h3 id="卣-you-，盉-he"><a href="#卣-you-，盉-he" class="headerlink" title="卣(yŏu)，盉(hé)"></a>卣(yŏu)，盉(hé)</h3><p>父辛卣父丁盉<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E7%88%B6%E8%BE%9B%E5%8D%A3%E7%88%B6%E4%B8%81%E7%9B%89.jpg" alt="父辛卣父丁盉"><br>𬩬卣<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%F0%AC%A9%AC%E5%8D%A3.jpg" alt="𬩬卣"><br>史父乙盉<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%8F%B2%E7%88%B6%E4%B9%99%E7%9B%89.jpg" alt="史父乙盉"></p><p>凤鸟纹尊与筒形卣<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%87%A4%E9%B8%9F%E7%BA%B9%E5%B0%8A%E4%B8%8E%E7%AD%92%E5%BD%A2%E5%8D%A3.jpg" alt="凤鸟纹尊与筒形卣"></p><h3 id="壶"><a href="#壶" class="headerlink" title="壶"></a>壶</h3><p>父已壶<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E7%88%B6%E5%B7%B2%E5%A3%B6.jpg" alt="父已壶"><br>成周邦父壶盖，铭文清晰。<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E6%88%90%E5%91%A8%E9%82%A6%E7%88%B6%E5%A3%B6%E7%9B%96.jpg" alt="成周邦父壶盖"></p><h3 id="盂"><a href="#盂" class="headerlink" title="盂"></a>盂</h3><p>丹叔番盂<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%B8%B9%E5%8F%94%E7%95%AA%E7%9B%82.jpg" alt="丹叔番盂"></p><h3 id="鼎"><a href="#鼎" class="headerlink" title="鼎"></a>鼎</h3><p>作父辛鼎<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BD%9C%E7%88%B6%E8%BE%9B%E9%BC%8E.jpg" alt="作父辛鼎"></p><p>儿鼎<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%84%BF%E9%BC%8E.jpg" alt="儿鼎"></p><p>方鼎<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E6%96%B9%E9%BC%8E.jpg" alt="方鼎"></p><h3 id="簋-gui"><a href="#簋-gui" class="headerlink" title="簋(guǐ)"></a>簋(guǐ)</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E7%B0%8B.jpg" alt="簋"><br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E7%B0%8B2.jpg" alt="簋2"><br>鱼伯簋（四耳）<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E9%B1%BC%E4%BC%AF%E5%9B%9B%E8%80%B3%E6%96%B9%E5%BA%A7%E7%B0%8B.jpg" alt="鱼伯四耳方座簋"><br>鱼伯簋（双耳）<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E9%B1%BC%E4%BC%AF%E5%8F%8C%E8%80%B3%E6%96%B9%E5%BA%A7%E7%B0%8B.jpg" alt="鱼伯双耳方座簋"></p><p>目雷纹带盖双耳簋（左） 带盖附耳椭方鼎（右）<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E7%9B%AE%E9%9B%B7%E7%BA%B9%E5%B8%A6%E7%9B%96%E5%8F%8C%E8%80%B3%E7%B0%8B%E4%B8%8E%E5%B8%A6%E7%9B%96%E9%99%84%E8%80%B3%E6%A4%AD%E6%96%B9%E9%BC%8E.jpg" alt="目雷纹带盖双耳簋与带盖附耳椭方鼎"></p><h3 id="鬲-li"><a href="#鬲-li" class="headerlink" title="鬲(lì)"></a>鬲(lì)</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%BE%AE%E4%BC%AF%E9%AC%B2.jpg" alt="微伯鬲"></p><h3 id="甗-yan"><a href="#甗-yan" class="headerlink" title="甗(yǎn)"></a>甗(yǎn)</h3><p>上部为甑，下部为鬲<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E4%BA%95%E5%A7%AC%E7%94%97.jpg" alt="井姬甗"></p><h3 id="鱼伯盘与鱼伯鎣（ying）"><a href="#鱼伯盘与鱼伯鎣（ying）" class="headerlink" title="鱼伯盘与鱼伯鎣（yíng）"></a>鱼伯盘与鱼伯鎣（yíng）</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E9%B1%BC%E4%BC%AF%E7%9B%98%E4%B8%8E%E9%B1%BC%E4%BC%AF%E9%8E%A3.jpg" alt="鱼伯盘与鱼伯鎣"></p><h3 id="史父乙豆与戈鼎"><a href="#史父乙豆与戈鼎" class="headerlink" title="史父乙豆与戈鼎"></a>史父乙豆与戈鼎</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%8F%B2%E7%88%B6%E4%B9%99%E8%B1%86%E5%92%8C%E6%88%88%E9%BC%8E.jpg" alt="史父乙豆和戈鼎"></p><h3 id="觯-zhi"><a href="#觯-zhi" class="headerlink" title="觯(zhì)"></a>觯(zhì)</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E8%A7%AF.jpg" alt="觯"></p><h3 id="爵"><a href="#爵" class="headerlink" title="爵"></a>爵</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E7%88%B5.jpg" alt="爵"></p><h3 id="目纹觚-gu-，冉癸觯-zhi-与蝉纹斗"><a href="#目纹觚-gu-，冉癸觯-zhi-与蝉纹斗" class="headerlink" title="目纹觚(gū)，冉癸觯(zhì)与蝉纹斗"></a>目纹觚(gū)，冉癸觯(zhì)与蝉纹斗</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E7%9B%AE%E7%BA%B9%E8%A7%9A%E5%86%89%E7%99%B8%E8%A7%AF%E8%9D%89%E7%BA%B9%E6%96%97.jpg" alt="目纹觚冉癸觯蝉纹斗"></p><h3 id="罍-lei"><a href="#罍-lei" class="headerlink" title="罍(léi)"></a>罍(léi)</h3><p>周罍<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E5%91%A8%E7%BD%8D.jpg" alt="周罍"><br>火纹罍<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E7%81%AB%E7%BA%B9%E7%BD%8D.jpg" alt="火纹罍"></p><h3 id="铜瓿-bu"><a href="#铜瓿-bu" class="headerlink" title="铜瓿(bù)"></a>铜瓿(bù)</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E9%93%9C%E7%93%BF.jpg" alt="铜瓿"></p><h3 id="方彝"><a href="#方彝" class="headerlink" title="方彝"></a>方彝</h3><p>户方彝<br><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E6%88%B7%E6%96%B9%E5%BD%9D.jpg" alt="户方彝"></p><h3 id="秦公镈"><a href="#秦公镈" class="headerlink" title="秦公镈"></a>秦公镈</h3><p><img src="/img/%E9%9D%92%E9%93%9C%E5%99%A8%E5%8D%9A%E7%89%A9%E9%A6%86/%E7%A7%A6%E5%85%AC%E9%95%88.jpg" alt="秦公镈"></p><p>到此结束。</p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝鸡游记</title>
    <link href="/2023/05/14/%E4%BA%94%E4%B8%80%E5%AE%9D%E9%B8%A1%E8%A1%8C/"/>
    <url>/2023/05/14/%E4%BA%94%E4%B8%80%E5%AE%9D%E9%B8%A1%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p>五一期间，坐摩托去宝鸡玩了两天，写下此篇游记。</p><h2 id="一、《宰执天下》-圣地巡礼，眉县横渠张载祠"><a href="#一、《宰执天下》-圣地巡礼，眉县横渠张载祠" class="headerlink" title="一、《宰执天下》 圣地巡礼，眉县横渠张载祠"></a>一、《宰执天下》 圣地巡礼，眉县横渠张载祠</h2><p>第一站张载祠，位于310国道，眉县横渠镇。</p><p>东边是一个广场，有围挡挡着，没有开放，牌楼上写着横渠书院，能看到里面有张载的雕像。</p><p>张载祠修的还不错，在门口登记一下就可以进入，不大的院子，中轴线上有两间屋子，左右又各有一间。共四间屋子（四个展室）。</p><p>院内有几株古柏，均有900年左右的历史。最大的一株介绍据说是张载手植柏，岁数有千年以上，树干很粗大，纹理明显，看起来苍劲有力，介绍说在万历年间的关中大地震后严重受损，但依然顽强生长，勃勃生机。</p><p>第一展室介绍张载的生平故事，我去的时候，有一名小学生作为讲解员，向一群大人讲解。有一位留着胡子的瘦老人，看起来像一位老教授，不时提问和鼓励。不知道小朋友能不能理解，介绍到气学相关的内容，老人跟小朋友说世界是物质的，物质是运动的…</p><p>展室外有一石刻，是于右任题写的横渠四句。张载最有名的可能就是这四句话：为天地立心，为生民立命，为往圣继绝学，为万事开太平。于右任的书法是送给他的“门生”，来自眉县的严协和。在眉县地方志中查到了严协和的生平介绍：<a href="http://dfz.shaanxi.gov.cn/sqzlk/xbsxz/sxdyl/bjs_16199/mxz/201004/t20100415_732762.html">严协和 (shaanxi.gov.cn)</a></p><p>往后面走，看到一群人正在院里打太极，有人用手机录像。想必是当地什么协会组织的活动，用这里古色古香的房子做背景。有一个小孩也进入队伍中模仿，很是可爱。</p><p>再之后的展示品就有一些奇怪的东西了，比如宋代皇帝的圣旨（看着跟新的一样），康熙赐的牌匾（这个据说是镇馆之宝，大概是真的），还有落款从元丰年间到明代的各种石碑。偶遇一位从宝鸡来的年轻人，跟我一起看碑，小声嘀咕这东西是真的吗，我一看碑的背面，上头还刻着司马光的画像，再看周围所有碑都裸露在外，只有于右任的碑是玻璃罩着的，大概只有这一个有点年头。</p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/01%E5%BC%A0%E8%BD%BD%E7%A5%A0.jpg"></p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/01%E5%8F%A4%E6%9C%A8.jpg"></p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/01%E4%BA%8E%E5%8F%B3%E4%BB%BB%E6%A8%AA%E6%B8%A0%E5%9B%9B%E5%8F%A5.jpg"></p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/01%E5%A4%AA%E6%9E%81.jpg"></p><h2 id="二、岐山五丈原"><a href="#二、岐山五丈原" class="headerlink" title="二、岐山五丈原"></a>二、岐山五丈原</h2><p>从横渠镇继续出发，路边地里都种着眉县当地的特产猕猴桃。在眉县县城以北的渭河边有过山车和摩天轮，看起来已经荒废了。在县城随便吃了顿午饭，下一站是岐山县。</p><p>岐山县，县城在渭河以北大约15公里。在渭河边的是蔡家坡镇，在渭河的北边，有蔡家坡火车站和高速公路的出口，路上的每家店都做臊子面。五丈原在渭河南边，是高出地面的台原。此行的目的是五丈原上的诸葛亮庙，诸葛亮病逝五丈原，这里留下了衣冠冢。</p><p>跟着导航上了五丈原，走着走着就进了村子，走到了土路上，然后就没有路了。原路返回，看到路边的牌子上显示这里就是五丈原村。找到游客服务中心停车，此时已经很疲惫了。走进园内，两边都是卖特产的小摊贩，又走了一段，出现一个简易的出入口，一个老汉在验票，询问得知，得在之前的游客服务中心买票。再次原路返回，已经不想再买票进去了。</p><p>于是在停车处向远处眺望，可以看到低处的渭河和远处的山脉。或许当年诸葛亮也曾在这里眺望，观察驻扎在渭河北岸的司马懿吧。</p><p>从小看三国题材的作品，原本以为诸葛亮北伐行军都是在甘肃祁山那边，很久以后才知道五丈原就在陕西，就在关中，就在西安到宝鸡的路上，距西安只有120公里。</p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/02%E4%BA%94%E4%B8%88%E5%8E%9F.jpg"></p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/02%E4%BA%94%E4%B8%88%E5%8E%9F%E8%BF%9C%E7%9C%BA.jpg"></p><h2 id="三、陈仓老街"><a href="#三、陈仓老街" class="headerlink" title="三、陈仓老街"></a>三、陈仓老街</h2><p>当天下午，沿着河堤路继续骑行，看到路边的共享单车开始出现，路上的公交车和私家车都越来越多，就抵达了宝鸡市。宝鸡市横跨渭河南北两岸，再向远都有山，所以城区沿河伸展。老城区是在渭河北边，渭河南边距山更近。因为第二天早上要去青铜器博物馆，于是在渭河南边找了家酒店。安顿下来之后，就来到了陈仓老街。</p><p>首先看到的是火车头。宝鸡也是一座火车拉来的城市，这里古称陈仓，以前属于凤翔府，府治凤翔县在宝鸡的东北。后来，陇海铁路和宝成铁路在这里交汇，这里成为了前往大西北和大西南的岔路口。</p><p>直到2017年的时候，我从西安去成都坐火车还是先走陇海线到宝鸡，再走宝成线去成都。傍晚出发，第二天早上抵达。后来西成高铁开通，西安去成都可以直接走汉中，不再需要路过宝鸡。</p><p>进入陈仓老街，看起来是各个城市都会有的仿古小吃一条街，卖的东西都大差不差。夜色降临，灯光不错，很适合拍照，于是拿相机边走边拍。</p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/03%E8%80%81%E8%A1%97%E7%81%AB%E8%BD%A6.jpg"></p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/03%E8%BF%9B%E5%85%A5%E8%80%81%E8%A1%97.jpg"></p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/03%E6%A5%BC%E4%B8%8B%E4%B9%9F%E6%9C%89%E7%BE%8E%E9%A3%9F.jpg"></p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/03%E5%BB%8A%E6%A1%A5.jpg"></p><h2 id="四、青铜器博物馆"><a href="#四、青铜器博物馆" class="headerlink" title="四、青铜器博物馆"></a>四、青铜器博物馆</h2><p>第二天早上，来到了此行最重要的目的地，中国青铜器博物馆。</p><p>博物馆在陈仓老街里面，从北边或东边穿过陈仓老街，就能看到无数的台阶，博物馆就在最上面。从地图上看，博物馆所在的地方位于中华石鼓园，也被叫做石鼓山。拾级而上，上了至少八九层楼的高度，终于来到博物馆门前。</p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/04%E5%8D%9A%E7%89%A9%E9%A6%86%E6%AD%A3%E9%97%A8.jpg"></p><p>宝鸡，曾经是周文化的发源地，西周建都沣镐前的故都，许多王公贵族聚居的封地，也是秦人向东迁徙的重心，见证了从秦国到秦朝四百年的历史。这里出土了无数商周时期的青铜器，其中不乏国宝重器：散氏盘，大盂鼎，毛公鼎，虢季子白盘，大克鼎，天亡簋，何尊。</p><p>虽然宝鸡发现了许多国宝级文物，但现在还作为镇馆之宝留在宝鸡的，只有何尊。在这件青铜器的铭文中，有着迄今为止发现的最早的“中国”二字。</p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/04%E4%BD%95%E5%B0%8AP.jpg"></p><p>此外，博物馆的大厅中，列出了曾经有过记载，后来消失在历史长河中的宝鸡出土青铜器，以及流失海外的宝鸡出土青铜器。有许多展板，展示了这些青铜器如何辗转流落到世界各地。</p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/04%E8%BE%97%E8%BD%ACP.jpg"></p><p>关于博物馆藏品，内容很多，或许会单独写一篇。</p><h2 id="五、北坡"><a href="#五、北坡" class="headerlink" title="五、北坡"></a>五、北坡</h2><p>参观完青铜器博物馆，不知怎么走错了路就进入隧道，到了渭河北岸的宝鸡市区。沿着宝鸡市的主干道经二路前进，火车站前正在施工围挡，于是顺着路上了北坡（节假日只能东边上西边下），在这里观景。向西看到的是金台观的大殿，金台观从平原一路向上修建到北坡上。再西边是河谷对面的山坡。向南看到宝鸡城区沿渭河一字展开，可以看到渭河和远处的秦岭。</p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/05%E5%A4%A7%E6%AE%BF.jpg"></p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/05%E5%AE%9D%E9%B8%A1%E5%85%A8%E6%99%AFP.jpg"></p><p>继续上山，来到西府老街。之前听说有很多正宗的宝鸡美食，以为是小吃街，结果还是像袁家村、马嵬驿、白鹿仓一样的人造古镇。实在是太多人了，逛了逛就出来，准备打道回府。</p><p>回家的路上走渭河北边的河堤路，比南边的河堤路还要好走些。两点出发，路上在蔡家坡吃了擀面皮和臊子面（不是饭点，但肖家大院依然人满为患），晚上八点到了咸阳，九点多到家。</p><p><img src="/img/%E5%AE%9D%E9%B8%A1%E6%B8%B8%E8%AE%B0/05%E5%B2%90%E5%B1%B1%E8%87%8A%E5%AD%90%E9%9D%A2.jpg"></p><p>宝鸡之旅完结。</p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022 年终总结</title>
    <link href="/2023/01/21/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2023/01/21/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>慢慢得习惯了上班的生活，有时候会感觉只有工作能让我集中精神，回到家后什么都不想做。</p><p>年初是从疫情封城开始，年末是到感染新冠结束。想想真是不寻常的一年。因为疫情的原因，地铁也不太坐了，骑车上班的次数比以前多得多。甚至到了十一月十二月还在骑车。骑车多了，走路少了，体重增加了，身体状况也变差了。</p><p>身体状态好，与人交流多的时候会心情舒畅。身体状态差，与人交流少的时候会感到生活灰暗。</p><p>去年才开始参加工作，于是今年买了不少东西。但很多东西都是买之前特别期待，买了之后也就那样了。上半年买的书有的到现在还没有拆开包装。</p><p>每到节假日的时候，和同学聚一聚吃个饭，能给我很大慰藉。但九月份中秋节之后就不太有机会了。国庆节一直在下雨，之后疫情越来越严重，直到自己和同学都中招，这一年就稀里糊涂地过去了。</p><p>但今年的冬天好漫长啊！</p><p>2023年1月14日，小年夜，在周末的深夜写一写年终总结。</p><h2 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h2><h3 id="秦岭看雪"><a href="#秦岭看雪" class="headerlink" title="秦岭看雪"></a>秦岭看雪</h3><p>2月18日，下雪。于是在上班路上买了第二天去秦岭站的火车票，去看雪。直达车票已售罄，于是先乘坐Z41到宝鸡，再换乘去秦岭的K5445。回程也是在宝鸡换乘。</p><p>秦岭站是个很小的车站，从车站出来跟随人群，沿219省道向东北进发，经过岭南公园，目的地是嘉陵江源国家森林公园。一路上看到的全是雪，路边，屋顶，树枝上都是。从车站到嘉陵江源大约4.8公里，一路上坡，不想走路也可以掏钱坐当地人的车。</p><p>冬天去的话，嘉陵江源景区通常是关闭的。可以穿过售票处和景区大门进去看一看，但大雪把道路都埋起来了，没法继续往里走。</p><p>从嘉陵江源原路返回，一路走一路玩雪拍照。整体体验是非常美也非常野，只有公路和被雪掩埋的公园设施，像是没有开发完成，一切全靠自己。刚出火车站的地方还有一些人家和农家乐，往上走就没有了。建议带上吃的喝的。路边的厕所是旱厕，根本无法靠近。只能找人少的地方在雪地里完成上厕所的操作。就当是在野外生存了。</p><p>回程的时候遇到了列车严重超载和隧道中停车，差点以为回不来了。以下是当时的记录：</p><blockquote><p>周六乘坐两当到宝鸡途径秦岭站的k5446，在秦岭上车，车内严重超员，站的人比坐的人多，所有人挤得不能动，硬座变站票（根本挤不到自己座位处）。<br>过了发车时间20分钟站台还有人在上车，看到有小孩的衣服，背包和保温杯都掉下站台。</p><p>发车没多久在隧道内停车，很多人呼吸困难，乘务员在人群中艰难挪移，拿钥匙一个个开窗。停车二十多分钟后才缓缓启动。<br>有人质问乘务员，乘务员表示他们也没遇到过这样的超载。</p><p>秦岭站只有一个站台，进站和上车都不检票（游客太多了），周围有人买的下一趟6064的票，也挤上了这趟车。</p></blockquote><h3 id="陕西考古博物馆"><a href="#陕西考古博物馆" class="headerlink" title="陕西考古博物馆"></a>陕西考古博物馆</h3><p>上半年的时候在钻研史前考古，读了不少相关的书。正好陕西考古博物馆建成，于是约了五一假期的票，一大早就独自骑着小电动车去了。位置在香积寺旁边。</p><p>具体浏览内容之前已经写过了。</p><p>还有几次出游，准备一起放到之后的照片分享。</p><h2 id="买买买"><a href="#买买买" class="headerlink" title="买买买"></a>买买买</h2><p>添置了一批数码产品。</p><h5 id="NAS-威联通"><a href="#NAS-威联通" class="headerlink" title="NAS 威联通"></a>NAS 威联通</h5><p>目前只有一块4TB的红盘。主要用来存照片。<br>最近的新番动画也是通过下载的方式观看的，具体流程是在 蜜柑计划RSS订阅-&gt;qbittorrent下载-&gt;平板观看<br>后来发现还是在视频网站看比较省心，比较能看得下去。</p><h5 id="平板"><a href="#平板" class="headerlink" title="平板"></a>平板</h5><p>提升幸福感。直接原因是夏天客厅太热不能看电视，买的爱奇艺会员好久没用。一开始还用来读书和做笔记，后来只用做看动画跟打游戏了。</p><h5 id="相机-松下GX9"><a href="#相机-松下GX9" class="headerlink" title="相机 松下GX9"></a>相机 松下GX9</h5><p>M43，套机镜头是25mm 1.7 光圈<br>小巧可爱，抚摸着的质感很好。满足我的需求。目前只带出去过三四次。其他照片都是在室内拍摄的。<br>等来年再入手一个变焦镜头和相机包。</p><h5 id="书架"><a href="#书架" class="headerlink" title="书架"></a>书架</h5><p>利用床上空间，DIY了一个悬挂三层书架。做法参考小红书，买了几排AA架，固定在墙上，再定制了三块木板放在上面。木板是直拼板，尺寸是150*25*1.5，每块价格是81元。<br>结果刚买回来就快堆满了。现在依然不敢买纸质书。</p><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><h4 id="《红楼梦》"><a href="#《红楼梦》" class="headerlink" title="《红楼梦》"></a>《红楼梦》</h4><p>高中的时候想读红楼梦，大学的时候晚上散步听红楼梦。有一次在睡前听，醒来就完全忘记了，于是那几天每次睡前都在听同一集，结果没能继续下去。现在想来，可能只是缘分未到。</p><p>于是，在今年终于读完了脂批版的八十回，完全沉迷在书中世界。</p><p>我读的版本是微信读书上的《脂砚斋评石头记（全集）》。一开始读的不是这本，而是人民文学出版社的一百二十回版本，后来发现脂砚斋的批注很有意思，一是提到了很多书里没有提到的事，比如作者的故事，比如后来遗失的章节（狱神庙）；二是有很多提示，提示读者注意谐音（有太多谐音），提示写作手法（有太多章法）；三是有很多吐槽，和看视频开弹幕是一个道理。所以，一定要读脂批版。</p><p>一直以来，人们对红楼梦的理解不尽相同，有各种各样的解释。但当我读过之后，我还是相信书中一开始的作者自云所说，之所以写这本书，是因为此生所见的这些美好的女子值得记述。能将这么多的人物如此细腻地分明刻画，我也被作者的笔力所折服。红楼梦称得上是独一无二的。</p><h4 id="《天龙八部》"><a href="#《天龙八部》" class="headerlink" title="《天龙八部》"></a>《天龙八部》</h4><p>是的，我没有读过天龙八部。也没有看过电视剧。今年终于把它读了。整本书，爱别离，怨憎会，求不得。</p><h4 id="考古与历史"><a href="#考古与历史" class="headerlink" title="考古与历史"></a>考古与历史</h4><p>今年决定了好几个读书的方向，其中一个就是史前考古。于是读了以下几本书。</p><h5 id="《何以中国》-许宏"><a href="#《何以中国》-许宏" class="headerlink" title="《何以中国》 许宏"></a>《何以中国》 许宏</h5><p>这本书很薄，很好读。从国家的起源陶寺文化讲到最早的广域王权国家二里头文化。作者许宏是前二里头考古队长。主要观点有：</p><ol><li>公元前2100年左右，陶寺的都城傲视群雄。在同时期各区系中，陶寺文化的发展水平最高。</li><li>根据墓葬的规格有明显区分，陶寺已经存在某种约定俗成的、按照等级次序使用的礼器的规制，这种礼制是早期复杂化社会建立新秩序的重要支柱。</li><li>龙山文化的中原地区诸多文化，邦国林立，聚落时常冲突。这一时期中原地区<strong>没有发现</strong>超大规模的、具有跨区域影响力的<strong>中心部落</strong>，没有显著的区域整合的迹象。</li><li>这些文化以嵩山为界，北边称作<strong>王湾类型</strong>，南边成为<strong>煤山类型</strong>。最大的不同在于炊具，山北的王湾类型以深腹罐为主，同时有鬲；山南的煤山类型以鼎为主。</li><li>龙山时代末期，曾经光灿一时的各区域文化先后走向衰败或停滞，时间跨度不长，分布范围不大的新砦文化出现，它的文化特征是多区域的融合。</li><li>二里头文化恰恰是在这一地区孕育发展，最后横空出世，成为中国历史上最早出现的核心文化</li><li>二里头是最早的中国，最重要的一个证据就是青铜礼器群的出现。青铜时代意味着王朝礼制时代的到来，因此青铜礼器可以作为二里头是否是最早的中国政治实体的重要证据。</li><li>超大型都邑、青铜礼器及铸铜作坊、城市主干道网、车辙、中轴线布局的宫殿建筑群、祭祀坑、绿松石龙，这些都是二里头发现的中国之最。</li><li>二里头文化深刻地影响了后来的商、周文明。商、周王朝继承并发展了二里头以来的社会整合方式，吸收、沿用了二里头的青铜礼器制度、祭祀制度、宫室制度、墓葬制度等，祭祀祖先，流行占卜，试图连通天地鬼神，明确等级、地位、身份。这些政治文化传统，都与二里头文化一脉相承。</li></ol><h5 id="《中国文明起源新探》苏秉琦"><a href="#《中国文明起源新探》苏秉琦" class="headerlink" title="《中国文明起源新探》苏秉琦"></a>《中国文明起源新探》苏秉琦</h5><p>讲了鬲（lì 有袋三足器），很多的鬲。鬲的出现，鬲的分类，鬲的演化。</p><p>讲了古文化的区系划分。中原地区是六大区系之一，中原影响各地，各地也影响中原，这同以往在中华大一统观念指导下形成的黄河流域是中华民族的摇篮，文化从这里发展起来向周围落后地区扩散的观点不同。</p><p>六大区系</p><ol><li>以燕山南北长城地带为重心的北方</li><li>以山东为中心的东方</li><li>以关中、晋南、豫西为中心的中原</li><li>以环太湖为中心的东南部</li><li>以环洞庭湖与四川盆地为中心的西南部</li><li>以鄱阳湖-珠江三角洲一线为中轴的南方</li></ol><p>另外，还接触了比较有兴趣而不太了解的历史：</p><h5 id="《魏晋南北朝》川胜义雄"><a href="#《魏晋南北朝》川胜义雄" class="headerlink" title="《魏晋南北朝》川胜义雄"></a>《魏晋南北朝》川胜义雄</h5><h5 id="《第三帝国的兴亡-纳粹德国史-1》-威廉·夏依勒"><a href="#《第三帝国的兴亡-纳粹德国史-1》-威廉·夏依勒" class="headerlink" title="《第三帝国的兴亡 纳粹德国史 1》 威廉·夏依勒"></a>《第三帝国的兴亡 纳粹德国史 1》 威廉·夏依勒</h5><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>总计了一下，完整追完的动画居然只有三部。<br>辉夜第三季<br>街角魔族第二季<br>孤独摇滚</p><p>剩下的一些比较喜欢但没有看完的，春节假期抽空补一补。</p><p>间谍过家家<br>青之芦苇<br>莉可丽丝<br>异世界舅舅<br>赛博朋克边缘行者<br>灵能百分百第三季<br>水星的魔女</p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>十三机兵防卫圈<br>最近这几年唯一期待的游戏，原本是我准备买PS5的一大理由，后来登陆switch了，巧的是我刚好有个switch。省钱了。</p><p>于是4月份在第一时间直接买了数字版。不负盛名，强烈推荐。可惜的是，本想二周目体验日语原版字幕，发现买的数字版不能切换语言。按道理加一个语言包又不占多少空间。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>除夕夜里，看了烟花，草草写完。新年伊始，祈求身体健康，好好生活，好好休息。愿宇宙爆炸前我们永远快乐。</p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轨道交通的回忆</title>
    <link href="/2023/01/13/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A%E7%9A%84%E5%9B%9E%E5%BF%86/"/>
    <url>/2023/01/13/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A%E7%9A%84%E5%9B%9E%E5%BF%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E8%A5%BF%E5%AE%89%E5%9C%B0%E9%93%81%E7%BA%BF%E8%B7%AF%E5%9B%BE.jpg" alt="西安地铁线路图"><br>【图源：MetroMan 地铁通】</p><p>盼望着盼望着，地铁终于修到了家门口。很高兴，于是写下此文，记录我与地铁的故事。</p><h2 id="台北"><a href="#台北" class="headerlink" title="台北"></a>台北</h2><p>虽然西安地铁在2011年就开通了2号线，但回想我第一次乘坐地铁（城市轨道交通），应该是2016年初的台北捷运。</p><p>当时西安地铁只开通了1号线和2号线，这两条线路对我来说毫无用处（唯一有价值的路段是钟楼到小寨，但坐公交到钟楼再换乘地铁，不如坐直达小寨的公交车），所以也没有乘坐的机会。</p><p>但台北不一样，台北捷运足足有五条线路，在市区里随便找一个地方，它的半径1.5公里内基本都能找到捷运车站。发达的城市交通让我心生感慨和羡慕。</p><p>印象里台北捷运有数字编号，但好像人们更习惯直呼其名。编号与名称的对应关系如下：</p><p>1号线 棕色 文湖线<br>2号线 红色 淡水信义线<br>3号线 绿色 松山新店线<br>4号线 黄色 中和新芦线<br>5号线 蓝色 板南线</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%8F%B0%E5%8C%97%E6%8D%B7%E8%BF%90%E5%9B%BE.png" alt="台北捷运图"></p><p>乘坐次数比较多的是红色的淡水信义线和蓝色的板南线。这两条线都是经过台铁台北站的。</p><p>淡水信义线在地图上是一条L型线路，北端到海边的淡水码头附近，很多都是在高架桥上行驶，南端向东拐到信义区的台北101大楼。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/101.jpg" alt="101大楼"></p><p>图为在台北101&#x2F;世贸站出站时拍摄101大楼。</p><p>板南线在地图上是一条横线，西边可以到新北市的板桥区，延忠孝路向东。我去华山文创园看柯南展览就是在忠孝新生站下的车。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E6%9F%AF%E5%8D%97%E5%B1%95.jpg" alt="柯南展"></p><p>此外，1号线（文湖线）也有一些印象，这条线路与其他的有很大不同，自动驾驶，短编组（一列大约只有四个车厢），每个车厢之间是封闭的，不能来回走动。</p><p>和台铁一样，台北捷运也是四语报站。（国语，闽南语，客家话，英语）</p><h2 id="成都"><a href="#成都" class="headerlink" title="成都"></a>成都</h2><p>成都的轨道交通发展速度比西安迅猛得多，每次去都有新开通的地铁线路，在2017年就有了大环线。</p><p>印象比较深的是换乘。在中医大省医院站，4号线下车走到对面就可以同台换乘2号线。更可怕的是2号线的终点站犀浦，地铁与前往都江堰的城际铁路同台换乘！给我带来了极大的震撼。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E6%88%90%E9%83%BD%E7%8A%80%E6%B5%A6.jpg" alt="成都犀浦"></p><p>唯一遗憾的是，武侯祠附近直到现在都没有地铁经过。</p><h2 id="天津"><a href="#天津" class="headerlink" title="天津"></a>天津</h2><p>天津地铁看似线路很多，但我在天津玩的时候却没怎么坐过地铁。可能是因为住的地方是在天大附近，没有地铁，出行基本靠公交车。天津的公交还是很发达的。</p><p>似乎只有第一天从天津西站到海光寺是坐地铁的，站台比较昏暗，在地下第一次见到半封闭的屏蔽门。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%A4%A9%E6%B4%A5%E5%9C%B0%E9%93%81.jpg" alt="天津地铁"></p><h2 id="北京"><a href="#北京" class="headerlink" title="北京"></a>北京</h2><blockquote><p>欢迎乘坐北京地铁1号线列车。本次列车开往王府井 复兴门站方向，终点站是苹果园站。列车运行前方是东单站，下车的乘客请提前做好准备。东单站是换乘车站，换乘地铁五号线的乘客，请在东单站下车。</p></blockquote><p>我现在脑子里都能播放北京地铁慢悠悠的超长报站，这简直是北京地铁特色。之后再坐京港地铁，听到的是极简报站，对比尤为明显。</p><p>北京地铁线路网很发达，我们住在建国门附近，刚好是1号线和2号线的换乘站。出站口是在西南角的古观象台，出站往西走是彩虹色的桥，再之后是中国海关。从那进大羊毛胡同往南走就是我们住的金泰之家酒店。</p><p>我是在2019年年初去的，那时候8号线分为南北两段，中间还没有贯通。北段的终点站是中国美术馆。</p><h2 id="重庆"><a href="#重庆" class="headerlink" title="重庆"></a>重庆</h2><p>重庆的轨道交通本身就是一道风景。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E6%9D%8E%E5%AD%90%E5%9D%9D.jpg" alt="李子坝"></p><p>有人把重庆轨道交通称为地铁、轻轨或者单轨，我这里按照官方名称，就叫做重庆轨道交通(Chongqing Rail Transit，CRT)。</p><p>虽然其他地方的轨道交通也有从地下开到高架桥上，或者从高架桥开着开着钻入地下的线路，但重庆的轨道交通和这些都不一样。它不是上天入地般钻入地下，而是走着走着，前面就是一座山，它笔直地开进了山中央的隧道。</p><p>这个场景见于铜元局或者牛角沱，列车经过江上的桥梁，进了渝中半岛，就开进了山里。</p><p>我们去的时候（2019年），重庆轨道交通闸机还不能刷支付宝或者微信乘车码，于是我跟家人每次出行都要进行在自助售票机买票这一行为。作为一个没去过很多地方的年轻人，我几乎只在重庆坐轨道交通买过票。</p><p>另一个让我意外的是，末班车时间太早了。重庆人没有夜生活吗？6号线九点多就是末班车，其他线路也都是十点多末班车。我在其他城市从来没有考虑过赶不上末班车的问题。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E7%A3%81%E5%99%A8%E5%8F%A3%E7%AB%99.jpg" alt="磁器口站"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E7%A3%81%E5%99%A8%E5%8F%A3%E5%87%BA%E7%AB%99.jpg" alt="磁器口出站"></p><h2 id="昆明"><a href="#昆明" class="headerlink" title="昆明"></a>昆明</h2><p>昆明地铁给我的震撼在于，同一辆列车开着开着就从1号线变成了2号线。当时好像只有这两条线路，街道上很多地方都在开挖修地铁。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E6%98%86%E6%98%8E%E5%9C%B0%E9%93%81%E7%AB%99%E6%A0%87.jpg" alt="昆明地铁站标"></p><p>红色站点是1号线，蓝色站点是2号线，无需下车换乘，过了环城南路站后，这趟车就从1号线变成了2号线。</p><h2 id="西安"><a href="#西安" class="headerlink" title="西安"></a>西安</h2><p>说回西安地铁。直到2016年11月地铁3号线开通，我才开始在西安坐地铁。高中毕业上了大学，坐地铁的机会也多了起来。</p><p>当时我的荣耀手机刚刚支持NFC功能，申请体验资格免开卡费，于是毫不犹豫体验了。NFC和实体长安通交通卡一样，可以享受九折优惠。但是刷NFC有时候伴随风险，有一次在胡家庙出站怎么也刷不过去，最后无奈求助车站工作人员，用单程票出了站。</p><p>2018年年初的元宵节，我第一次坐动车出游，在去北客站的地铁上捡到了一张元宵灯谜。于是靠猜灯谜获得了一张单程票。当天返程回家时，我在咸阳秦都站下车，一路游荡走过了渭河桥，看到渭河上的烟花。最后在晚上十点半在当时的1号线的起点后卫寨使用单程票坐车回家。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%85%83%E5%AE%B5%E7%81%AF%E8%B0%9C.jpg" alt="元宵灯谜"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%90%8E%E5%8D%AB%E5%AF%A82.jpg" alt="后卫寨2"></p><p>2018年，4号线将要开通，五路口环形人行天桥计划拆除。拆除理由是十字路口的地铁站已具备行人过街的功能。这座天桥对很多人来说都是五路口的标志建筑，我还记得102路和103路无轨电车的电线在这里交汇。1月18日，我在五路口环形天桥上拍照留念。三天后的1月21日，再次经过五路口的时候，环形天桥已经被围挡起来。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E4%BA%94%E8%B7%AF%E5%8F%A3%E7%8E%AF%E5%BD%A2%E5%A4%A9%E6%A1%A51.jpg" alt="五路口环形天桥1"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E4%BA%94%E8%B7%AF%E5%8F%A3%E7%8E%AF%E5%BD%A2%E5%A4%A9%E6%A1%A52.jpg" alt="五路口环形天桥2"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E4%BA%94%E8%B7%AF%E5%8F%A3%E7%8E%AF%E5%BD%A2%E5%A4%A9%E6%A1%A53.jpg" alt="五路口环形天桥3"></p><p>2018年12月26日，西安地铁4号线开通。我在12月30日前往体验。这是当天拍摄的照片。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%A4%A7%E9%9B%81%E5%A1%94.jpg" alt="大雁塔"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%A4%A7%E9%9B%81%E5%A1%94%E7%9A%84%E7%94%BB.jpg" alt="大雁塔的画"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%A4%A7%E5%94%90%E8%8A%99%E8%93%89%E5%9B%AD%E6%98%BE%E7%A4%BA.jpg" alt="大唐芙蓉园显示"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%A4%A7%E5%94%90%E8%8A%99%E8%93%89%E5%9B%AD.jpg" alt="大唐芙蓉园"></p><p>2020年12月18日上午9:30，西安地铁5号线，6号线一期，9号线同时开通，西安的地铁网初步成型。当天是考研结束后的第一天，我从学校步行至国际医学中心站，乘坐新开通的地铁回家。</p><p>按道理，地铁6号线的倒数第二站就在学校的西北角，这里的出入口已经安装了灯光和自动扶梯。可惜这一站“西电科大南校区·未来之瞳”竟没有开通。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E6%9C%AA%E5%BC%80%E9%80%9A%E7%9A%84%E8%A5%BF%E7%94%B5%E7%AB%99.jpg" alt="未开通的西电站"></p><p>来到车站乘车，从始发站“西安国际医学中心”坐到终点站“西北工业大学”下车换乘五号线。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%9B%BD%E5%8C%BB%E7%AB%99.jpg" alt="国医站"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%9B%BD%E5%8C%BB%E7%AB%992.jpg" alt="国医站2"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/6%E5%8F%B7%E7%BA%BF%E5%B4%AD%E6%96%B0%E7%9A%84%E8%BD%A6%E5%8E%A2.jpg" alt="6号线崭新的车厢"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E8%A5%BF%E5%B7%A5%E5%A4%A7%E4%B8%8B%E8%BD%A6.jpg" alt="西工大下车"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E6%96%B0%E7%9A%84%E7%BA%BF%E8%B7%AF%E5%9B%BE.jpg" alt="新的线路图"></p><p>2021年6月29日，西安地铁14号线开通。7月3日，我在咸宁路站排队购买14号线开通纪念票。每张票售价100元，共可以乘坐20次，单次乘坐超过5元就不亏。同时为我的创新港同学代购一张。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E6%8E%92%E9%98%9F%E4%B9%B014%E5%8F%B7%E7%BA%BF%E5%BC%80%E9%80%9A%E7%BA%AA%E5%BF%B5%E5%8D%A11.jpg" alt="排队买14号线开通纪念卡1"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E6%8E%92%E9%98%9F%E4%B9%B014%E5%8F%B7%E7%BA%BF%E5%BC%80%E9%80%9A%E7%BA%AA%E5%BF%B5%E5%8D%A12.jpg" alt="排队买14号线开通纪念卡2"></p><p>开学后的一天，乘坐地铁5号线前往创新港。阿房宫站的装修还是比较震撼的，天花板印着阿房宫赋。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E9%98%BF%E6%88%BF%E5%AE%AB.jpg" alt="阿房宫"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E9%98%BF%E6%88%BF%E5%AE%AB2.jpg" alt="阿房宫2"></p><p>到达创新港。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%88%9B%E6%96%B0%E6%B8%AF.jpg" alt="创新港"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%88%9B%E6%96%B0%E6%B8%AF2.jpg" alt="创新港2"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%88%9B%E6%96%B0%E6%B8%AF3.jpg" alt="创新港3"></p><p>B1出入口，交大师生专用。交大欢迎你。可惜我不是交大师生。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E4%BA%A4%E5%A4%A7%E6%AC%A2%E8%BF%8E%E4%BD%A0.jpg" alt="交大欢迎你"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E4%BA%A4%E5%A4%A7%E5%B8%88%E7%94%9F%E5%87%BA%E5%85%A5%E4%B8%93%E7%94%A8%E9%80%9A%E9%81%93.jpg" alt="交大师生出入专用通道"></p><p>上班之后，节假日前一天的晚高峰，经常要等三四趟车。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E8%BF%9B%E4%B8%8D%E5%8E%BB.jpg" alt="进不去"></p><p>最后是两张地铁6号线二期施工的照片。</p><p>2018年5月13日拍摄，东关正街开始搬迁绿化带。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E4%B8%9C%E5%85%B3%E6%AD%A3%E8%A1%97%E6%96%BD%E5%B7%A5.jpg" alt="东关正街施工"></p><p>2019年3月30日拍摄，兴庆公园中的地铁施工围挡。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%85%B4%E5%BA%86%E5%85%AC%E5%9B%AD%E5%9B%B4%E6%8C%A1.jpg" alt="兴庆公园围挡"></p><p>现在，地铁6号线二期如期开通，但我最近坐地铁的机会反而不多了。</p><h2 id="20230917-更新"><a href="#20230917-更新" class="headerlink" title="20230917 更新"></a>20230917 更新</h2><p>今年7月8日参与了西安地铁盖章盖章打卡活动。第一次乘坐14号线和新开通的16号线。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%9C%B0%E9%93%81%E7%9B%96%E7%AB%A0%E6%89%93%E5%8D%A1%E7%89%88.jpg" alt="地铁盖章打卡版"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%9C%B0%E9%93%81%E7%9B%96%E7%AB%A0%E7%BA%AF%E4%BA%AB%E7%89%88.jpg" alt="地铁盖章纯享版"></p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%B8%B8%E5%AE%81%E5%AE%AB.jpg" alt="常宁宫"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>分享一些与轨道交通有关的小事。</p><h3 id="让人上瘾的启动音"><a href="#让人上瘾的启动音" class="headerlink" title="让人上瘾的启动音"></a>让人上瘾的启动音</h3><p>在 2020 年初因疫情刚爆发的那段时间，我的心情一直不太好，偶然间点进了B站的一个视频：<a href="https://www.bilibili.com/video/BV1X4411j7uW">【VVVF启动音特辑】Alstom特有的美妙音乐，全球阿尔斯通启动音VVVF大合辑</a>，让我感到了些快乐。不知为何，听到阿尔斯通这种地铁列车启动的电机噪音会让我心情愉快。西安地铁3号线也是类似这种声音（更像3:40处），让人上瘾。</p><h3 id="洛天依铁道唱歌"><a href="#洛天依铁道唱歌" class="headerlink" title="洛天依铁道唱歌"></a>洛天依铁道唱歌</h3><p><a href="https://www.bilibili.com/video/BV1Zb4116748">【北京地铁系列】洛天依带你铁道唱歌</a></p><p>原版的铁道唱歌是日本明治维新时代用于地理教育的儿歌。<a href="https://www.bilibili.com/video/BV1hx411q7jX">铁道唱歌 东海道线篇 </a></p><p>曾经想过做类似的西安地铁唱歌视频，还专门了解了平水韵和十三辙，在大学无聊的政治课上开始填词。后来发现对西安的很多地方还不熟悉，地铁的站间距又太短，最后不了了之。</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%B0%E8%BE%BE%E9%9F%A6%E6%9B%B2%E5%8D%97.jpg" alt="第一次到达韦曲南"></p><h3 id="西安地铁屏幕播放动画AMV"><a href="#西安地铁屏幕播放动画AMV" class="headerlink" title="西安地铁屏幕播放动画AMV"></a>西安地铁屏幕播放动画AMV</h3><p>曾经，西安地铁的站台和车内的显示屏经常播放日本动画的AMV&#x2F;MAD&#x2F;剪辑，初次看到很是震惊。至少从2017年到2021年是这样的，在紫罗兰永恒花园（2018年1月动画）播出不久，西安地铁的屏幕上就出现了它的剪辑视频，让我惊讶于这些视频竟然还会更新。最后一次见到大概是2021年3月27日，我坐6号线回学校，到了终点站西安国际医学中心，空荡的车厢里回荡着日语歌曲，屏幕上是动画的剪辑，好像当时有lovelive的画面。</p><p>当天发的微博：</p><p><img src="/img/%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A/%E5%BE%AE%E5%8D%9A%E6%88%AA%E5%9B%BE.jpg" alt="微博截图"></p><p>可惜没有拍照或者录像。听说这是地铁电视曾经的一个节目《次元町》，还曾征集投稿，B站有人投稿成功。后来这个节目就没有了。放一些在B站找到的录像：</p><p><a href="https://www.bilibili.com/video/BV1Hb4y1D7K9">西安地铁老二次元了 </a></p><p><a href="https://www.bilibili.com/video/BV1q54y1h7BV">真醉，西安地铁站里播这个？ </a></p><p><a href="https://www.bilibili.com/video/BV1S4411M7YV">西安地铁居然在放动漫AMV，惊了 </a></p><p><a href="https://www.bilibili.com/video/BV1tJ411R7Q1">某西安地铁有B站内部人员，竟多次放动漫混剪。。。 </a></p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国历史上的气温变化概述</title>
    <link href="/2022/12/06/Temperature/"/>
    <url>/2022/12/06/Temperature/</url>
    
    <content type="html"><![CDATA[<p>本文为一篇摘录笔记，主要内容摘自：史念海 《历史地理学十讲》长江文艺出版社 第一讲 《我国古今气候的同异》。</p><p>与气候相关的记载：</p><ul><li>甲骨文 - 求雨求雪</li><li>《礼记·月令》- 每个月的具体记载</li><li>历代史书《五行志》</li><li>《梦溪笔谈》</li></ul><p>示意图：<br><img src="/img/Temperature.jpg" alt="中国历史气候变化"></p><h2 id="引子：竺可桢研究成果"><a href="#引子：竺可桢研究成果" class="headerlink" title="引子：竺可桢研究成果"></a>引子：竺可桢研究成果</h2><p>温暖期：新石器时代到西周初年，西周到两汉，隋唐到宋初，宋末元初<br>寒冷期：西周初年，汉末三国南北朝，北宋中期到南宋末期，元明清三代</p><blockquote><p>竺可桢先生的《中国近五千年气候变迁的初步研究》一文，就是中国历史时期气候研究成果的总结。他通过大量的文献与考古资料表明历史时期中国气候的冷暖、干湿波动呈现出交替变化的态势，并把中国五千年来的气候变化分为四个温暖期和四个寒冷期，开中国历史气候研究之先河。他认为历史时期的世界气候是有变迁的。丰富的中国历史文献为研究中国古代气候创造了极为有利的条件。根据历史和考古发掘材料证明中国在近五千年中，最初两千年，即从仰韶文化时代到河南安阳殷墟时代，年平均温度比现在高2℃左右。在这以后，年平均温度有2℃～3℃的波动，寒冷时期出现在公元前1000年（殷末周初）、公元400年（六朝）、公元1200年（南宋）和公元1700年（明末清初）时代。汉唐两代则是比较温暖的时代，这种气候变迁是全世界性的。</p></blockquote><h2 id="一、从新石器开始的温暖气候"><a href="#一、从新石器开始的温暖气候" class="headerlink" title="一、从新石器开始的温暖气候"></a>一、从新石器开始的温暖气候</h2><blockquote><p>从进入历史时期，气候就显得较现在为温暖。京津地区接近那时的亚热带地区北缘，气候温暖且湿润。年平均气温大约比现在高3摄氏度。</p></blockquote><p>半坡出土了<strong>獐</strong>和<strong>貉</strong>的遗骸。獐现在只生活在长江流域的沼泽地区，貉也是喜栖于河湖滨畔。<br>安阳出土了<strong>象</strong>，貘，獐，犀牛，鲸的骨骼。其中一些可能是外来的，但象是曾经生活在黄河流域的。卜辞记载有殷代<strong>田猎获象</strong>的语句，既然是田猎到的，应该不是外方引入的物种。卜辞的“为”字从手牵象，说明殷人曾经役使过象。</p><blockquote><p>这一时期的温暖气候，有关各地所发现的孢粉就是具体的例证。黑龙江省呼玛县的桤树和其他落叶阔叶树的孢粉，内蒙古自治区察哈尔右翼中旗大义发泉细石器文化层不仅中期花粉含量多于晚期，且有喜湿乔木栎树和草本十字花科的花粉，可见这些北部地区的温度和湿度都高于现在。就是西北地区天山北麓，当时云杉生长线也比现在为高，而西藏自治区希夏帮玛峰下和珠穆朗玛峰北的孢粉和植物化石以及中石器时期的遗存，都可以作为证明。</p></blockquote><h2 id="二、周初的寒冷气候和之后转暖"><a href="#二、周初的寒冷气候和之后转暖" class="headerlink" title="二、周初的寒冷气候和之后转暖"></a>二、周初的寒冷气候和之后转暖</h2><p>《今本竹书纪年》有一条记载： <code>周孝王七年，江河俱冻。</code>此事不见于古本竹书纪年，虽然今本竹书纪年记载多不可尽信，但自然现象与人事无关，可能并非有意作伪。</p><p>西周和春秋时期，<strong>梅</strong>在黄河流域多所种植，这在《诗经》里多次描述，足以证实当时气候温暖。梅也出现在尚书，《尚书·说命下》记载 <code>若作酒醴，尔惟麴蘖；若作和羹，尔惟盐梅</code> </p><p>还有一些树木可以证明当时温暖。<strong>檀，棕，楠，杉，豫章</strong>等树都是黄河流域不难见到的树木。</p><blockquote><p>檀见于关中和中条山，棕见于秦岭和崤山、熊耳山，最远到达白于山和六盘山。楠见于秦岭和崤山，杉见于终南山。这些树木大致在唐代以后就很少见于有关黄河流域的记载。</p></blockquote><h2 id="三、两汉以迄南北朝时期的气候转寒"><a href="#三、两汉以迄南北朝时期的气候转寒" class="headerlink" title="三、两汉以迄南北朝时期的气候转寒"></a>三、两汉以迄南北朝时期的气候转寒</h2><p>证据</p><ul><li>曹操在邺城铜雀台所种的朱橘未有华实</li><li>广陵故城之下的一段邗沟水道结冰<br>和后来南朝在建康<strong>覆舟山</strong>下建立<strong>冰房</strong>事相联系，可知这一时期寒冷季节的悠长。</li></ul><blockquote><p>据贾思勰的记载，当时黄河流域杏花在三月始盛开，而枣树生叶和桑花凋谢在四月初旬。当时的三月约当现在阳历四月中旬，其四月初旬应为现在五月上旬。显然可见，当时这些果木树的出叶和花开花谢还较现在为迟。尤其值得注意的乃是冬季对于石榴树的保护。当时石榴树越冬，须用蒲藁裹而缠之，不然就要冻死。这在现在黄河下游也是未曾有过的现象。</p></blockquote><h2 id="四、隋唐时期气候再次转为温暖。"><a href="#四、隋唐时期气候再次转为温暖。" class="headerlink" title="四、隋唐时期气候再次转为温暖。"></a>四、隋唐时期气候再次转为温暖。</h2><ul><li><p>证据1 大象出现在<strong>淮北</strong><br>《魏书》卷一一二《灵征志》</p><blockquote><p>东魏孝静帝天平四年（公元537年），南兖砀郡（今安徽砀山县）却发现了巨象。这样的巨象显然并非当地土产，因而当地人引为奇事，捕获后送于邺城。砀郡位于淮北，距淮水并非甚远。这只象恐也不是淮水流域所产。如果是淮水流域的象，则北来到了砀郡，当不至于认为奇事。象的北来正可说明淮北气候已渐转暖，故自然流窜至此。</p></blockquote></li><li><p>证据2 长安的<strong>橘</strong>与<strong>梅</strong><br>关中梅花盛开，移种的橘树还能结出果实。</p><blockquote><p>据《酉阳杂俎》记载，唐玄宗天宝十年（751年），宫内几棵柑橘树结实150颗，而且味道鲜美，打破了“橘过淮南为枳”的气候现象。唐武宗曾将宫中橘树所结橘子赏赐大臣每人3个，说明长安当时的气候温暖。</p></blockquote></li></ul><blockquote><p>唐玄宗李隆基时（712—756），妃子江采苹因其所居种满梅花，所以被称为“梅妃”。9世纪初期，西安南郊的曲江池还种有梅花，诗人元植《和乐天秋题曲江》诗，就谈到了曲江的梅</p></blockquote><ul><li><p>证据3 七世纪中叶，<strong>长安</strong>多年冬天<strong>无雪无冰</strong>（650年、669年、678年）。</p></li><li><p>这段温暖时期持续到宋初，证据依然是大象。</p><blockquote><p>据《宋史》记载，太祖建隆三年（公元962年），黄陂有象自南来食稼；乾德二年（公元964年），有象入南阳，虞人杀之[73]。黄陂县今为武汉市黄陂区。南阳即今河南省南阳市。前面说过，南北朝末年，砀郡曾经发现过象。砀郡治所在今安徽砀山县。南阳、黄陂两县皆在砀山县之南。距黄河流域更非附近，亦可显示当时仍然相当温暖。</p></blockquote></li></ul><h2 id="五、两宋气候转为寒冷"><a href="#五、两宋气候转为寒冷" class="headerlink" title="五、两宋气候转为寒冷"></a>五、两宋气候转为寒冷</h2><p>从<strong>北宋</strong>开始，气候逐渐寒冷。</p><ul><li><p>北人不识梅<br>苏轼咏杏花诗所说的：“关中幸无梅，赖汝充鼎和。”王安石咏红梅诗所说的：“北人初不识，浑作杏花看。”</p></li><li><p>太湖全部结冰，柑橘冻死<br>进入12世纪，气候更加寒冷，浩渺无际的太湖，竟然在公元1111年全部结冰，且冰层坚厚，甚至可以在冰上行车，太湖西山的柑橘全被冻死。洞庭山上的柑橘树同样被冻死。就是江南的运河，也不止一次结冰</p></li><li><p>降雪期延长<br>南宋时，杭州降雪时间经常延至暮春。12世纪的南宋前期，每十年降雪平均最迟日期是四月九日，比12世纪之前的十年最晚春雪的日期推迟了一个月。</p></li><li><p>苏州需要破冰开船<br>绍兴二十三年（1153年），金国使臣来杭时，苏州一带船工要预备铁锤破冰开路。</p></li><li><p>福州荔枝损失<br>福州是中国东海岸荔枝分布的北界，一千多年来曾两次遭遇惨重损失，都发生在12世纪（1110年和1178年），可见这一时期确实寒冷。</p></li></ul><p>这样的寒冷的气候一直持续到明清两代。</p><blockquote><p>据竺可桢所征引、明清两代最有说服力的证据，当数到明代袁小修所写的《日记》和谈迁所撰的《北游录》。袁小修《日记》曾记录明万历三十六年至四十七年（公元1608-1619年）湖北沙市附近的气候。据所记录，则当时沙市春初的物候较现在武汉市物候约迟7天到30天。《北游录》则记载谈迁于清顺治十年至十二年（公元1653-1655年）往来于杭州及北京间的经历。据其所记，则当时北京的物候也较现在约迟一两星期。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>人文社科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>史部</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>陕西考古博物馆参观记录（下）</title>
    <link href="/2022/08/28/Archaeology_Museum2/"/>
    <url>/2022/08/28/Archaeology_Museum2/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/kaogu_jslt1.jpg" alt="陕西考古博物馆参观记录（下）"></p><p>这次以照片为主，并且尝试将同一主题的照片组合。主要内容有：</p><ul><li>杨官寨仰韶文化遗址</li><li>石峁遗址</li><li>西周丰镐遗址</li><li>芮国遗址</li><li>秦雍城遗址</li></ul><hr><h3 id="杨官寨仰韶文化遗址："><a href="#杨官寨仰韶文化遗址：" class="headerlink" title="杨官寨仰韶文化遗址："></a>杨官寨仰韶文化遗址：</h3><p><img src="/img/kaogu_ygzyz.jpg" alt="杨官寨遗址"></p><p>出土文物：尖底瓶，浮雕蛙纹陶釜，人面陶器</p><p><img src="/img/kaogu_ygzww.jpg" alt="杨官寨文物拼图"></p><p>人口结构与墓葬形式：</p><p><img src="/img/kaogu_ygzrk.jpg" alt="杨官寨人口结构与墓葬"></p><p><img src="/img/kaogu_ygzdna.jpg" alt="杨官寨DNA分析"></p><p>对中华的“华”字的解读：花者，华也。花瓣纹是庙底沟文化最典型的纹饰之一，图案规范，特征鲜明。庙底沟文化以彩陶和尖底瓶为标志性文化因素，影响范围东至大海，南至长江以南，西至青海，北至长城沿线，与周边史前文化进行融合，是中华民族历史上首次大范围出现的民族与文化共同体，是“文化意义上最早的中国”。</p><hr><h3 id="石峁遗址"><a href="#石峁遗址" class="headerlink" title="石峁遗址"></a>石峁遗址</h3><p>距今4300-3800年，发现于榆林市神木高家堡镇。</p><p>石峁城址以气势恢宏的石砌城垣为突出特征，城内面积超过400万平方米，发现有城防设施、宫室建筑、大型墓地及手工业作坊等遗迹，出土了数以万计的文物，是距今4000年前后东亚地区保存最好、规模最大、内涵最丰富的都邑性城址，代表了中国北方早期国家文明的发展高度，被誉为21世纪中国最为重要的考古发现之一。</p><p>以上简介摘自博物馆介绍。</p><p>整个城址从外到内分为外城、内城、皇城台三部分。</p><p>博物馆用巨大的模型展示了石峁的城防。比如入城通道的设计：</p><p><img src="/img/kaogu_shimaorucheng.jpg" alt="石峁入城路线"></p><p>在城墙下发现了多处头骨坑，内有排列整齐的头骨。</p><p><img src="/img/kaogu_shimaotougufx.jpg" alt="石峁头骨分析"></p><p><img src="/img/kaogu_shimaotougucl.jpg" alt="石峁头骨测量特征"></p><p>石峁遗址使用的是石砌城墙，在石块中使用紝木加固：</p><p><img src="/img/kaogu_shimaochengqiang.jpg" alt="石峁城墙拼图"></p><p><img src="/img/kaogu_shimaowenwu.jpg" alt="石峁文物拼图"></p><hr><h3 id="西周丰镐遗址"><a href="#西周丰镐遗址" class="headerlink" title="西周丰镐遗址"></a>西周丰镐遗址</h3><p>直接上图：</p><p><img src="/img/kaogu_fenghao.jpg" alt="丰镐遗址简介"></p><p><img src="/img/kaogu_fenghaodiceng.jpg" alt="丰镐地层与分期"></p><p><img src="/img/kaogu_fenghaowenwu.jpg" alt="丰镐文物拼图"></p><hr><h3 id="芮国遗址"><a href="#芮国遗址" class="headerlink" title="芮国遗址"></a>芮国遗址</h3><p>继续贴博物馆介绍文字：</p><p>芮国肇始于商末周初，以周文王断虞芮争讼进入史家视野，国君曾为周王辅臣，国都数迁，公元前640年被秦穆公所灭，立国长达400余年。陕西韩城梁带村、澄城刘家洼等芮国遗址的考古发现，证实春秋芮国封地的确切所在，呈现了周室东迁后贵族采邑发展为诸侯国的历史图景。从墓地到区域文化、聚落形态和社会结构关系的大遗址考古理念，更全面的理清了芮国都邑遗址的内涵和分布格局，在周代封国研究方面取得了重大收获。</p><p><strong>刘家洼遗址：</strong><br><img src="/img/kaogu_liujiawayizhi.jpg" alt="刘家洼遗址"></p><p><strong>出土文物：</strong><br><img src="/img/kaogu_ruiguowenwu.jpg" alt="芮国文物拼图"><br><img src="/img/kaogu_liujiawawenwu.jpg" alt="刘家洼文物"></p><hr><h3 id="秦雍城遗址"><a href="#秦雍城遗址" class="headerlink" title="秦雍城遗址"></a>秦雍城遗址</h3><p>雍城是秦定都时间最长的都城，见证了秦人的成长与壮大。经过60余年持续考古工作，遗址总体布局基本探明。整个遗址由城址、秦公陵园、国人墓葬、郊外离宫建筑遗址、祭祀遗址等部分组成，总面积约51平方公里。</p><p><img src="/img/kaogu_qinyongchengtu.jpg" alt="秦雍城遗址地图"></p><p><img src="/img/kaogu_qingongyihao.jpg" alt="秦公一号大墓"></p><p><strong>秦公一号大墓之最：</strong></p><ul><li>中国考古发掘的规模最大的先秦时期墓葬</li><li>椁室中出土了中国最早的黄肠题凑葬具</li><li>中国殉人最多的墓葬，共殉人186人</li><li>椁室两侧的木碑是中国最早的墓碑实物</li><li>出土了中国最早的刻铭石磬</li></ul><p><strong>秦殉人制度：</strong>战国中期以前，秦大中型墓葬殉人现象普遍，墓葬等级越高，殉人数量越多，凤翔秦公一号大墓中发现168具殉人。大型墓葬在二层台、墓道填土中放置殉人，中型墓设置壁龛放置殉人。殉人有简陋的葬具和少量随葬品。秦“献公元年，止从死”政令颁布后，殉人陋习基本消失。</p><p><strong>雍五畤的祭祀：</strong><br><img src="/img/kaogu_qinyongwuzhi.jpg" alt="秦汉祭祀雍五畤"></p><hr><h3 id="秦汉以来"><a href="#秦汉以来" class="headerlink" title="秦汉以来"></a>秦汉以来</h3><h4 id="咸阳出土的秦二世铜诏版："><a href="#咸阳出土的秦二世铜诏版：" class="headerlink" title="咸阳出土的秦二世铜诏版："></a>咸阳出土的秦二世铜诏版：</h4><p><img src="/img/kaogu_qinershi.jpg" alt="秦二世铜诏版"></p><h4 id="临潼发现的石甲复原："><a href="#临潼发现的石甲复原：" class="headerlink" title="临潼发现的石甲复原："></a>临潼发现的石甲复原：</h4><p><img src="/img/kaogu_qinshikai.jpg" alt="秦铠甲制作流程"></p><h4 id="汉长安城渭河南岸出土古船："><a href="#汉长安城渭河南岸出土古船：" class="headerlink" title="汉长安城渭河南岸出土古船："></a>汉长安城渭河南岸出土古船：</h4><p><img src="/img/kaogu_hanchuan.jpg" alt="汉长安城厨城门桥出土古船"></p><h4 id="关中地区西汉中小型墓葬分期："><a href="#关中地区西汉中小型墓葬分期：" class="headerlink" title="关中地区西汉中小型墓葬分期："></a>关中地区西汉中小型墓葬分期：</h4><p><img src="/img/kaogu_hanmu.jpg" alt="关中地区西汉中小型墓葬分期3"></p><h4 id="北周武帝孝陵简介："><a href="#北周武帝孝陵简介：" class="headerlink" title="北周武帝孝陵简介："></a>北周武帝孝陵简介：</h4><p><img src="/img/kaogu_zhouxiaoling.jpg" alt="北周武帝孝陵简介"></p><h4 id="潼关税村隋墓，推测墓主可能是隋代废太子杨勇墓："><a href="#潼关税村隋墓，推测墓主可能是隋代废太子杨勇墓：" class="headerlink" title="潼关税村隋墓，推测墓主可能是隋代废太子杨勇墓："></a>潼关税村隋墓，推测墓主可能是隋代废太子杨勇墓：</h4><p><img src="/img/kaogu_suimu.jpg" alt="潼关税村隋墓"></p><h4 id="隋代酒神图驮囊陶骆驼："><a href="#隋代酒神图驮囊陶骆驼：" class="headerlink" title="隋代酒神图驮囊陶骆驼："></a>隋代酒神图驮囊陶骆驼：</h4><p>骆驼两侧驮囊上各模印一组人物，形象相同。主体为一主二从的三人形象，居中男性呈醉酒状。关于醉酒者的身份，有希腊神话中的酒神狄奥尼索斯、大力士赫拉克勒斯、酒神随从西勒诺斯或萨提尔以及古印度的财神俱毗罗数种可能。陶骆驼应由隋大兴城内的明器作坊生产，但驮囊上模印图像则可能与粟特工匠相关，反映了东西方文化的交流与融合。<br><img src="/img/kaogu_jslt1.jpg" alt="酒神图驮囊陶骆驼1"><br><img src="/img/kaogu_jslt2.jpg" alt="酒神图驮囊陶骆驼2"></p><p>全篇结束。此外还有第三层文物保护相关的展览，仅仅粗略地拍了些照片就回家了。</p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>陕西考古博物馆参观记录（上）</title>
    <link href="/2022/05/14/Archaeology_Museum1/"/>
    <url>/2022/05/14/Archaeology_Museum1/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Archaeology_gate.jpg" alt="陕西考古博物馆参观记录（上）"></p><p>推荐参观时间：三小时<br>实际参观时间：四小时只看了三分之二</p><p>七点半在楼下做了核酸，骑着我的小电驴出发。刚过九点钟到达。</p><p>总共有三层，五个展厅。一层是考古历程展和文化谱系展，二层和三层是考古成果展。三层还有考古科技展。</p><p>考古历程展主要展现的是考古学在中国的发展历程，尤其是陕西考古学的发展历史。</p><p>考古成果展主要按时间顺序展现了陕西的具体的考古发现。二层是旧石器时代到唐代，三层是唐代以后。</p><p>由于时间关系，仔细观看了一二层的展览，三层的考古科技展只是简单地看了看。</p><p>整体的感受是布展做得很好。一是展览的平面设计，图文和字体都是精心设计的。二是展品的呈现方式，用了很多的可交互的屏幕，许多背景知识和资料图片都可以通过点击屏幕呈现。平常看展都是单纯地看和听，在这里明显能感受到互动。</p><p>印象最深的是这个咸阳机场二三期考古发现，背景是咸阳机场附近的地图，这个竖着的屏幕是可以在地图上推拉的，拖动屏幕后，屏幕上的地图会显示一些红色的点，点进去就可以看到这个位置发现的墓葬的结构、出土文物介绍、考古现场照片。</p><p>简单回忆一下展览的内容：</p><h2 id="考古历程展"><a href="#考古历程展" class="headerlink" title="考古历程展"></a>考古历程展</h2><p>首先是一层的考古历程展，从考古图、吕大防、金石学讲起，讲述古人好古、崇古以及对古物的喜爱。比如说西安东郊三店村西汉王许墓就出土了4件西周晚期的铜盨(xu)，1件春秋时期的蟠螭纹铜钟和西汉时期的铜矛。韩城的芮国墓地出土了大量早期玉器，有红山时代的玉猪龙，夏商时期的玉琮玉璧玉戈等。</p><p>讲吕大防的时候展出的是蓝田吕氏家族墓地发现的仿古礼器和收藏礼器。<br>（吕氏家族的墓当年是被看守墓地的吕氏后人盗掘了）<br><img src="/img/Archaeology_l%C7%9A.jpg" alt="吕氏家族鼎"></p><p>讲到清朝时期考据学兴盛，图片是毕沅立了多少碑<br><img src="/img/Archaeology_bi.jpg" alt="毕沅"></p><p>接下来就进入到正式的现代考古学。首先是近代来华的所谓探险家，再然后是中国人自己的考古发掘。在陕西比较重要的就是宝鸡斗鸡台考古。</p><p>接下来介绍的是考古学的地层学和类型学。</p><p>地层学的介绍是直接放了四个土块，每块都有标注来源，可以明显看出不同地层的土壤的区别，尤其是五色土。五色土指的是许多地层土壤的混合，一般是在挖坑填埋的时候不同地层的土会混在一起。墙上展示的是不同深度的各个时代的地层，古老的土层被埋在更深的地下。<br><img src="/img/Archaeology_stratigraphy.jpg" alt="地层学"></p><p>类型学是从苏秉琦的瓦鬲的分类讲起。苏秉琦是北大考古的奠基人，这里展出的还有苏秉琦的手稿以及他生前所使用过的笔墨及工具。类型学通过对器物形态的详细分类和地域时代的划分，可以推测社会发展的历程。第一次对李济的序数分类法有了直观的认识。<br><img src="/img/Archaeology_li.jpg" alt="鬲的分类"><br> <br><br><img src="/img/Archaeology_sort.jpg" alt="分类法"></p><p>展览主要聚焦的是考古的发展历程，有大量的手稿、文件、照片，此外还介绍了考古的机构和研究所。陕西具有考古发掘资质的一共有五个单位。还介绍西北大学援藏考古的历程。接下来则是一一介绍改革开放以来陕西重大的考古项目，包括法门寺、兵马俑，还有之前提到的机场二三期建设中的考古（发掘战国至明清墓葬4000余座，包括现场展示的十二生肖造型）<br><img src="/img/Archaeology_airport1.jpg" alt="机场考古1"><br><br> <br> <img src="/img/Archaeology_airport2.jpg" alt="机场考古1"></p><h2 id="文化谱系展"><a href="#文化谱系展" class="headerlink" title="文化谱系展"></a>文化谱系展</h2><p>下面主要放图。</p><p>这个区域是梳理从旧石器时代到商周时期的文化谱系。</p><p><img src="/img/Archaeology_paleolithic.jpg" alt="古人类演化"></p><p>一面互动屏幕上详细介绍了考古学测定年代的不同方法，以及他们的优缺点和适用范围，分别有树木年轮法，放射性碳测年法，释光测年法，古地磁测年法，铀系测年法。</p><p>龙岗寺遗址墓地自下而上分为六层，逐层叠压。使用透明玻璃板的形式展现。<br><img src="/img/Archaeology_longgang.jpg" alt="龙岗寺"></p><p>半坡遗址的半地穴式房屋复原：<br><img src="/img/Archaeology_banpo.jpg" alt="半坡"></p><p>半坡遗址出土文物展示：<br><img src="/img/Archaeology_banpo_antiques.jpg" alt="半坡文物"></p><p>龙山时期的展示。这种设计感觉很不错。<br><img src="/img/Archaeology_longshan.jpg" alt="龙山时期"></p><h3 id="周原"><a href="#周原" class="headerlink" title="周原"></a>周原</h3><p><img src="/img/Archaeology_zhouyuan.jpg" alt="周原"></p><p><br><br><img src="/img/Archaeology_zhouyuan_antiques.jpg" alt="周原文物"></p><p><br><br></p><p>周原城址：<br><img src="/img/Archaeology_zhouyuan_city.jpg" alt="周原城址"></p><p><br><br><img src="/img/Archaeology_zhouyuan_arch.jpg" alt="周原大型建筑"><br><br><br><img src="/img/Archaeology_zhouyuan_yuntang_qizhen.jpg" alt="周原宗庙"><br>第一次知道周原有如此多的殷商遗民。<br><img src="/img/Archaeology_zhouyuan_yin.jpg" alt="周原族群差异"></p><p><br><br><img src="/img/Archaeology_zhouyuan_handicraft.jpg" alt="周原手工业"></p><p>铸铜业以及铸铜用到的陶范（模子）<br><img src="/img/Archaeology_zhouyuan_bronze.jpg" alt="周原铸铜"><br><br></p><p><img src="/img/Archaeology_zhouyuan_pottery_mould.jpg" alt="周原陶范"></p><p>最后，放映的影片介绍了铜车马的实验室发掘过程，将整个土方打包送到实验室，在实验室进行发掘，这样能够更好地分析和保存。<br><img src="/img/Archaeology_zhouyuan_bronze_cart.jpg" alt="周原铜车马"><br><br><br><img src="/img/Archaeology_zhouyuan_bronze_cart2.jpg" alt="周原铜车马复原图"><br><br><br><img src="/img/Archaeology_zhouyuan_bronze_mask1.jpg" alt="周原青铜兽面1"></p><p><br><br><img src="/img/Archaeology_zhouyuan_bronze_mask2.jpg" alt="周原青铜兽面2"><br><br><br><img src="/img/Archaeology_zhouyuan_bronze_cart3.jpg" alt="周原铜车马装饰"><br><br><br><img src="/img/Archaeology_zhouyuan_bronze_cart4.jpg" alt="周原铜车马装饰2"></p><p><br><br></p><p><img src="/img/Archaeology_zhouyuan_turquoise.jpg" alt="周原铜车马绿松石"></p><p>未完待续.</p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>少年Jump简单开箱+吐槽</title>
    <link href="/2021/06/01/jump/"/>
    <url>/2021/06/01/jump/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/jump_title.jpg" alt="少年Jump简单开箱+吐槽"></p><p><br/><br/><br>海贼王连载1000话，我打算买本《周刊少年Jump》留作纪念。淘宝上找到了周刊少年Jump 3.4号合刊+5.6号合刊，刊载海贼王999话与1000话，在预售。于是下单，2月份的时候送到。想做一个开箱的图文，但一直忙着找工作和毕业设计，拖到现在终于有空做了。</p><p>购买地址：天猫店铺 中图深圳图书专营店  (这还是个国企) </p><p>1.16预售下单，2.8发货，2月11日送到。</p><img src="/img/jump_buy.jpg" style="zoom:60%;" /><p>总之先对Jump简单开个箱看看。</p><h2 id="一、整体感受"><a href="#一、整体感受" class="headerlink" title="一、整体感受"></a>一、整体感受</h2><p>左边是3.4号合刊，右边是5.6号合刊。传统上岁末年初的杂志要合刊，所以只有两本杂志。</p><img src="/img/jump_title.jpg"/><p>侧面看起来<strong>很厚</strong>，我从没见过一本500多页的<strong>周刊杂志</strong>。</p><img src="/img/jump_side.jpg" style="zoom:60%;" /><p>两本杂志分别于12月21日和1月4日（周一）发售，每本售价300日元（人民币18.36元），定价比非合刊多10日元。为什么这么便宜呢？因为用的是纸质比较差的再生纸，降低了成本，让主要受众中学生也能买得起。</p><img src="/img/jump_back.jpg" style="zoom:60%;" /><p>一本的厚度与红皮算法相当。</p><img src="/img/jump_alg.jpg" style="zoom:60%;" /><p>翻开杂志，首先是一些彩页广告，主要是作品相关的周边情报，手办、游戏、公式书、展览、原画集，还有咒术回战的动画二期放送情报。</p><img src="/img/jump_zhoushu.jpg" style="zoom:60%;" />死神的原画展：<img src="/img/jump_bleach.jpg" style="zoom:60%;" /><p>排球的原画集发售信息：</p><img src="/img/jump_paiqiu.jpg" style="zoom:60%;" /><p>附赠超大海报，两本的海报可以剪下来拼接：</p><img src="/img/jump_post.jpg" style="zoom:60%;" /><img src="/img/jump_post2.jpg" style="zoom:60%;" /><p>杂志是从右向左读的，但目录却在最后一页上（也就是左起第一页），可能是为了方便查找。传说中的Jump顺位，编辑部参考读者投票决定的漫画顺序，如果一部漫画长期处于末尾就会惨遭腰斩。每期的主打作品会放在卷首，并且一般是封面的主角。排在第二顺位的可能会是最受读者喜爱的作品。</p><img src="/img/jump_content.jpg" style="zoom:60%;" /><p><strong>纸质</strong>：不愧是厕纸，用的是再生纸，有些页偏绿，有些页偏红，有些页发黄，不同颜色的部分用彩页衔接。真的喜欢作品还是买单行本吧。不知道其他两家的纸质怎么样。</p><img src="/img/jump_paper.jpg" style="zoom:60%;" /><p>看过情报图的都知道 jump 纸质是个什么样子，所以汉化组拿到图源后不仅要翻译，还要负责修图，增加对比度，变成我们看到的黑白漫画。比如海贼王999话第一页，用黑白滤镜处理一下看起来舒服多了.</p><img src="/img/jump_999.jpg" style="zoom:60%;" /><img src="/img/jump_999b.jpg" style="zoom:60%;" /><p><strong>大小</strong>：和国内一般杂志一样是16开纸，比A4小上一些，不过一整页就一张漫画，比单行本大，看起来很爽。所以500页的16开纸上课要怎样才能偷看呢！</p><p><strong>注音</strong>：因为是面向中（小）学生的杂志，汉字都会有假名注音，学过五十音的都能读，而且假名注音可以给一句话标注奇怪的读音，比如说ひとつなぎの大秘宝可以注音ワンピース，读作ONE PIECE：</p><img src="/img/jump_onepiece.jpg" style="zoom:60%;" />忽然发现原文是ひとつなぎの大秘宝，可以翻译为“一个大秘宝”、“独一无二的大秘宝”，但中间这个つなぎ是怎么回事？看到有解释说是“ひとつなぎ”是“一つなぎ” ，意为连成一块的，つなぎ有连结的意思，似乎这样想的话契合了读音One Piece的本意（一块，或者是连衣裙），那就是“一个连起来的大秘宝”？顺带一提，B漫这一话的翻译已经超出了我的想象，这么大一格就写了大秘宝三个字，你这是剔除假名翻译法啊！<p><strong>按顺序继续看下去吧</strong></p><h2 id="二、当前连载："><a href="#二、当前连载：" class="headerlink" title="二、当前连载："></a>二、当前连载：</h2><p>当年的新作四天王只剩下一个石纪元了。（其他三个是鬼灭之刃、约定的梦幻岛、学不来，这本刚好是学不来的最终话）</p><img src="/img/jump_stone.jpg" style="zoom:60%;" /><p>石纪元的跨页特写。听说有的作者会故意把字写到夹缝里。</p><img src="/img/jump_stone2.jpg" style="zoom:60%;" />为数不多出名的正在连载的热门作品，咒术回战.<img src="/img/jump_zhoushu2.jpg" style="zoom:60%;" /><p>传说中的读者问卷调查！读者填写后寄到 Jump 编辑部，新一期的顺位与之前几期读者问卷调查的喜好程度关系密切，如果新连载人气过低就会惨遭腰斩，按照《爆漫王》的说法。</p><img src="/img/jump_reader.jpg" style="zoom:60%;" /><p>然后是学不来（《我们无法一起学习》）的最终话…Route 6&#x2F;5 这是把后宫线也走一遍？</p><img src="/img/jump_xuebulai.jpg" style="zoom:60%;" /><p>可怜的最终话没有一个卷头彩页的待遇。让我想到了《旋风管家》完结的时候卷头是柯南M21唐红的恋歌的宣传，那两期 少年Sunday 封面也是可以连起来的。</p><img src="/img/jump_xuebulai2.jpg" style="zoom:60%;" /><p>这样看起来，两种颜色差别很大。</p><img src="/img/jump_color.jpg" style="zoom:60%;" /><p>一翻页看到了瓜神。。。《间谍过家家》，在Jump+上连载，也就是Jump的电子版吧？《电锯人》也去了Jump+，有空可以下载下来试试。</p><img src="/img/jump_spyfamily.jpg" style="zoom:60%;" /><p>《约定的梦幻岛》TV动画第二季宣传。看到右边的字了吗？完全监修，当时的我还不明白这几个字的含义。我还挺期待金色池塘篇的动画，结果被企划方强制11集完结，精彩剧情完全跳过。我宁可它把金色鱼塘好好做，就算后面不做了也比强行完结好。</p><img src="/img/jump_neverland.jpg" style="zoom:60%;" /><p>接下来的有：</p><p>宣传页，真人电影联动特别篇，线下展览，舞台剧公演，游戏王还在出卡…</p><p>没见过的新连载（破坏神），没见过的新连载，岛袋光年新连载…</p><p>外星人+奇妙道具+美少女+胖次</p><p>果然是你！矢吹健太朗！这是《To love》精神续作吧…</p><img src="/img/jump_sc1.jpg" style="zoom:60%;" /><img src="/img/jump_sc2.jpg" style="zoom:60%;" /><img src="/img/jump_sc3.jpg" style="zoom:60%;" /><p>5.6合刊的尾页竟然是明日方舟广告</p><img src="/img/jump_fangzhou.jpg" style="zoom:60%;" /><p>另外，还有张银魂最终剧场版的海报：</p><img src="/img/jump_yh.jpg" style="zoom:60%;" /><h2 id="三、我的感受："><a href="#三、我的感受：" class="headerlink" title="三、我的感受："></a>三、我的感受：</h2><p>我对jump的印象还停留在16年17年左右，大概是火影完结后吧。暗杀教室、齐木楠雄完结，新作四天王刚开始连载不久（鬼灭、约定的梦幻岛，石纪元、学不来），小排球正是最火。然后搜了搜现在的连载作品，这都是谁啊？</p><img src="/img/jump_lianzai.png" style="zoom: 67%;" /><p>一半以上都是20年、21年开始连载的作品，我听过的最近的周刊Jump连载漫画《电锯人》已经转移到Jump+平台上了，于是这些新作都是完全没有印象。再去看看Sunday和Magazine的新作，基本也都没看过。平台被整治，盗版汉化被判刑，长篇漫画一个个完结，追的看的越来越少。在这时候鬼灭却引起业内震动，创造一个个新纪录。</p><p>去年鬼灭之刃的动画和剧场版本身获得了巨大商业利益，同时引爆漫画销量，漫画分卷销量前22名全是鬼灭。</p><p><img src="/img/jump_22.jpg"></p><p>今年上半年的漫画分卷销量统计结果发布，前42名被鬼咒统治，海贼王的一卷夹在中间瑟瑟发抖。这张图是19年鬼灭之刃TV动画播出时漫画销量的提升，在今年二月发行量已经突破了1亿5千万卷。鬼灭剧场版的票房已经超过了400亿日元。</p><p><img src="/img/jump_xl.jpg"></p><p>之前好像听说鼠绘汉化组被判刑了，果然是被判刑了。官方汉化屡屡出错被骂，说到底还是不用向读者负责，只用向版权方负责就好。官方汉化要花钱，花钱享受的服务却不如用爱发电的汉化组，观众成为所谓正版受害者。</p><p>有时候觉得文化产业是种垄断，不像别的工业产品都有替代品。文化产品上，你特别想看某一个作品，那就不存在其他的替代选项，不能说你想看A但A看不了，然后你去用B替代。</p><p>在这样的垄断下的人气作品，可不就是卖方市场。爱奇艺买东映动画（包括海贼王）一年能花两亿人民币，那时候我就觉得不可思议，现在还是觉得难以理解。爱奇艺买下来的这几部动画，靠会员费和广告费一年能赚的了两个亿吗？后来发现做视频网站也从来都不是赚钱的，就像动画制作公司也是难赚钱的，对他们（优爱腾）来说公司的战略布局和市场地位更重要，赚不赚钱是其次的。</p><p>免费的东西可能从来都不免费，十年前我听说国外的歌都要购买才能下载，内心是非常不屑的。可能比我早一代的人会买磁带、买CD，有为文化产品付费的意识，而我成长在网络盗版最猖獗的时代。</p><p>今天先说到这里，以后买了Sunday、Magazine 或者 YoungJump 再来开箱。</p>]]></content>
    
    
    <categories>
      
      <category>折腾搞事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>开箱</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What happens when （三）HTTP</title>
    <link href="/2021/01/13/Whathappenwhen3/"/>
    <url>/2021/01/13/Whathappenwhen3/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/WHWhttp.jpg" alt="What happens when （三）HTTP"></p><p><br/><br/>在前两篇我们经历了通过域名寻找 IP 的 DNS 解析和建立在传输层上的 TCP 连接 ，今天来到最后一步，发送请求，接收响应，并将收到的网页渲染到浏览器上。我们需要应用层上的 HTTP 协议来完成这件事。</p><p>什么是应用层协议？我们知道，来自应用层的数据经过逐层封装，发送给指定的 IP 和端口，再经过逐层解析，最终到达目标的应用层。这些应用层的数据才是双方真正要传输的。应用层的数据需要按照约定的格式包装，我们在使用 Socket 编程时，也会设计传输内容的格式。</p><p>设计 HTTP 协议最初目的是在万维网上传输 HTML 页面。</p><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>万维网（<em>WWW</em>），HTTP，HTML，URI，网站，浏览器，这些概念是蒂姆·伯纳斯·李（<em>Tim Berners-Lee</em>）和他在欧洲核子研究组织（<em>CERN</em>）的团队在 1989 年提出的。在这之前，互联网、电子邮件、FTP 都已经发明了近 20 年，个人电脑已经出现，个人、公司、研究机构和政府部门都在使用互联网。万维网和互联网有什么区别？</p><blockquote><p>网路是连接起来的通信设备（例如计算机和打印机）组成的的集合。</p><p>互联网络（<em>internet</em>）是两个或多个可以互相通信的网络，最为著名的互联网络是因特网（<em>Internet</em> 大写的I），由成千上万个互相连接的网络组成。 </p></blockquote><p>1969年，互联网在美国诞生。1977年，苹果公司推出了Apple II，这是最早的个人电脑之一（售价1200美元）。在1981年，IBM推出了一个苹果的竞争对手IBM PC。 有了网络，有了PC ，可以发电子邮件，可以传输文件。然后呢？人们不知道网络对大众还能有什么用处。没有网站，没有浏览器，没有跳转链接。</p><p>首先出现的是 HTML（ <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage 超文本标记语言），通过标记让文本更结构化，这些标记仿佛印刷时的标记，能够产生更易读的格式。此外还有链接，它将一个个文档串联起来，点击蓝色带下划线的单词，就会将你带到其他地方。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>World Wide Web<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>The WorldWideWeb (W3) is a wide-area<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;WhatIs.html&quot;</span>&gt;</span><br>hypermedia<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>information retrieval<br>initiative aiming to give universal<br>access to a large universe of documents.<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>显示出来的效果是这样：</p><p><img src="/img/www.png" alt="显示页面"></p><p>蓝色下划线的单词指向了一个名为 <em>WhatIs.html</em> 的页面。这是<a href="http://info.cern.ch/hypertext/WWW/TheProject.html">第一个网页</a>的一部分，在浏览器按F12可以查看网页的源代码。</p><p>伯纳斯·李在 CERN 将超文本同网络结合，连接文档系统，创建<strong>万维网</strong>（<strong>W</strong>orld <strong>W</strong>ide <strong>W</strong>eb，也称 Web）以及在万维网上获取数据的协议 <strong>HTTP</strong>。他设计了第一个 Web 服务器与 Web 浏览器，运行了第一个网站和第一个网页。</p><blockquote><p> Lawrence Landweber：人们使用网络做什么？他们使用电子邮件。他们发送文件。但直到1993年，没有什么杀手级应用能吸引真正的人。我的意思是，那些非学术的人，或者不是技术行业内的人。<strong>万维网将互联网变成一个资源库，这是迄今为止最大的信息和知识库。</strong>突然之间，人们可以在万维网上查询天气或跟踪股市情况，你可以在万维网上做很多事情。 —— <a href="https://zhuanlan.zhihu.com/p/42704329">万维网的诞生：互联网的口述历史（上）</a></p><p> The <a href="http://info.cern.ch/hypertext/WWW/TheProject.html">WWW</a> project merges the techniques of information retrieval and hypertext to make an easy but powerful global information system. </p><p> The project is based on the philosophy that much academic information should be freely available to anyone.  </p><p> 1993年4月30日，欧洲核子研究组织宣布万维网对任何人免费开放，并不收取任何费用 </p></blockquote><p>HTTP的第一个文档版本是<a href="https://www.w3.org/pub/WWW/Protocols/HTTP/AsImplemented.html">HTTP V0.9</a>（1991），这个版本只支持 GET 一种方法，且没有HTTP头，没有状态吗。Dave Raggett 于1995年领导 HTTP 工作组（HTTP WG），并希望通过扩展来使协议变得更加高效。1996年正式引入 HTTP V1.0 （<a href="https://tools.ietf.org/html/rfc1945">RFC1945</a>），1997年1月正式发布HTTP V1.1（<a href="https://tools.ietf.org/html/rfc2068">RFC 2068</a>）。</p><h2 id="二、HTTP-特性"><a href="#二、HTTP-特性" class="headerlink" title="二、HTTP 特性"></a>二、HTTP 特性</h2><ul><li>应用层：HTTP是应用层协议，依赖于可靠的面向连接的传输层协议，如 TCP。它自己不保证可靠，不进行重传。</li><li>请求响应：建立HTTP连接后，由一方（通常是浏览器）发起请求 (<em>request</em>)，对方给予响应 (<em>response</em>)。HTTP&#x2F;1.1协议中共定义了八种请求方法。</li><li>无状态 (<em>stateless</em>)：每条HTTP请求都是相互独立的，互不影响。服务器不会保留以往请求的内容或状态，也就是说没有记忆能力，每次用到之前的信息都要重传。</li><li>双向传输：浏览器与服务器间的传输是双向的。</li><li>内容协商：同一页面可能有不同版本，比如不同的字符集。浏览器可以和服务器协商得到最理想版本。</li><li>支持缓存：浏览器拿到文件的复制，可以保留为缓存。</li><li>支持中间层：在浏览器和服务器之间可能存在代理服务器等中间层。</li></ul><h2 id="三、URL"><a href="#三、URL" class="headerlink" title="三、URL"></a>三、URL</h2><p>URL(<em>Uniform Resource Locator</em>)，翻译为统一资源定位符，表示的是网络上一个资源的<strong>地址</strong>，是 <em>URI</em> 的子集（URI 还包括通过<strong>名称</strong>识别资源的 URN）。浏览器通过 URL 的协议和资源地址，向目标资源发送访问请求。</p><p>一个 URL 由协议和资源名称两部分组成，中间用:分隔。如 <code>http://www.eteluna.top/</code>，协议是 <code>http</code>，资源名称是 <code>//www.eteluna.top/</code>。资源名称可以包括主机名, 端口, 路径, 查询参数, 书签, 如：</p><p><strong><a href="http://hostname[:port]/path[?quary\][#fragment]">http://hostname[:port]/path[?quary\][#fragment]</a></strong></p><p><em>hostname</em> 主机名，域名或IP地址<br><em>:port</em> 端口，可选，默认为80<br><em>path</em> 路径，服务器上的位置<br><em>?quary</em> 查询参数，如<code>?key=value&amp;key2=value2</code>，以?开始，用&amp;连接的键值对<br><em>#fragment</em> 书签，以#开始，标记了页面的某个位置，通常用在同一页面不同位置的跳转</p><h2 id="四、持久连接和-Cookie"><a href="#四、持久连接和-Cookie" class="headerlink" title="四、持久连接和 Cookie"></a>四、持久连接和 Cookie</h2><h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3><p>在 HTTP 的初始版本中，每进行一次 HTTP 双向通信（发送与响应）都要建立一个新的 TCP 连接。随着时代发展，访问一个网站需要进行的 HTTP 通信次数增多。以 bilibili 首页为例，一次访问进行了 84 次 HTTP 通信（其中许多请求返回的是css js 图片等资源），如果每次都建立新的 TCP 连接，会产生大量开销。</p><p><img src="/img/%E8%AE%BF%E9%97%AEbilibili.png"></p><p>为解决这个问题，HTTP&#x2F;1.0 之后提出了 HTTP 持久连接（HTTP keep-alive），只要一方没有明确提出断开连接，就会一直保持 TCP 连接状态。</p><p>实现了持久连接，就有了管线化（pipelining），可以并行发送和接受多个请求，提升访问速度。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>HTTP 是无状态协议，服务端不会记录客户端信息，不能根据之前的状态处理新的请求，比如登录信息。这时候打开新的页面，要么重新登录，要么在请求中附加信息。这个附加信息的技术是 Cookie。</p><p>当服务器端发送给用户的响应报文中含有 Set-Cookie 字段信息，客户端就会保存Cookie，在下次请求中在报文中加上 Cookie 值后发送出去。这样服务端就能知晓客户端的信息。</p><p>Cookie 是保存在客户端上的，而 Session 是保存在服务器上的，如用来记录购物车信息。</p><h2 id="五、请求与响应-Request-amp-Response"><a href="#五、请求与响应-Request-amp-Response" class="headerlink" title="五、请求与响应 Request&amp;Response"></a>五、请求与响应 Request&amp;Response</h2><p>考虑最简单的情况，获取服务器上的一个静态页面。输入URL，查询DNS，建立了 TCP 连接后，浏览器会发送一个 HTTP GET 请求报文，这个请求的起始行以GET开始，之后是 URL 和 HTTP 的版本号。在建立了 TCP 连接后，URL一般使用相对地址。如对 <a href="http://info.cern.ch/hypertext/WWW/TheProject.html">第一个网页</a> 进行访问的请求是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/hypertext/</span>WWW<span class="hljs-regexp">/TheProject.html HTTP/</span><span class="hljs-number">1.1</span>  <br><span class="hljs-regexp">//</span>省略之后的内容<br></code></pre></td></tr></table></figure><p>得到的响应报文是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK <br><span class="hljs-regexp">//</span>省略之后的内容<br></code></pre></td></tr></table></figure><p>完整的请求报文与响应报文的格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">请求报文<br><span class="hljs-tag">&lt;<span class="hljs-name">method</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">request-URL</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">headers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entity-body</span>&gt;</span><br><br>响应报文<br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">status</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">reason-phrase</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">headers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entity-body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="报文起始行"><a href="#报文起始行" class="headerlink" title="报文起始行"></a>报文起始行</h3><p>所有报文都以一个起始行作为开始，请求报文的起始行说明要做什么，响应报文的起始行说明发生了什么。上文的两行就是起始行。</p><p><strong>请求起始行</strong>包括方法、URL、HTTP版本。方法（<em>method</em>）用来告知服务器操作。HTTP常用方法共以下8种：</p><blockquote><p>GET：获取资源<br>POST：提交数据<br>PUT：上传文件（ 不验证身份，存在安全性问题 ）<br>HEAD：获取报文首部<br>DELETE：删除文件（不验证身份，存在安全性问题）<br>OPTIONS：询问支持的方法<br>TRACE：追踪路径（ 容易引发XST攻击 ）<br>CONNECT：要求用隧道协议连接代理</p></blockquote><p>其中最常用的是 GET 和 POST，前者获取服务器的某个资源，后者向服务器提交数据（如表单）。</p><p><strong>响应起始行</strong>包括HTTP版本、状态码、原因短语。状态码用来表示HTTP的返回结果，分为五大类：</p><blockquote><p>1XX Informational(信息性状态码) 表示接收的请求正在处理<br>2XX Success(成功状态码) 表示请求正常处理完毕<br>3XX Redirection(重定向状态码) 表示需要进行附加操作以完成请求，如请求新的地址<br>4XX Client Error(客户端错误状态码) 表示服务器无法处理请求<br>5XX Server Error(服务器错误状态码) 表示服务器处理请求出错</p></blockquote><p>有关方法、状态码的具体内容可查阅 <a href="https://tools.ietf.org/html/rfc2068#section-9">RFC 2068</a> 或 <a href="https://xiaohuochai.site/HTTP/composition/StartingLine.html">小火柴的前端小册子</a></p><h3 id="报文首部"><a href="#报文首部" class="headerlink" title="报文首部"></a>报文首部</h3><p>报文首部由字段名和字段值构成，中间用冒号分隔。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">首部字段名: 字段值</span><br></code></pre></td></tr></table></figure><p>以之前的访问为例，<strong>请求首部</strong>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Host</span>: info.cern.ch <br><span class="hljs-attribute">Connection</span>: keep-alive <br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">85</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4183</span>.<span class="hljs-number">83</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">If</span>-None-Match: <span class="hljs-string">&quot;40521e06-8a9-291e721905000&quot;</span><br><span class="hljs-attribute">If</span>-Modified-Since: Thu, <span class="hljs-number">03</span> Dec <span class="hljs-number">1992</span> <span class="hljs-number">08</span>:<span class="hljs-number">37</span>:<span class="hljs-number">20</span> GMT<br></code></pre></td></tr></table></figure><ul><li>Host: 请求的主机名，一个IP上可能部署有多个主机，需要提供主机名.</li><li>Connection: keep-alive 保持持久连接，close 则断开连接.</li><li>Cache-Control:  操作缓存的工作机制.</li><li>User-Agent: 客户端浏览器的种类.</li><li>Accept: 客户端支持的媒体类型和优先级q.</li><li>Accept-Charset: 客户端支持的字符集和优先级，如unicode.</li><li>Accept-Encoding:  客户端支持的内容编码及内容编码的优先级顺序， gzip：由文件压缩程序gzip (GNU zip) 生成的编码格式 (RFC1952)，采用 Lempel-Ziv 算法(LZ77)及32位 CRC .</li><li>Accept-Language :  客户端接受的自然语言集，中文英文等.</li></ul><p><strong>响应首部</strong>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Date</span>: Tue, <span class="hljs-number">01</span> Sep <span class="hljs-number">2020</span> <span class="hljs-number">05</span>:<span class="hljs-number">29</span>:<span class="hljs-number">29</span> GMT<br><span class="hljs-attribute">Server</span>: Apache<br><span class="hljs-attribute">Last</span>-Modified: Thu, <span class="hljs-number">03</span> Dec <span class="hljs-number">1992</span> <span class="hljs-number">08</span>:<span class="hljs-number">37</span>:<span class="hljs-number">20</span> GMT<br><span class="hljs-attribute">ETag</span>: <span class="hljs-string">&quot;40521e06-8a9-291e721905000&quot;</span><br><span class="hljs-attribute">Accept</span>-Ranges: bytes<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">2217</span><br><span class="hljs-attribute">Content</span>-Type: text/html<br></code></pre></td></tr></table></figure><ul><li>Date:  报文创建的日期和时间.</li><li>Server:  服务器应用程序.</li><li>Accept-Ranges:  是否能处理范围请求，可指定的字段值有两种，可处理范围请求时指定其为 bytes，反之则指定其为 none.</li><li>Content-: 与实体内容有关的信息.</li><li>ETag、Last-Modified：缓存标识符.</li></ul><h2 id="六、本地缓存"><a href="#六、本地缓存" class="headerlink" title="六、本地缓存"></a>六、本地缓存</h2><p>浏览器可以将请求的静态文件缓存，以备下次使用，提高访问速度。分为强制缓存和对比缓存两种模式。</p><p>在强制缓存下，命中本地的缓存则直接使用，未命中则去请求服务器。在对比缓存下，命中本地缓存后还要请求服务器验证缓存标识的数据是否失效，只有未失效时使用本地缓存数据。 即强制缓存如果生效，不需要再和服务器发生交互，而对比缓存不管是否生效，都需要与服务端发生交互。 </p><p>对比缓存的步骤如下：</p><ol><li>第一次请求，将服务器传输的数据和缓存标识符一起缓存。</li><li>再次请求数据，将缓存标识符发送给服务器，服务器根据缓存标识进行判断比较，成功则返回304状态码，通知客户端比较成功，可以使用缓存数据。否则返回新的缓存数据和缓存规则。</li></ol><p>在HTTP1.1中，缓存在报文中最重要的规则是 <strong>Cache-Control</strong> </p><p><strong>Cache-Control</strong> 取值包括 private、public、no-cache、max-age，no-store，默认为private。 </p><blockquote><p>private:        客户端可以缓存<br>public:         客户端和代理服务器都可缓存<br>max-age&#x3D;xxx:  缓存的内容将在 xxx 秒后失效，服务器可以将最大使用期 max-age 设置为零，从而在每次访问的时候都进行刷新<br>no-cache:      需要使用对比缓存来验证缓存数据<br>no-store:       所有内容都不会缓存，强制缓存，对比缓存都不会触发</p></blockquote><p>对比缓存中，重要的是缓存标识符。</p><p>服务器传输数据时，在头部会加入 <strong>Last-Modified</strong> 字段 ，这是资源的最后修改时间。</n>在再次请求时，发送方在请求头部传输 <strong>If-Modified-Since</strong> 字段， 通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。</n> 如果页面最后修改时间晚于它则返回 200 处理请求，否则返回状态码304 Not Modified，浏览器显示缓存页面.</p><p>此外，还有服务器会返回独有的标识符 <strong>Etag</strong> ，优先级高于 <strong>Last-Modified</strong>，它的内容不是时间，而是一串字符，如上文例子中的 <code>ETag: &quot;40521e06-8a9-291e721905000&quot;</code>，再次请求时使用 <code>If-None-Match: &quot;40521e06-8a9-291e721905000&quot;</code>服务器它与资源的标识符比对，一致则响应 304 使用缓存，不一致则响应 200 并传输新的数据和缓存规则。</p><p>使用 <strong>Etag</strong>，可以解决过期时间已到，而服务器的资源没有更新，使用  <strong>If-Modified-Since</strong> 会重新传输相同资源的问题。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p><a href="https://3ric.gitbook.io/blog/about-http">HTTP 进化史</a></p></li><li><p><a href="https://xiaohuochai.site/HTTP/composition/StartingLine.html">小火柴的前端小册子</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 实现命令行收发邮件</title>
    <link href="/2020/09/09/email/"/>
    <url>/2020/09/09/email/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/email_title.png" alt="Java 实现命令行收发邮件"></p><p>需要自行完成一个研究，正好研究一下电子邮件相关协议。</p><h2 id="一、电子邮件系统架构"><a href="#一、电子邮件系统架构" class="headerlink" title="一、电子邮件系统架构"></a>一、电子邮件系统架构</h2><p><img src="/img/mailsystem.png"></p><p>图片来源：<a href="http://blog.exsvc.cn/article/email-system-architecture.html">易科博客</a></p><p>MUA (Mail User Agent) 客户端，显示邮件内容，处理用户操作</p><p>MTA (Mail Transfer Agent) 报文传输代理，MTA客户机与MTA服务器间建立 SMTP 协议</p><p>MDA (Mail Deliver Agent) 服务器保存接收到的邮件</p><p>MRA (Mail Receive Agent) 为客户端从服务器拉取邮件，有POP3 IMAP4等协议</p><h2 id="二、格式"><a href="#二、格式" class="headerlink" title="二、格式"></a>二、格式</h2><p>电子邮件分信封和报文两部分，信封包含发信人的地址与收信人的地址。</p><p>报文有头部和主题，头部包括发件人，收件人，主题，其他信息（如编码），标识与内容以:分隔，例如：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">From:</span> Behrouz Forouzan<br><span class="hljs-symbol">To:</span> Sophia Fegan<br><span class="hljs-symbol">Date:</span> <span class="hljs-number">1</span>/<span class="hljs-number">5</span>/<span class="hljs-number">05</span><br><span class="hljs-symbol">Subject:</span> Network<br></code></pre></td></tr></table></figure><p>正文部分以 . 结束</p><h3 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h3><p>电子邮件原本只支持 NVT 7位 ASCII 格式的报文，多用途因特网邮件扩充协议（MIME）允许发送方将非 ASCII 数据转化为 NVT ASCII 数据发送，并在接收方解码为原来的数据。</p><h2 id="三、SMTP"><a href="#三、SMTP" class="headerlink" title="三、SMTP"></a>三、SMTP</h2><p>每次投递，SMTP在发送方与邮件服务器间使用一次，在邮件服务器间使用一次。它使用命令与响应在MTA客户与MTA服务器之间传输报文。每一条命令与响应都以 <strong>回车和换行</strong> &lt;CRLF&gt;（\r\n）结束。</p><p>SMTP的地址（以126邮箱为例） smtp.126.com.</p><p>端口号：25</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>客户发给服务器，包含关键词及变量，用冒号分隔，变量视情况可以是任意数量的。</p><table><thead><tr><th>关键词</th><th>作用</th></tr></thead><tbody><tr><td>HELO</td><td>+发送方主机名（域名），使用标准的SMTP</td></tr><tr><td>EHLO</td><td>扩展的HELO，支持用户认证，参见 <a href="http://www.ietf.org/rfc/rfc2821.txt">RFC 2821</a></td></tr><tr><td>MAIL FROM</td><td>+发件人地址，标明发件人</td></tr><tr><td>RCPT TO</td><td>+收件人地址，标明收件人，可以有多个</td></tr><tr><td>DATA</td><td>+邮件内容，以&lt;CRLF&gt;.&lt;CRLF&gt;结束</td></tr><tr><td>QUIT</td><td>无变量，结束会话</td></tr><tr><td>VRFY</td><td>+地址，验证指定邮箱是否存在；由于安全方面的原因，服务器常禁止此命令</td></tr><tr><td>EXPN</td><td>+地址列表，验证给定的邮箱列表是否存在，扩充邮箱列表，也常被禁用</td></tr><tr><td>HELP</td><td>（+命令），查询服务器支持什么命令</td></tr><tr><td>NOOP</td><td>无变量，服务器响应 250 OK</td></tr><tr><td>RSET</td><td>无变量，重置会话，当前传输被取消，服务器响应 250 OK</td></tr><tr><td>STARTTLS</td><td>启用TLS</td></tr></tbody></table><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><table><thead><tr><th>状态码</th><th>说明</th><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>211</td><td>系统状态或帮助回答</td><td>500</td><td>语法错误，命令无法识别</td></tr><tr><td>214</td><td>帮助信息</td><td>501</td><td>语法错误，参数或变量出错</td></tr><tr><td>220</td><td>服务就绪</td><td>502</td><td>命令未执行</td></tr><tr><td>221</td><td>服务关闭</td><td>503</td><td>命令序列不正确</td></tr><tr><td>250</td><td>操作完成</td><td>504</td><td>命令暂时未执行</td></tr><tr><td>251</td><td>用户非本地，将转发报文</td><td>550</td><td>命令未执行，邮箱不可用</td></tr><tr><td>354</td><td>开始邮件内容输入</td><td>551</td><td>用户非本地</td></tr><tr><td>421</td><td>服务不可用</td><td>552</td><td>异常终止，超出存储位置</td></tr><tr><td>450</td><td>邮箱不可用</td><td>553</td><td>请求未发生，邮箱名不可用</td></tr><tr><td>451</td><td>命令异常终止，本地错误</td><td>554</td><td>操作失败</td></tr><tr><td>452</td><td>命令异常终止，存储空间不足</td><td></td><td></td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>以126邮箱为例，首先进入邮箱打开SMTP服务，获得授权码。找到base64加密网站，将登录邮箱地址和授权码分别加密。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs awk">telnet smtp.<span class="hljs-number">126</span>.com <span class="hljs-number">25</span> <span class="hljs-regexp">//</span>smtp端口为<span class="hljs-number">25</span><br>Trying <span class="hljs-number">220.181</span>.<span class="hljs-number">15.113</span>...<br>Connected to smtp.<span class="hljs-number">126</span>.com.<br>Escape character is <span class="hljs-string">&#x27;^]&#x27;</span>.<br><span class="hljs-number">220</span> <span class="hljs-number">126</span>.com Anti-spam GT <span class="hljs-keyword">for</span> Coremail System (<span class="hljs-number">126</span>com[<span class="hljs-number">20140526</span>])<br>EHLO HI <span class="hljs-regexp">//</span>需要用户验证，使用EHLO<br><span class="hljs-number">250</span>-mail<br><span class="hljs-number">250</span>-PIPELINING<br><span class="hljs-number">250</span>-AUTH LOGIN PLAIN <br><span class="hljs-number">250</span>-AUTH=LOGIN PLAIN<br><span class="hljs-number">250</span>-coremail <span class="hljs-number">1</span>Uxr2xKj7kG0xkI17xGrU7I0s8FY2U3Uj8Cz28x1UUUUU7Ic2I0Y2UFvkzJ5UCa0xDrUUUUj<br><span class="hljs-number">250</span>-STARTTLS<br><span class="hljs-number">250</span> <span class="hljs-number">8</span>BITMIME<br>auth login <span class="hljs-regexp">//</span>认证登录<br><span class="hljs-number">334</span> dXNlcm5hbWU6 <span class="hljs-regexp">//</span>base64的Username:<br>**** <span class="hljs-regexp">//</span>登录邮箱地址转化为base64，输入<br><span class="hljs-number">334</span> UGFzc3dvcmQ6 <span class="hljs-regexp">//</span>base64的Password:<br>**** <span class="hljs-regexp">//</span>邮箱给你的授权码转化为base64，输入<br><span class="hljs-number">235</span> Authentication successful<br>MAIL FROM: &lt;leoxyw@<span class="hljs-number">126</span>.com&gt; <span class="hljs-regexp">//</span>发件人地址<br><span class="hljs-number">250</span> Mail OK<br>RCPT TO: &lt;leoxyw@<span class="hljs-number">126</span>.com&gt; <span class="hljs-regexp">//</span>收件人地址            <br><span class="hljs-number">250</span> Mail OK<br>DATA <span class="hljs-regexp">//</span>邮件主体<br><span class="hljs-number">354</span> End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;<br><span class="hljs-regexp">//</span>邮件头字段，这里输入不规范会被当做垃圾邮件退回。<br>From:  &lt;leoxyw@<span class="hljs-number">126</span>.com&gt; <br>To:  &lt;leoxyw@<span class="hljs-number">126</span>.com&gt;<br>Subject: IDNETworking<br>Date: Wed, <span class="hljs-number">9</span> Sep <span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span> +<span class="hljs-number">0800</span>       <br><span class="hljs-regexp">//</span>正文       <br>This is my message try smtp plz<br>let it go<br>plz<br>. <span class="hljs-regexp">//</span>回车换行.回车换行 结束输入<br><span class="hljs-number">250</span> Mail OK queued as smtp3,DcmowACHUwClklhfTW4eJg--.<span class="hljs-number">47203</span>S5 <span class="hljs-number">1599641324</span><br>QUIT<br><br></code></pre></td></tr></table></figure><p>进入邮箱，可以看到刚刚收到的邮件。</p><p><img src="/img/smtptest.png"></p><p>更多-&gt;查看邮件头</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Received:</span> <span class="hljs-keyword">from</span> HI (unknown [<span class="hljs-number">113.140</span>.<span class="hljs-number">11.120</span>])<br><span class="hljs-keyword">by</span> smtp3 (Coremail) <span class="hljs-keyword">with</span> SMTP id DcmowACHUwClklhfTW4eJg--.<span class="hljs-number">47203S</span>5;<br>Wed, <span class="hljs-number">09</span> Sep <span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">38</span>:<span class="hljs-number">40</span> +<span class="hljs-number">0800</span> (CST)<br><span class="hljs-symbol">From:</span>  &lt;leoxyw@<span class="hljs-number">126</span>.com&gt;<br><span class="hljs-symbol">To:</span>  &lt;leoxyw@<span class="hljs-number">126</span>.com&gt;<br><span class="hljs-symbol">Subject:</span> IDNETworking<br><span class="hljs-symbol">Date:</span> Wed, <span class="hljs-number">9</span> Sep <span class="hljs-number">2020</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span> +<span class="hljs-number">0800</span><br>X-CM-TRANSID:DcmowACHUwClklhfTW4eJg--.<span class="hljs-number">47203S</span>5<br>Message-Id:&lt;<span class="hljs-number">5</span>F5896EC.<span class="hljs-number">1825</span>CC.<span class="hljs-number">07706</span>@m15113.mail.<span class="hljs-number">126</span>.com&gt;<br>X-Coremail-Antispam: <span class="hljs-number">1</span>Uf129KBjDUn29KB7ZKAUJUUUUU529EdanIXcx71UUUUU7v73<br>VFW2AGmfu7bjvjm3AaLaJ3UbIYCTnIWIevJa73UjIFyTuYvjxUbfO7UUUUU<br>X-Originating-IP: [<span class="hljs-number">113.140</span>.<span class="hljs-number">11.120</span>]<br>X-CM-SenderInfo: xohr55bz6rjloofrz/<span class="hljs-number">1</span>tbiKQyaXlpEBL8pHgAAsz<br><br>This <span class="hljs-built_in">is</span> my message <span class="hljs-keyword">try</span> smtp plz<br><span class="hljs-keyword">let</span> it go<br>plz<br></code></pre></td></tr></table></figure><p> 有关SMTP的进一步信息可以参阅 <a href="http://www.ietf.org/rfc/rfc821.txt">RFC 821</a> 和 <a href="http://www.ietf.org/rfc/rfc2821.txt">RFC 2821</a> </p><h2 id="四、POP3"><a href="#四、POP3" class="headerlink" title="四、POP3"></a>四、POP3</h2><p>地址（以126邮箱为例）：pop.126.com</p><p>端口号：110</p><table><thead><tr><th>命令</th><th>参数</th><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>USER</td><td>username</td><td>AUTHORIZATION</td><td>输入邮箱地址</td></tr><tr><td>PASS</td><td>password</td><td>AUTHORIZATION</td><td></td></tr><tr><td>APOP</td><td>Name Digest</td><td>AUTHORIZATION</td><td>Digest是MD5消息摘要</td></tr><tr><td>STAT</td><td>None</td><td>TRANSACTION</td><td>请求服务器发回关于邮箱的统计资料，如邮件总数和总字节数</td></tr><tr><td>UIDL</td><td>[Msg#]</td><td>TRANSACTION</td><td>返回邮件的唯一标识符，POP3会话的每个标识符都将是唯一的</td></tr><tr><td>LIST</td><td>[Msg#]</td><td>TRANSACTION</td><td>返回邮件数量和每个邮件的大小</td></tr><tr><td>RETR</td><td>[Msg#]</td><td>TRANSACTION</td><td>返回由参数标识的邮件的全部文本</td></tr><tr><td>DELE</td><td>[Msg#]</td><td>TRANSACTION</td><td>服务器将由参数标识的邮件标记为删除，由quit命令执行</td></tr><tr><td>RSET</td><td>None</td><td>TRANSACTION</td><td>服务器将重置所有标记为删除的邮件，用于撤消DELE命令</td></tr><tr><td>TOP</td><td>msg n</td><td>TRANSACTION</td><td>服务器将返回由参数标识的邮件前n行内容，n必须是正整数</td></tr><tr><td>NOOP</td><td>None</td><td>TRANSACTION</td><td>服务器返回一个肯定的响应</td></tr><tr><td>QUIT</td><td>None</td><td>UPDATE</td><td></td></tr></tbody></table><h2 id="五、实验结果与代码"><a href="#五、实验结果与代码" class="headerlink" title="五、实验结果与代码"></a>五、实验结果与代码</h2><p><img src="/img/email1.png" alt="email1"></p><p><img src="/img/email2.png" alt="email2">　               </p><p><img src="/img/email3.png" alt="email3"></p><p>赶工完成，有些简陋，而且被吐槽 “你这个东西有什么难度？” TAT<br>好像的确没什么难度。</p><p>Emailclient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> email;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emailclient</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">POP3Server</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pop.126.com&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">SMTPServer</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;smtp.126.com&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recvmailbox</span><span class="hljs-params">(BufferedReader sockin,PrintWriter sockout)</span> &#123;<br>sockout.println(<span class="hljs-string">&quot;stat&quot;</span>);<br>String temp[];<br><span class="hljs-keyword">try</span> &#123;<br>temp = sockin.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> Integer.parseInt(temp[<span class="hljs-number">1</span>]);<span class="hljs-comment">//得到信箱中共有多少封邮件</span><br><span class="hljs-type">Maillist</span> <span class="hljs-variable">maillist</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Maillist</span>();<br><br>System.out.println(<span class="hljs-string">&quot;信箱共有&quot;</span> + count + <span class="hljs-string">&quot;封邮件&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; count + <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">//依次将邮件添加至 maillist</span><br>sockout.println(<span class="hljs-string">&quot;retr &quot;</span> + i);<br><span class="hljs-type">Mailinfo</span> <span class="hljs-variable">mailinfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mailinfo</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">fromindex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;from:&quot;</span>.length();<br><span class="hljs-type">int</span> <span class="hljs-variable">subjectindex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;subject:&quot;</span>.length();<br><span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (flag==<span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">reply</span> <span class="hljs-operator">=</span> sockin.readLine();<br><span class="hljs-comment">//System.out.println(reply);</span><br><span class="hljs-keyword">if</span>(reply.startsWith(<span class="hljs-string">&quot;from:&quot;</span>)||reply.startsWith(<span class="hljs-string">&quot;From:&quot;</span>))<br>mailinfo.received_from = reply.substring(fromindex);<br><span class="hljs-keyword">if</span>(reply.startsWith(<span class="hljs-string">&quot;subject:&quot;</span>)||reply.startsWith(<span class="hljs-string">&quot;Subject:&quot;</span>))<br>mailinfo.subject = reply.substring(subjectindex);<br><span class="hljs-keyword">if</span>(reply.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>reply = sockin.readLine();<br>mailinfo.content = mailinfo.content+reply+<span class="hljs-string">&quot;\r\n&quot;</span> ;<br><span class="hljs-keyword">if</span> (reply.toLowerCase().equals(<span class="hljs-string">&quot;.&quot;</span>)) &#123;<br>flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>maillist.putMail(mailinfo);<br>&#125;<br><span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(flag==<span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;输入0查看邮件列表，输入数字查看该序号邮件，输入-1返回主菜单&quot;</span>);<br><span class="hljs-type">int</span> command;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>command = scanner3.nextInt();<br><span class="hljs-keyword">switch</span> (command) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>System.out.println(<span class="hljs-string">&quot;序号 发件人主题&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;count;i++) &#123;<br><span class="hljs-type">Mailinfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mailinfo</span>();<br>info = maillist.getMail(i+<span class="hljs-number">1</span>);<br>System.out.println((i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot; &quot;</span>+info.received_from+<span class="hljs-string">&quot; &quot;</span>+info.subject);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> -<span class="hljs-number">1</span>:<br>flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;    <br><span class="hljs-keyword">default</span> :<br><span class="hljs-type">Mailinfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mailinfo</span>();<br>info = maillist.getMail(command);<br>System.out.println(<span class="hljs-string">&quot;主题：&quot;</span>+info.subject);<br>System.out.println(<span class="hljs-string">&quot;发件人：&quot;</span>+info.received_from);<br>System.out.println(<span class="hljs-string">&quot;正文：&quot;</span>+info.content);<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeemail</span><span class="hljs-params">(BufferedReader sockin,PrintWriter sockout,String username,String password)</span> &#123;<br><span class="hljs-type">Socket</span> <span class="hljs-variable">smptsocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>sockout.println(<span class="hljs-string">&quot;NOOP&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//建立SMTP连接</span><br>System.out.println(<span class="hljs-string">&quot;S:&quot;</span> + sockin.readLine());<br><span class="hljs-type">String</span> <span class="hljs-variable">recvadd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">fromadd</span> <span class="hljs-operator">=</span> username;<br>smptsocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(Emailclient.SMTPServer,<span class="hljs-number">25</span>);<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">sis</span> <span class="hljs-operator">=</span> smptsocket.getInputStream();<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(sis));<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">sos</span> <span class="hljs-operator">=</span> smptsocket.getOutputStream();<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(sos, <span class="hljs-literal">true</span>);<br>            System.out.println(<span class="hljs-string">&quot;SMPT:&quot;</span> + br.readLine());<br>            <span class="hljs-type">int</span> <span class="hljs-variable">recvcount</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            <br>            <span class="hljs-comment">//登录与验证</span><br>            pw.println(<span class="hljs-string">&quot;EHLO Alice&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <br>            <br>            <span class="hljs-type">char</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>            br.read(data,<span class="hljs-number">0</span>,<span class="hljs-number">1024</span>);<br>            System.out.println(<span class="hljs-string">&quot;SMPT:&quot;</span> + data);<br>            pw.println(<span class="hljs-string">&quot;auth login&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;SMPT:&quot;</span> + br.readLine());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base64useranme</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(username.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>));<br>            pw.println(base64useranme);<br>            System.out.println(<span class="hljs-string">&quot;SMPT:&quot;</span> + br.readLine());<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            System.out.print(<span class="hljs-string">&quot;请输入写邮件授权码\n&quot;</span>); <br>            <span class="hljs-type">String</span> <span class="hljs-variable">passwordsmtp</span> <span class="hljs-operator">=</span> scanner2.next();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base64password</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(passwordsmtp.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>));<br>            pw.println(base64password);<br>            System.out.println(<span class="hljs-string">&quot;SMPT:&quot;</span> + br.readLine());<br>            <br>            <span class="hljs-comment">//发件人与收件人</span><br>            pw.println(<span class="hljs-string">&quot;MAIL FROM: &lt;&quot;</span>+fromadd+<span class="hljs-string">&quot;&gt;&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;SMPT:&quot;</span> + br.readLine());<br>            <br>    System.out.print(<span class="hljs-string">&quot;请输入收件人个数\n&quot;</span>);   <br>    recvcount = scanner2.nextInt();<br>    List&lt;String&gt; names=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;recvcount;i++) &#123;<br>    System.out.print(<span class="hljs-string">&quot;请输入收件人 &quot;</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot; 地址\n&quot;</span>); <br>    recvadd = scanner2.next();<br>    names.add(recvadd);<br>    pw.println(<span class="hljs-string">&quot;RCPT TO: &lt;&quot;</span>+recvadd+<span class="hljs-string">&quot;&gt;&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;SMPT:&quot;</span> + br.readLine());<br>    &#125;<br>    <span class="hljs-comment">//邮件内容</span><br>    pw.println(<span class="hljs-string">&quot;Data&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;SMPT:&quot;</span> + br.readLine());<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.print(<span class="hljs-string">&quot;请输入邮件主题\n&quot;</span>); <br>    <br><span class="hljs-type">String</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> scanner3.nextLine();<br>    pw.println(<span class="hljs-string">&quot;From: &quot;</span>+fromadd);<br>    pw.println(<span class="hljs-string">&quot;To: &quot;</span>+String.join(<span class="hljs-string">&quot;,&quot;</span>,names));<br>    pw.println(<span class="hljs-string">&quot;Subject: &quot;</span>+subject);<br>    System.out.print(<span class="hljs-string">&quot;输入正文，以新一行的“.”结束\n&quot;</span>); <br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> scanner2.nextLine();<br>    pw.println(msg);<br>    <span class="hljs-keyword">if</span>(msg.equals(<span class="hljs-string">&quot;.&quot;</span>))<span class="hljs-keyword">break</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;SMPT:&quot;</span> + br.readLine());<br>    System.out.println(<span class="hljs-string">&quot;邮件发送完成，写邮件通道关闭&quot;</span>);<br>    pw.println(<span class="hljs-string">&quot;quit&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;SMPT:&quot;</span> + br.readLine());<br>    <br>    <br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (smptsocket != <span class="hljs-literal">null</span>) &#123;<br>                smptsocket.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;&#125;<br>        &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quit</span><span class="hljs-params">(BufferedReader sockin,PrintWriter sockout)</span> &#123;<br>sockout.println(<span class="hljs-string">&quot;quit&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;S:&quot;</span> + sockin.readLine());<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">AUTHORIZATION</span><span class="hljs-params">(BufferedReader sockin,PrintWriter sockout,String USERNAME,String PASSWORD)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>System.out.println(<span class="hljs-string">&quot;S:&quot;</span> + sockin.readLine());<br>        sockout.println(<span class="hljs-string">&quot;user &quot;</span> + USERNAME);<br>        System.out.println(<span class="hljs-string">&quot;S:&quot;</span> + sockin.readLine());<br>        sockout.println(<span class="hljs-string">&quot;pass &quot;</span> + PASSWORD);<br>        System.out.println(<span class="hljs-string">&quot;S:&quot;</span> + sockin.readLine());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">POP3Port</span> <span class="hljs-operator">=</span> <span class="hljs-number">110</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.print(<span class="hljs-string">&quot;请输入邮箱地址\n&quot;</span>);<br>    USERNAME = scanner.next();<br>    System.out.print(<span class="hljs-string">&quot;请输入授权码\n&quot;</span>);<br>    PASSWORD = scanner.next();<br>    <span class="hljs-comment">//创建socket</span><br>            client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(Emailclient.POP3Server, POP3Port);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> client.getInputStream();<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">sockin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> client.getOutputStream();<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">sockout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(os, <span class="hljs-literal">true</span>);<br>            <br>            AUTHORIZATION(sockin,sockout,USERNAME,PASSWORD);           <br>            <br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入命令 1.查看收件箱 2.写信  3.刷新 0.退出\n&quot;</span>);<br>            <span class="hljs-type">int</span> command;<br>        command = scanner.nextInt();<br>            <span class="hljs-keyword">switch</span> (command) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            recvmailbox(sockin,sockout);<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            writeemail(sockin,sockout,USERNAME,PASSWORD);<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            quit(sockin,sockout);<br>            client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(Emailclient.POP3Server, POP3Port);<br>                        is = client.getInputStream();<br>                        sockin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>                        os = client.getOutputStream();<br>                        sockout = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(os, <span class="hljs-literal">true</span>);<br>                        AUTHORIZATION(sockin,sockout,USERNAME,PASSWORD); <br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            quit(sockin,sockout);<br>            sockout.println(<span class="hljs-string">&quot;quit&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;S:&quot;</span> + sockin.readLine());   <br>            <span class="hljs-keyword">if</span>(sockout!=<span class="hljs-literal">null</span>)<br>            sockout.close();<br>            <span class="hljs-keyword">if</span>(os!=<span class="hljs-literal">null</span>)<br>            os.close();<br>            <span class="hljs-keyword">if</span>(sockin!=<span class="hljs-literal">null</span>)<br>            sockin.close();<br>            <span class="hljs-keyword">if</span>(is!=<span class="hljs-literal">null</span>)<br>            is.close();<br>            <span class="hljs-keyword">if</span> (client != <span class="hljs-literal">null</span>) &#123;<br>                            client.close();<br>                        &#125;<br>            System.exit(<span class="hljs-number">0</span>);<br>            &#125;         <br>            &#125;<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(e.toString());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (client != <span class="hljs-literal">null</span>) &#123;<br>                    client.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;&#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Maillist.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> email;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Maillist</span> &#123;<br>    ArrayList&lt;Mailinfo&gt; mails;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Maillist</span><span class="hljs-params">()</span><br>    &#123;<br>        mails=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Mailinfo&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putMail</span><span class="hljs-params">(Mailinfo mail)</span><br>    &#123;<br>        mails.add(mail);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Mailinfo <span class="hljs-title function_">getMail</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> mails.get(num-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mailCount</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> mails.size();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Mailinfo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> email;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mailinfo</span> &#123;<br>    <span class="hljs-keyword">public</span> String received_from=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> String subject=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> String content=<span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BlogUPUP 折腾记录</title>
    <link href="/2020/07/10/Blogupup/"/>
    <url>/2020/07/10/Blogupup/</url>
    
    <content type="html"><![CDATA[<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>2022年11月27日，增加 LeanCloud 统计，使用 <code>hexo-all-minifier</code> 压缩图片，提高访问速度。</p><p>2022年10月28日，将主题切换为Fluid.<br>保存原主题的主页截图，留作纪念。</p><p><img src="/img/oldtheme.jpg"></p><hr><p>记录一下这一年里对博客进行的优化</p><h2 id="一、域名"><a href="#一、域名" class="headerlink" title="一、域名"></a>一、域名</h2><p>去年申请的域名，只记得是通过阿里云完成的。</p><p>根据网上的教程，很容易就可以申请到域名，完成缴费并实名认证，将域名解析到 GitHub 自己的博客 IP 地址，在博客的目录下添加一个文件，就可以了。可惜大陆不能注册 .me 的域名，才选择了 .top。</p><p>eteluna，ete 是夏天，luna 是月亮，当时被动画《白箱》的 ED 歌词 ねえ Lunar Lunar 洗脑。</p><p>还算蛮好记的。</p><h2 id="二、图床"><a href="#二、图床" class="headerlink" title="二、图床"></a>二、图床</h2><p>博客的图片加载耗时很严重，尤其是第一次打开主页，背景和题图要加载很久。于是想去试一试国内的图床。</p><p>比较了许多家的图床，包括免费的与收费的（如又拍云、七牛），最终选择了阿里云的 OSS 对象存储。存储的图片和访问量都太小，至今几乎无花费。</p><p>使用时，通过 <a href="https://picgo.github.io/PicGo-Core-Doc/">PicGo</a> 上传图片到自己的图床，直接获得该图片的 Markdown 格式链接，插入到文章中即可。</p><p>网站的加载速度明显提升。</p><h2 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h2><p>一个大工程是代码块的风格，在 <a href="https://highlightjs.org/static/demo/">highlightjs.org</a> 找到 Atom 的配色方案，修改博客主题的 SCSS 文件，最终形成了这个效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a child thread&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然比之前好看得多，但背景是白色的，代码块的配色不该用暗色。有空继续修改。</p><p>其他的优化包括：</p><ul><li>增加 About 页面</li><li>首页的文章数改为 9</li><li>修改字号、段落间距</li><li>增加目录 TOC</li><li>使用文章分类与多个标签</li></ul><p>简单记录下来，就是这些，以后有优化再更新。</p>]]></content>
    
    
    <categories>
      
      <category>折腾搞事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>媒体数据管理上机实验</title>
    <link href="/2020/07/07/Mediadataexp/"/>
    <url>/2020/07/07/Mediadataexp/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/%E6%95%B0%E5%AA%92.jpg" alt="媒体数据管理上机实验"></p><p>这门课的上机题目还都挺有意思，尤其是第三个 LSH 索引耗费了不少精力，故记录下来。</p><p>编程语言为 Python 3</p><!-- toc --><h2 id="1-LZW-编码算法"><a href="#1-LZW-编码算法" class="headerlink" title="1. LZW 编码算法"></a>1. LZW 编码算法</h2><p>如果字典数超过 10 可能会出 bug，因为编码是 1 位的（可通过增加编码位数解决）</p><p>算法流程：</p><ol><li>对输入字符串初始化生成单字符的字典，设P为空字符串；</li><li>遍历字符串每一位C，判断P+C是否在字典中，若是则将P+C赋予P，否则在字典中添加P+C，在结果添加P对应的值，并将C赋予P；</li><li>最后一位字符在结果添加P的值；</li><li>输出编码结果与字典；</li><li>解码程序拿到编码结果与初始化的单字符字典；</li><li>将字典键值翻转，对编码的每一位求得对应字符前缀，保存到字典；</li><li>除第一次，将前缀添加到上一条的末尾，并更新前缀，记录；</li><li>输出记录下的字符。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># s: 输入字符串</span><br>    <span class="hljs-comment"># 返回: 包含所有单字符的字典</span><br>    table = &#123;&#125;<br>    tmp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> tmp:<br>            tmp.append(i)<br>    j = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tmp)):<br>        t = <span class="hljs-built_in">str</span>(j)<br>        table[tmp[i]] = t<br>        j = j + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> table<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encoding</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># s: 输入字符串</span><br>    <span class="hljs-comment"># r: 编码结果 table: 编码表，初始化是单字符字典</span><br>    r = []<br>    table = init(s)<br>    P = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        C = s[i]<br>        t = P+C<br>        <span class="hljs-comment"># 判断 P+C 是否在词典中</span><br>        <span class="hljs-keyword">if</span> t <span class="hljs-keyword">in</span> table.keys():<br>            P = t<br>        <span class="hljs-keyword">if</span> t <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> table.keys():<br>            table[t] = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(table)+<span class="hljs-number">1</span>)<br>            r.append(table[P])<br>            P = C<br>        <span class="hljs-comment"># 最后一位用单字符编码表示</span><br>        <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>:<br>            r.append(table[P])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;After compress: &quot;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(r))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;coding table is: &quot;</span>)<br>    <span class="hljs-built_in">print</span>(table)<br><br>    <span class="hljs-comment"># 将单字符字典与编码结果传入 decoding 解码</span><br>    default = init(s)<br>    decoding(default,r)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decoding</span>(<span class="hljs-params">table,r</span>):<br>    <span class="hljs-comment"># table:包含单独字符的字典, r: LZW编码</span><br>    inverse_table = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(table.values(),table.keys()))<br>    num = <span class="hljs-built_in">len</span>(table.keys())<br>    tablelen = num<br>    tem = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r)):<br>        <span class="hljs-comment"># P 前缀</span><br>        P = inverse_table[<span class="hljs-built_in">str</span>(r[i])]<br>        inverse_table[<span class="hljs-built_in">str</span>(num+<span class="hljs-number">1</span>)] = P<br>        <span class="hljs-comment"># 除第一个编码外，前缀第一个字符添加到上一条的末尾</span><br>        <span class="hljs-keyword">if</span> num &gt; tablelen:<br>            inverse_table[<span class="hljs-built_in">str</span>(num)] = inverse_table[<span class="hljs-built_in">str</span>(num)]+P[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># 重新获取前缀，添加至 tem</span><br>        P = inverse_table[<span class="hljs-built_in">str</span>(r[i])]<br>        tem.append(P)<br>        num = num+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;decoding:&quot;</span>+<span class="hljs-string">&#x27;&#x27;</span>.join(tem))<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">input</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">string</span>: abababcabcab<br>After compress: <span class="hljs-number">1244374</span><br>coding table <span class="hljs-keyword">is</span>: <br>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;ab&#x27;</span>: <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;ba&#x27;</span>: <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;aba&#x27;</span>: <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>: <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;ca&#x27;</span>: <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;abca&#x27;</span>: <span class="hljs-string">&#x27;9&#x27;</span>&#125;<br>decodin<span class="hljs-variable">g:abababcabcab</span><br></code></pre></td></tr></table></figure><h2 id="2-k-l-变换与矢量量化"><a href="#2-k-l-变换与矢量量化" class="headerlink" title="2. k-l 变换与矢量量化"></a>2. k-l 变换与矢量量化</h2><p>在 <code>ColorHistogram.asc</code> 数据集上实现 k-l 变换</p><p>算法流程：</p><ol><li>将输入数据预处理（中心化）；</li><li>求得协方差矩阵C；</li><li>求C的特征值和特征向量；</li><li>取最大特征值的特征向量，求得最佳投影矩阵P；</li><li>对原始样本矩阵投影，得到降维后的新样本矩阵。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">kl</span>(<span class="hljs-params">data</span>):<br><span class="hljs-comment"># 中心化</span><br>mu = np.mean(data, axis=<span class="hljs-number">0</span>)<br>data = data - mu<br>C = <span class="hljs-number">1</span>/data.shape[<span class="hljs-number">0</span>]*np.dot(np.transpose(data),data)<br><br>eig_val, eig_vec = np.linalg.eig(C)<br>eig_pairs = [(np.<span class="hljs-built_in">abs</span>(eig_val[i]), eig_vec[:,i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(eig_val))]<br>eig_pairs.sort(reverse=<span class="hljs-literal">True</span>)<br><br>P = eig_pairs[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br>Y = np.transpose(np.dot(P,np.transpose(data)))<br><span class="hljs-built_in">print</span>(Y)<br><br>data = np.loadtxt(<span class="hljs-string">&#x27;ColorHistogram.asc&#x27;</span>, usecols = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">33</span>), unpack= <span class="hljs-literal">False</span>)<br>kl(data)<br></code></pre></td></tr></table></figure><p>通过 <code>scipy.cluster.vq</code> 实现对图片的矢量量化</p><p>算法流程</p><ol><li>读取输入图片并转化为 (height * width, channel)</li><li>计算 kmeans</li><li>矢量量化</li><li>输出图像</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy.cluster.vq <span class="hljs-keyword">import</span> kmeans, vq<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> reshape<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-comment"># 矢量量化的三个级别</span><br>vqclst = [<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">256</span>]<br><br>data = cv2.imread(<span class="hljs-string">&#x27;cs.jpg&#x27;</span>).astype(<span class="hljs-built_in">float</span>)<br>(height, width, channel) = data.shape<br><br>data = reshape(data, (height * width, channel))<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> vqclst:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Generating vq-%d...&#x27;</span> % k)<br><span class="hljs-comment"># 计算kmeans</span><br>(centroids, distor) = kmeans(data, k)<br><span class="hljs-comment"># 矢量量化</span><br>    (code, distor) = vq(data, centroids)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;distor: %.6f&#x27;</span> % distor.<span class="hljs-built_in">sum</span>())<br>    im_vq = centroids[code, :]<br>cv2.imwrite(<span class="hljs-string">&#x27;result-%d.jpg&#x27;</span> % k, reshape(im_vq, (height, width, channel)))<br><br></code></pre></td></tr></table></figure><h2 id="3-LSH索引实现近似最近邻搜索"><a href="#3-LSH索引实现近似最近邻搜索" class="headerlink" title="3. LSH索引实现近似最近邻搜索"></a>3. LSH索引实现近似最近邻搜索</h2><p>查找 <code>corel数据集</code> 前 1000 行每个点的最近邻点，使用原始汉明编码，计算汉明距离，使用 LSH 索引，实现近似最近邻搜索。输入：corel数据集，汉明码长度K，建表数量L，哈希桶最大容量B；</p><p>算法流程：</p><ol><li>对数据集预处理：乘100取整，获得最大值C与数据维数n；</li><li>在n*C的范围内生成k个随机数，存入表H，为要取到的汉明码位数。新建哈希索引表；</li><li>将数据点的坐标转化为0与1的汉明编码，取2中生成的随机数位，组成字符串pi；</li><li>若哈希索引表pi桶的数量大于B则不记录，否则在pi桶记录该数据点；</li><li>重复操作2，3，4，生成L张H表与哈希索引表；</li><li>对前1000行的点进行最邻近搜索，即对数据点求它的汉明编码，对每张H表和每张哈希索引表，根据H表的位数生成字符串，将哈希索引表的该字符串编码处的点作为候选项，将所有的候选项排序选择频次最高的前十个作为结果；</li><li>计算召回率 Recall、准确率 Accuracy、所用时间 timecost</li></ol><p><img src="/img/mediaexp3re68.png" alt="结果"></p><p>自己写的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> heapq<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 返回点的坐标的汉明编码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Embedding</span>(<span class="hljs-params">C,line</span>):<br><span class="hljs-comment"># C:坐标最大值，line:点的坐标</span><br>string = []<br><span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> line:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(element):<br>string.append(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(C-element):<br>string.append(<span class="hljs-string">&quot;0&quot;</span>)<br><span class="hljs-keyword">return</span>  string<br><br><span class="hljs-comment"># 生成哈希索引表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_table</span>(<span class="hljs-params">H,C,B,data</span>):<br><span class="hljs-comment"># H：生成的k个随机数，C：取到的最大值，B：桶的最大数量</span><br><span class="hljs-comment"># data：处理过的数据集</span><br>table = &#123;&#125;<br>f = &#123;&#125;<br><span class="hljs-keyword">for</span> i, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data):<br>pi = []<br><span class="hljs-comment"># var是汉明编码</span><br>var = <span class="hljs-string">&#x27;&#x27;</span>.join(Embedding(C,line))<br><span class="hljs-comment"># 取汉明编码的H对应位</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> H:<br>pi.append(var[j])<br><span class="hljs-comment"># f字典用于记录每个哈希桶包含的行数，小于B则+1</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;&#x27;</span>.join(pi)) <span class="hljs-keyword">in</span> f:<br><span class="hljs-keyword">if</span> f[<span class="hljs-string">&#x27;&#x27;</span>.join(pi)]&lt;B:<br>f[<span class="hljs-string">&#x27;&#x27;</span>.join(pi)] += <span class="hljs-number">1</span><br>table[i] = <span class="hljs-string">&#x27;&#x27;</span>.join(pi)<br><span class="hljs-keyword">else</span>:<br>f[<span class="hljs-string">&#x27;&#x27;</span>.join(pi)]=<span class="hljs-number">1</span><br>table[i] = <span class="hljs-string">&#x27;&#x27;</span>.join(pi)<br><span class="hljs-keyword">return</span> table<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_H</span>(<span class="hljs-params">Cn,k</span>):<br>H = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>H.append(random.randint(<span class="hljs-number">0</span>,Cn-<span class="hljs-number">1</span>))<br>H.sort()<br><span class="hljs-keyword">return</span> H<br><br><span class="hljs-comment"># 求line的LSH最邻近点</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">Hlist,tblist,var</span>):<br><span class="hljs-comment"># var：一行的汉明编码</span><br><span class="hljs-comment"># 返回该行的所有匹配点（有重复项）</span><br>keys = []<br><span class="hljs-comment"># 用Hlist的每个H求对应位组合</span><br><span class="hljs-keyword">for</span> i,h <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Hlist):<br>p = []<br><span class="hljs-keyword">for</span> hi <span class="hljs-keyword">in</span> h:<br>p.append(var[hi])<br><span class="hljs-comment"># 寻找所以哈希相同的点</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> tblist[i].items():<br><span class="hljs-keyword">if</span> value== <span class="hljs-string">&#x27;&#x27;</span>.join(p):<br>keys.append(key)<br><span class="hljs-keyword">return</span> keys<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">LSH</span>(<span class="hljs-params">line, Hlist, tblist</span>):<br>array = line<br>var = <span class="hljs-string">&#x27;&#x27;</span>.join(Embedding(C, array))<br><span class="hljs-comment"># keys是求得的最邻近点</span><br>keys = search(Hlist, tblist, var)<br>keys.sort()<br><span class="hljs-comment"># 按照出现的次数从大到小排序，去除重复项</span><br>set1 = <span class="hljs-built_in">set</span>(keys)<br>dict01 = &#123;item: keys.count(item) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> set1&#125;<br>sorted_x = <span class="hljs-built_in">sorted</span>(dict01.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br>keys = []<br>num = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i,n <span class="hljs-keyword">in</span> sorted_x:<br>keys.append(i)<br>num += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> keys<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">distance</span>(<span class="hljs-params">line1,line2</span>):<br>dist = np.linalg.norm(line1-line2)<br><span class="hljs-keyword">return</span> dist<br><br><span class="hljs-comment">#暴力搜索获得最近邻</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mindistancedata</span>(<span class="hljs-params">linenum,data</span>):<br>dist = []<br><span class="hljs-keyword">for</span> i, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data):<br>dist.append(distance(data[linenum],data[i]))<br>min_index_list = <span class="hljs-built_in">map</span>(dist.index, heapq.nsmallest(<span class="hljs-number">10</span>, dist))<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(min_index_list)<br><br><span class="hljs-comment">#LSH搜索获得近似最近邻</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mindistance</span>(<span class="hljs-params">linenum,data,linelist</span>):<br>min_index_list = []<br>dist = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> linelist:<br>dist[i] = distance(data[linenum], data[i])<br>L = <span class="hljs-built_in">sorted</span>(dist.items(), key=<span class="hljs-keyword">lambda</span> item: item[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>min_index_list.append(L[i][<span class="hljs-number">0</span>])<br><span class="hljs-keyword">return</span> min_index_list<br><br><span class="hljs-comment"># 数据预处理，乘上10的平方取整</span><br>bit = <span class="hljs-number">2</span><br>odata = data = np.loadtxt(<span class="hljs-string">&#x27;ColorHistogram.asc&#x27;</span>, usecols = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">33</span>), unpack= <span class="hljs-literal">False</span>)<br>data = np.loadtxt(<span class="hljs-string">&#x27;ColorHistogram.asc&#x27;</span>,usecols = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">33</span>), unpack= <span class="hljs-literal">False</span>)<br>data = data*(<span class="hljs-number">10</span>**bit)<br>data = data.astype(np.<span class="hljs-built_in">int</span>)<br><br>k = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input K:&quot;</span>)<br>k = <span class="hljs-built_in">int</span>(k)<br><br>L = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input L:&quot;</span>)<br>L = <span class="hljs-built_in">int</span>(L)<br><br>B = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input B:&quot;</span>)<br>B = <span class="hljs-built_in">int</span>(B)<br><br>C = <span class="hljs-built_in">int</span>(np.<span class="hljs-built_in">max</span>(data)+<span class="hljs-number">1</span>)<br>n = data.shape[<span class="hljs-number">1</span>]<br>hamming_code = []<br>Cn = C*n<br>Hlist=[]<br>tblist = []<br><br><span class="hljs-comment"># 创建索引</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(L):<br>H = set_H(Cn,k)<br>Hlist.append(H)<br>tblist.append(set_table(H,C,B,data))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建索引哈希表： &quot;</span>+<span class="hljs-built_in">str</span>(i))<br><br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>true = []<br>my = []<br>linenum = <span class="hljs-number">1000</span><br><br><span class="hljs-comment"># 暴力搜索，存入true</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(linenum):<br>trueindex = []<br>trueindex = mindistancedata(i, odata)<br>true.append(trueindex)<br>time_start = time.time()<br>tinm = <span class="hljs-number">0</span><br>mint = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># LSH索引搜索，记录正确匹配的点数</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(linenum):<br>myindex = []<br>line  = data[i]<br>keys = LSH(line, Hlist, tblist)<br>myindex = mindistance(i,odata,keys)<br><span class="hljs-keyword">for</span> ni <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-keyword">if</span> true[i][ni] <span class="hljs-keyword">in</span> myindex:<br>tinm += <span class="hljs-number">1</span><br>time_end = time.time()<br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;K=&quot;</span> + <span class="hljs-built_in">str</span>(k) +<span class="hljs-string">&quot;,L=&quot;</span> + <span class="hljs-built_in">str</span>(L) + <span class="hljs-string">&quot;B=&quot;</span> + <span class="hljs-built_in">str</span>(B))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;召回率&quot;</span>+<span class="hljs-built_in">str</span>(tinm/linenum/<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;准确率&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>-(linenum*<span class="hljs-number">10</span>-tinm)*<span class="hljs-number">2</span>/linenum/<span class="hljs-number">68040</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;time cost&#x27;</span>, time_end - time_start, <span class="hljs-string">&#x27;s&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="4-SIFT特征提取与图像匹配"><a href="#4-SIFT特征提取与图像匹配" class="headerlink" title="4. SIFT特征提取与图像匹配"></a>4. SIFT特征提取与图像匹配</h2><p>算法描述：</p><p>输入：原始图像、train图像集；</p><p>输出：最相似的图片；</p><p>算法流程：</p><ol><li>使用SIFT提取原图的特征，得到关键点 kp 及描述符 des；</li><li>获取train中图片，使用SIFT提取特征，得到关键点 kp1 及描述符 des1；</li><li>初始化flann匹配器；</li><li>knnMatch 返回原图每个特征点的两个匹配；</li><li>若第一个匹配点的距离小于第二个的0.7倍，则该对特征匹配成功，计入匹配成功列表；</li><li>若匹配成功的数量大于最大匹配成功数量 ，则替换；</li><li>重复2到6的操作，直到train中图片搜索完毕。</li><li>输出最大匹配的图片名。</li></ol><p>注意：<code>cv2.xfeatures2d.SIFT_create()</code> 在新版 <code>opencv-python</code>中删除，我的解决方案是通过 <code>pip uninstall opencv-python</code> 卸载原有的 <code>opencv-python</code> ，再通过 <code> pip install opencv-contrib-python==3.4.2.16</code> 安装旧版本的 <code>opencv-contrib-python</code>，可以运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 读取第一张图片，计算关键点 kp 及描述符 des</span><br>img = cv2.imread(<span class="hljs-string">&#x27;./test/0/0_3.jpg&#x27;</span>, cv2.IMREAD_COLOR)<br>gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)<br>cv2.imshow(<span class="hljs-string">&#x27;origin&#x27;</span>, img);<br>cv2.waitKey(<span class="hljs-number">20</span>)<br>img = gray<br>sift = cv2.xfeatures2d.SIFT_create()<br>kp, des = sift.detectAndCompute(img,<span class="hljs-literal">None</span>)<br>matchnum = <span class="hljs-number">0</span><br>matchid = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># 遍历./train/文件夹所有的.jpg文件</span><br>path = <span class="hljs-string">&#x27;./train/&#x27;</span><br>time_start = time.time()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>dirpath = path + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;/&#x27;</span><br>imagelist = os.listdir(dirpath)<br><span class="hljs-keyword">for</span> imgname <span class="hljs-keyword">in</span> imagelist:<br><span class="hljs-keyword">if</span> (imgname.endswith(<span class="hljs-string">&quot;.jpg&quot;</span>)):<br>image = cv2.imread(dirpath + imgname)<br>gray1 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)<br>image = gray1<br>kp1, des1 = sift.detectAndCompute(image, <span class="hljs-literal">None</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(kp1)&lt;=<span class="hljs-number">1</span>:<br><span class="hljs-keyword">continue</span><br><br><span class="hljs-comment"># 生成 flann 匹配器</span><br>FLANN_INDEX_KDTREE = <span class="hljs-number">0</span><br>indexParams = <span class="hljs-built_in">dict</span>(algorithm=FLANN_INDEX_KDTREE, trees=<span class="hljs-number">5</span>)<br>searchParams = <span class="hljs-built_in">dict</span>(checks=<span class="hljs-number">50</span>)<br>flann = cv2.FlannBasedMatcher(indexParams, searchParams)<br><br><span class="hljs-comment"># 匹配，让 knnMatch 返回原图每个特征点的两个匹配点</span><br><span class="hljs-comment"># 若第一个匹配点的距离小于第二个的0.7倍，则该对特征匹配成功，计入 good 列表</span><br>matches = flann.knnMatch(des, des1, k=<span class="hljs-number">2</span>)<br>good = []<br><span class="hljs-keyword">for</span> m, n <span class="hljs-keyword">in</span> matches:<br><span class="hljs-keyword">if</span> m.distance &lt; <span class="hljs-number">0.7</span> * n.distance:<br>good.append([m])<br><br><span class="hljs-comment"># 匹配成功的数量大于 matchnum ，则替换</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(good) &gt; matchnum:<br>matchnum = <span class="hljs-built_in">len</span>(good)<br>matchid = imgname<br><span class="hljs-built_in">print</span>(imgname)<br>time_end = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;time cost&#x27;</span>, time_end - time_start, <span class="hljs-string">&#x27;s&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flann 关键点匹配个数:&quot;</span>+<span class="hljs-built_in">str</span>(matchnum))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最相似图片文件名:&quot;</span>+matchid)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What happens when （二）TCP</title>
    <link href="/2020/05/04/Whathappenwhen2/"/>
    <url>/2020/05/04/Whathappenwhen2/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/WHWtcp.jpg" alt="What happens when （二）TCP"></p><h2 id="一、-TCP-x2F-IP-协议栈"><a href="#一、-TCP-x2F-IP-协议栈" class="headerlink" title="一、 TCP&#x2F;IP 协议栈"></a>一、 TCP&#x2F;IP 协议栈</h2><p>TCP&#x2F;IP 协议栈，我们都很熟悉。应用层、传输层、网络层、接口层（数据链路层），如此多的协议，在访问网页时这些协议间是怎样相互配合的？</p><img src="/img/WhwTCPIP.png" alt="TCPIP"  /><p>如前文所述，当用户输入 URL 按下回车键后，主机首先要完成 <strong>DNS 解析</strong>，使用应用层的 DNS 协议。同时，解析过程中可能会用到网络层的 <strong>ARP 协议</strong>，以寻找 DNS 服务器。解析完成，得到目标 IP 地址，计算机会用套接字（Socket）与对方建立 <strong>TCP 连接</strong>。</p><p>网络层通过 IP 协议寻找到目标主机，三次握手后，主机与服务器建立端到端的 TCP 通信通道。主机会发送 HTTP 请求，它通过 TCP 通道发送到服务器的对应端口。在此过程中，应用层生成一个 <strong>HTTP 报文（Message）</strong>，向下发送到传输层。传输层为请求添加 TCP 首部，成为 <strong>TCP 数据段（TCP segment）</strong>。之后网络层再添加 IP 首部，成为 <strong>IP 数据包（IP packet）</strong>。数据通过封装与路由转发，到达目标地址，再由目标主机的数据链路层、网络层、传输层、应用层依次解析并传递上去。</p><img src="/img/TCPfengzhuang.png" style="zoom:80%;" /><p>IP 首部以源地址与目的地址开头，TCP 首部以源端口与目的端口开头，分别承担网络层与传输层的职责。</p><h2 id="二、TCP-首部"><a href="#二、TCP-首部" class="headerlink" title="二、TCP 首部"></a>二、TCP 首部</h2><h3 id="TCP-首部内容"><a href="#TCP-首部内容" class="headerlink" title="TCP 首部内容"></a>TCP 首部内容</h3><p>根据 <a href="https://tools.ietf.org/html/rfc793">RFC793</a> 对 TCP 的定义，TCP 的首部内容主要有：</p><ul><li>源端口、目的端口（Source Port,  Destination Port）：发送方与接收方的端口号，各 16 位 2 字节；</li><li>序列号（Sequence Number）：32 位。当 SYN 标志位为 1 时，序列号为随机算法生成的初始序号（ISN）。序列号减去 ISN 得到相对序列号。</li><li>确认号（Acknowledgment Number）：32位，当 ACK 标志位为 1 时，表示发送方希望接受到的下一个序列号。确认号一般是最后接收到的 TCP 数据段的 序列号+数据长度（字节），可以表示该序列号及之前的数据段已收到。当连接建立后，TCP 数据段总包含确认号。</li><li>数据偏移（Data Offset）：4位，指数据起始处距离 TCP 报文段起始处长度，以 32 位字（ 4 字节）为计算单位。</li><li>保留与标志位（Reserved, Control Bits）：共 12 位，在 <a href="https://tools.ietf.org/html/rfc793">RFC793</a> 中原本有 6 个保留位，6 个标志位。 <a href="https://tools.ietf.org/html/rfc3168#page-61">RFC3168</a> 将后两个保留位替换为 CWR 与 ECE 标志，用于 ECN（显式拥塞通知）。之后在 <a href="www.ietf.org/rfc/rfc3540.txt">RFC3540</a> 将倒数第三个保留位替换为 NS 标志，同样用于 ECN。当前共有 3 个保留位，9 个标志位。标志位分别是：<ol><li>NS（Nonce Sum）</li><li>CWR（Congestion Window Reduced）</li><li>ECE（ECN-Echo）</li><li>URG（Urgent）：紧急指针标志</li><li>ACK（Acknowledgment）：确认标志</li><li>PSH（Push）：推送标志，尽快将数据转由应用处理</li><li>RST（Reset）：重置连接标志</li><li>SYN（Synchronize）：同步序号标志</li><li>FIN（Finish）：结束标志</li></ol></li><li>窗口（Window）：窗口大小（详见滑动窗口）</li><li>检验和（Checksum）：校验报文</li><li>紧急指针（Urgent Pointer）：指向紧急数据后的字节</li><li>选项（Options）：如规定最大报文段长度（MSS）</li><li>填充：凑整，使长度为4字节的整数倍</li></ul><h3 id="Wireshark-抓包"><a href="#Wireshark-抓包" class="headerlink" title="Wireshark 抓包"></a>Wireshark 抓包</h3><p>Wireshark 是常用的抓包工具，使用这个工具查看 TCP 首部。官方网站：<a href="http://www.wireshark.org/">www.wireshark.org</a></p><p>启动Wireshark，双击连接名称，可以进行抓包。左上角控制开始停止，下一栏是过滤器，可以过滤报文，如输入 “dns” ,”ip.addr &#x3D;&#x3D; 192.168.0.1”.</p><p>右击记录，可以追踪流，获取与目标的全部会话。会话记录可以保存。单击一条记录，会有对这条记录的分析。再下面是数据包内容，用 16 进制表示。数据包封装有数据链路层协议、IP 协议、TCP 协议等内容，TCP 协议一般在最后。</p><p>以访问 <a href="http://www.baidu.com/">www.baidu.com</a> 为例，观察建立 TCP 连接过程。访问前开始捕获，待页面加载完成后停止。筛选条件为 “ip.addr &#x3D;&#x3D; 61.135.169.125” 的记录，按编号排序，最上方是三次握手建立连接的过程。</p><p>选择一项，右键追踪流-&gt;TCP，列出该 TCP 连接的全部记录。首先是本机 2567 端口向目标 443 端口发送 SYN &#x3D; 1 ，其序号为随机生成的初始序号ISN 1562792475：</p><p><img src="/img/Wireshark1.png"></p><p>主机收到 SYN&#x3D;1 ACK&#x3D;1 的回应后，发送 ACK&#x3D;1 的回应，三次握手，连接建立。</p><p><img src="/img/Wireshark2.png"></p><p>建立连接后的每个 TCP 数据段，都会有确认号。两边的确认号分别计算，如：</p><ul><li>A 向 B 发送序号 22 确认号 36 长度 5 的 TCP 数据段</li><li>B 向 A 发送序号 36 确认号 27 长度 11 的 TCP 数据段</li><li>A 向 B 发送序号 27 确认号 47 长度 6 的 TCP 数据段</li></ul><p>”三次握手“的前两次，不携带任何数据，长度为零，但都需要消耗一个序号。第三次可以携带数据内容。</p><h2 id="三、三次握手、四次挥手"><a href="#三、三次握手、四次挥手" class="headerlink" title="三、三次握手、四次挥手"></a>三、三次握手、四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>TCP 提供面向连接的、可靠的数据传输服务，在建立连接时采用三次握手的方式：</p><p>第一次：客户端 发送 SYN 标志的数据段<br>第二次：服务端 发送 SYN 与 ACK 标志的数据段<br>第三次：客户端 发送 ACK 标志的数据段</p><p>设第一次发送序号是 M，则服务端返回的确认号是 M+1；<br>设服务端返回的序号是 N， 则第三次握手的确认号是 N+1，序号是 M+1（与对方返回的确认号相同）。</p><img src="/img/TCPSYN.png"  /><p>第一次握手，服务端确认发送端的发送能力；第二次，发送端确认服务端的发送和接收能力；第三次，服务端确认发送端的接收能力。经过了三次握手，这条连接才是可靠的。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>TCP 连接建立后会占用端口，故在连接结束时需要及时关闭。关闭的过程也被称作“四次挥手”。</p><p>当客户端主动关闭时：<br>第一次：客户端发送 FIN 标志数据段<br>第二次：服务端返回 ACK 标志数据段<br>第三次：服务端发送 FIN 标志数据段<br/>第四次：客户端返回 ACK 标志数据段</p><img src="/img/TCPFIN.png" style="zoom:50%;" /><ul><li>客户端主动发送 FIN，表示数据发送结束，进入 FIN_WAIT_1（终止等待1）状态。</li><li>服务端接收到 FIN，返回 ACK 确认，进入 CLOSE_WAIT（关闭等待）状态。</li><li>客户端接收到 ACK，进入 FIN_WAIT_2（终止等待2）状态。此时，连接半关闭，即客户端没有数据要发送，但如果服务端发送数据，客户端仍要接受。</li><li>服务端将数据发送完毕后，发送 FIN，进入 LAST_ACK（最后确认）状态。</li><li>客户端接收到 FIN，返回确认 ACK，进入 TIME_WAIT（时间等待）状态，等待两个最长报文寿命时间（MSL）后关闭连接。服务端收到最后的 ACK，立即关闭。</li></ul><p>在客户端最后的等待两个 MSL 时间中，如果服务端没有收到 ACK，则会重传 FIN，客户端再重新发送 ACK，避免客户端已关闭而服务端持续等待 ACK 的情况。</p><h2 id="四、TCP-如何确保可靠"><a href="#四、TCP-如何确保可靠" class="headerlink" title="四、TCP 如何确保可靠"></a>四、TCP 如何确保可靠</h2><h3 id="传输确认"><a href="#传输确认" class="headerlink" title="传输确认"></a>传输确认</h3><p><strong>累计确认：</strong>TCP 连接接受到的常常是乱序的报文，接收方会在接受一定数量的 TCP 数据段后，才会发送一次确认，用确认号告诉对方自己接收到了的最后字节序号。发送方不用等待前一个报文段确认就可以发送下一个报文，这被称作连续ARQ协议。</p><p><strong>重复累计确认：</strong>接收方收到中断的一段后面的段后，会发送中断处的确认号。发送方在收到三次相同的确认号便会重传。</p><p><strong>超时重传：</strong>发送方会在发送时设置一个超时重传计数器（RTO，Retransmission Time Out），超时未收到确认则会重新发送。重传后若还是没有收到确认，则将超时计时器时间设为原来的两倍。</p><p><strong>选择确认（SACK）：</strong>在 TCP 连接采取累计确认时，如果丢失了一个分组的数据，即使接收方接收到这个分组之后的数据，这些数据也可能会被发送方重传，造成时间和资源的浪费。**SACK ** 允许接收方确认收到的不连续分组， 使接收方能告诉发送方哪些数据丢失，哪些数据重发了，哪些数据已经提前收到。SACK 选项不是强制的，需要在创建连接时在 TCP 首部选项声明。 </p><p><strong>最大分段大小：</strong>当建立 TCP 连接时，双方会在 TCP 首部的选项中声明各自的最大分段大小（MSS）。在发送时，发送方会把数据分为适当大小的段来发送。</p><p><strong>校验和：</strong>计算报文头部与数据的和，再求反码，得到校验和。</p><h3 id="流量控制与滑动窗口"><a href="#流量控制与滑动窗口" class="headerlink" title="流量控制与滑动窗口"></a>流量控制与滑动窗口</h3><p>TCP 使用滑动窗口实现流量控制，接收方在发送确认的 TCP 首部窗口处声明还可以接收的字节数量，发送方最多只能发送接收窗口大小的字节。这个数量受保存数据的缓冲区大小限制。接收方可以修改接收窗口的值，在确认包告知发送方。</p><p>根据连续ARQ协议规定，发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置。当发送方收到第一个分组的确认，就把发送窗口向前移动一个分组的位置。如果原来已经发送了前5个分组，则现在可以发送第6个分组。  </p><p>如果接收窗口值为 0，则需要应用来接收、清空缓存区，才可以继续接受数据。当接收窗口为 0 时，发送方不发送数据，开启一个定时器。一段时间后，恢复发送一个 ZWP 包，期待对方回复一个带有新的接收窗口的确认包。</p><p>如果接收方总在出现较小字节的空闲窗口时，就发送确认，会让每次发送的数据量很小，甚至小于 TCP 首部大小，这被叫做 “糊涂窗口综合症” （ Silly Window Syndrome 奇葩名字）。故发送方和接收方都会通过算法（如 Nagle算法、延迟ACK）来修正窗口大小，发送方默认延迟发送，接收方等待窗口大小足够时再确认。</p><p><strong>Nagle 算法：</strong> TCP 的发送方使用 Nagle 算法，限制传输过程中的小分组（小于 MSS最大报文段长度）的数量，确保只能有一个未收到确认的小分组，并期望将小分组合并为较大的分组一起发送。</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>流量控制针对端到端的通信量，而拥塞控制涉及到整个的网络环境。 发送方与接收方根据确认包或者包丢失的情况，以及定时器，估计网络拥塞情况，从而修改数据流的行为，这称为拥塞控制。</p><p>TCP 的拥塞控制采用了四种算法，即慢启动，拥塞避免，快重传和快恢复。  </p><p><strong>慢启动 (slow start) 与 拥塞避免 (congestion avoidance)：</strong>慢启动的目的是在传输开始时确定网络带宽大小。双方都拥有一个拥塞窗口参数（cwnd），从一个低初始值开始以指数增长，达到慢启动阈值（ssthresh），切换至拥塞避免算法，以线性增长。发送数据的流量最大值是接收窗口与拥塞窗口中较小的数值。</p><p>一旦发生拥塞，将慢启动阈值降低为窗口的一半，如果是超时重传，拥塞窗口被设置为1个报文段，重新进入慢启动。</p><p><strong>快速重传 (Fast Retransmit) 与快速恢复 (Fast Recovery)：</strong>快重传，即在收到大于三个重复 ACK 时即开始重传，之后进入快恢复，慢启动阈值降为窗口的一半，拥塞窗口为慢启动阈值+收到重复 ACK 的数量。</p><h3 id="粘包现象"><a href="#粘包现象" class="headerlink" title="粘包现象"></a>粘包现象</h3><p>发送方使用 Nagle 算法将多个小分组合并为一个 TCP 数据段发送，接收方接受并存储在缓冲区的数据被应用从中间断开取走，都会造成不同包的数据粘连在一起，称作粘包现象。</p><p>解决方法：</p><ol><li>使用 TCP_NODELAY 选项关闭 Nagle 算法</li><li>格式化数据，让每条数据都有相同的开头和结尾，便于读取</li><li>发送数据的长度，便于完整读取每条数据</li></ol><h2 id="五、TCP-与-UDP-应用"><a href="#五、TCP-与-UDP-应用" class="headerlink" title="五、TCP 与 UDP 应用"></a>五、TCP 与 UDP 应用</h2><h3 id="UDP（User-Datagram-Protocol）："><a href="#UDP（User-Datagram-Protocol）：" class="headerlink" title="UDP（User Datagram Protocol）："></a>UDP（User Datagram Protocol）：</h3><p><img src="/img/udp.jpg"></p><p>相对于 TCP 协议，UDP 协议看起来更简单，只是给数据添加了源端口和目的端口。UDP 首部的长度与校验和是可选项，这样的一个 UDP 包被称为 UDP 数据报（UDP Datagram）。</p><p>UDP 有以下特征：</p><ul><li>不保证消息交付：不确认，不重传，无超时；</li><li>不保证交付顺序：不设置包序号，不重排，不发生队首阻塞；</li><li>不跟踪连接状态：不必建立连接或重启状态机；</li><li>不需要拥塞控制：不内置客户端或网络反馈机。</li></ul><p>TCP 提供面向连接、可靠的服务，UDP 提供面向消息、无连接的服务，尽最大努力交付而不保证可靠。因为这样的特性，TCP 是点到点的连接，UDP 可以一对一、一对多、多对一、多对多。UDP 不存在拥塞控制，资源消耗较小，传输速度相对较快，但应用场景较少，多用于实时应用，如音视频通话。腾讯QQ 使用 UDP 协议传输消息，这就是为什么会碰到能上 QQ 但打不开网页的问题。（DNS 配置不正确）</p><p>此外， HTTP、HTTPS、FTP、SMTP（简单邮件传输协议） 等，都是 TCP 的应用。</p><p>接下来第三篇是关于 HTTP 的，不知道又会写多久…</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://xiaozhuanlan.com/topic/2970836415">网络协议之TCP&#x2F;IP</a></p><p><a href="https://www.cnblogs.com/syfwhu/p/5143437.html">网络协议之TCP</a></p><p>更多阅读：</p><p><a href="https://blog.csdn.net/qzcsu/article/details/72861891">两张动图-彻底明白TCP的三次握手与四次挥手</a></p><p><a href="https://zhuanlan.zhihu.com/p/61987654">关于TCP传输协议看这一篇就够了</a></p>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What happens when （一）DNS</title>
    <link href="/2020/04/09/Whathappenedthen1/"/>
    <url>/2020/04/09/Whathappenedthen1/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/WHWdns.jpg" alt="What happens when （一）DNS"></p><p><strong>访问网站时，从输入 URL 到显示页面间发生了什么？</strong></p><p>这是个老生常谈的话题。大一时在科创社有次分享就是围绕这个展开。想想某个简单的功能背后是如何实现的，这就是 What happen when 问题。</p><p>众所周知，访问网页的流程是：输入网址敲回车-&gt;查 DNS-&gt;找到 IP 地址-&gt;通过 TCP 三次握手建立连接-&gt;浏览器发送 Http 请求-&gt;收到回应-&gt;浏览器渲染页面-&gt;结束连接</p><p>但是具体细节如 DNS 怎么查，TCP&#x2F;IP 中各个协议间的关系，三次握手四次挥手的目的，http 与 https，长连接与短连接的问题，就不太能说清了。本系列将会梳理整个过程涉及到的知识点。这次从 DNS 说起。</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>**DNS(Domain Name System)**，用来将域名翻译为 IP 地址。最早的地址是手动分配的：</p><blockquote><p>“在工作时间内，通过电话联系SRI的NIC(网络信息中心)，将自己的主机名与地址告诉他们，写入集中式主机表。”</p></blockquote><p>这时候有了域的概念，如教育机构的计算机应该属于 <code>edu.</code> 域。后来，手动维护一个集中主机表变得越来越复杂，于是有了 DNS 协议。DNS 在 1983 年 11 月在<strong>因特网标准草案 <code>RFC822</code></strong> 发布。原文地址: <a href="https://tools.ietf.org/html/rfc882">https://tools.ietf.org/html/rfc882</a> </p><p>域名空间采用<strong>树结构</strong>， 全球 <strong>13 组根域名服务器</strong>以英文字母 A 到 M 依序命名。</p><p>在域名中 com. org. cn. 这些是顶级域名，结尾的.号可以省略，URL 再往前是二级域名、三级域名。<br/><img src="/img/whttree.png" class="" title="[树型结构]"></p><h2 id="二、查询域名过程"><a href="#二、查询域名过程" class="headerlink" title="二、查询域名过程"></a>二、查询域名过程</h2><p>查询域名的IP，第一步是检查<strong>浏览器的本地缓存</strong>，之后检查<strong>本机缓存</strong>(host)，在 Windows 中为<code>C:\Windows\System32\drivers\etc\hosts</code>，在 Linux 中是  <code>/etc/hosts</code>。接下来是本地 DNS 服务器缓存，也就是 LDNS，使用递归查找。本地 DNS 服务器若还没找到，则去请求根域名服务器，从树的顶点<strong>迭代</strong>向下查，找到顶级域名服务器地址，继续查找，直到找到。如图所示:<br/><img src="/img/whtchaxun.png" class="" title="[查询]"></p><p><a href="http://dns.ip.cn/">dns.ip.cn</a> 这里列出了一些公共 DNS 服务器的IP地址，有我们熟悉的114.114.114.114，8.8.8.8以及各大运营商的各省 DNS 服务器。</p><p>DNS 主要在端口号 53 上使用 UDP 来完成请求。DNS 查询由客户端的单个 UDP 请求和服务器的单个 UDP 响应组成。当答案的长度超过 512 字节时，若客户端和服务器均支持 EDNS 时，将使用较大的UDP数据包。否则，将使用 TCP 再次发送。</p><h2 id="三、DNS-记录"><a href="#三、DNS-记录" class="headerlink" title="三、DNS 记录"></a>三、DNS 记录</h2><p>在官方网站，可以看到根域名服务器的顶级域名文件  <a href="https://www.iana.org/domains/root/files">https://www.iana.org/domains/root/files</a> ，下载来的 root.zone 文件只有2.09MB。根 DNS 服务器的记录，截止目前共有 22016 行，每一个顶级域名都会有若干条记录，比如 me. 这个顶级域名，前五行指向了五个 me. 顶级域名的 DNS 服务器域名，他们的 IP 地址在后续记录，每个都支持 IPV4 与 IPV6.<br/><img src="/img/whtme.jpg" class="" title="[me]"></p><p>记录有 A、CNAME、MX、NS、TXT、SPF 等多种类型，位于倒数第二列。其中：</p><blockquote><p>A&#x2F;AAAA： IPv4 与 IPv6 地址<br/>CNAME:   别名，指向原名<br/>MX:  邮件路由记录，指向邮件服务器<br/>NS: 指向域名解析服务器<br/>DS: TXT:  说明性的字符<br/>SPF:  TXT 的一种运用，发信侧在 SPF 记录备注规则（如自身 IP），接收方可以通过查询，决定是否接受<br/></p></blockquote><h2 id="四、DNS-负载均衡-CDN-内容分发网络"><a href="#四、DNS-负载均衡-CDN-内容分发网络" class="headerlink" title="四、DNS 负载均衡: CDN (内容分发网络)"></a>四、DNS 负载均衡: CDN (内容分发网络)</h2><p>仅仅一台服务器很难应付高并发、远距离的可靠连接，故而需要负载均衡技术。CDN 使用了 DNS 负载均衡:</p><blockquote><p>①当用户点击网站页面上的内容 URL，经过本地 DNS 系统解析，DNS 系统会最终将域名的解析权交给CNAME指向的 CDN 专用 DNS 服务器。</p><p>②CDN 的 DNS 服务器将 CDN 的全局负载均衡设备 IP 地址返回用户。</p><p>③用户向 CDN 的全局负载均衡设备发起内容 URL 访问请求。</p><p>④CDN 全局负载均衡设备根据用户IP地址，以及用户请求的内容 URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。</p><p>⑤区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。</p><p>⑥全局负载均衡设备把服务器的 IP 地址返回给用户。</p><p>⑦用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</p><p>—— 《CDN 技术详解》 </p></blockquote><p>在 Linux 下用 <code>dig </code>命令看看 DNS 如何解析饿了么官网  <code>ele.me</code> </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">leo@leo-virtual-machine:~$ <span class="hljs-keyword">dig </span>@a.root-servers.net ele.me<br><br><span class="hljs-comment">; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; @a.root-servers.net ele.me</span><br><span class="hljs-comment">; (2 servers found)</span><br><span class="hljs-comment">;; global options: +cmd</span><br><span class="hljs-comment">;; Got answer:</span><br><span class="hljs-comment">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 2200</span><br><span class="hljs-comment">;; flags: qr rd; QUERY: 1, ANSWER: 0, AUTHORITY: 5, ADDITIONAL: 11</span><br><span class="hljs-comment">;; WARNING: recursion requested but not available</span><br><br><span class="hljs-comment">;; OPT PSEUDOSECTION:</span><br><span class="hljs-comment">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="hljs-comment">;; QUESTION SECTION:</span><br><span class="hljs-comment">;ele.me.INA</span><br><br><span class="hljs-comment">;; AUTHORITY SECTION:</span><br>me.<span class="hljs-number">172800</span>INNSc0.nic.me.<br>me.<span class="hljs-number">172800</span>INNS<span class="hljs-built_in">a0</span>.nic.me.<br>me.<span class="hljs-number">172800</span>INNS<span class="hljs-keyword">b2.nic.me.</span><br><span class="hljs-keyword"></span>me.<span class="hljs-number">172800</span>INNS<span class="hljs-keyword">b0.nic.me.</span><br><span class="hljs-keyword"></span>me.<span class="hljs-number">172800</span>INNS<span class="hljs-built_in">a2</span>.nic.me.<br><br><span class="hljs-comment">;; ADDITIONAL SECTION:</span><br>c0.nic.me.<span class="hljs-number">172800</span>INA<span class="hljs-number">199</span>.<span class="hljs-number">253</span>.<span class="hljs-number">61</span>.<span class="hljs-number">1</span><br>c0.nic.me.<span class="hljs-number">172800</span>INAAAA<span class="hljs-number">2001</span>:<span class="hljs-number">500</span>:<span class="hljs-number">55</span>::<span class="hljs-number">1</span><br><span class="hljs-built_in">a0</span>.nic.me.<span class="hljs-number">172800</span>INA<span class="hljs-number">199</span>.<span class="hljs-number">253</span>.<span class="hljs-number">59</span>.<span class="hljs-number">1</span><br><span class="hljs-built_in">a0</span>.nic.me.<span class="hljs-number">172800</span>INAAAA<span class="hljs-number">2001</span>:<span class="hljs-number">500</span>:<span class="hljs-number">53</span>::<span class="hljs-number">1</span><br><span class="hljs-keyword">b2.nic.me.</span><span class="hljs-number">172800</span>INA<span class="hljs-number">199</span>.<span class="hljs-number">249</span>.<span class="hljs-number">127</span>.<span class="hljs-number">1</span><br><span class="hljs-keyword">b2.nic.me.</span><span class="hljs-number">172800</span>INAAAA<span class="hljs-number">2001</span>:<span class="hljs-number">500</span>:<span class="hljs-number">4</span>f::<span class="hljs-number">1</span><br><span class="hljs-keyword">b0.nic.me.</span><span class="hljs-number">172800</span>INA<span class="hljs-number">199</span>.<span class="hljs-number">253</span>.<span class="hljs-number">60</span>.<span class="hljs-number">1</span><br><span class="hljs-keyword">b0.nic.me.</span><span class="hljs-number">172800</span>INAAAA<span class="hljs-number">2001</span>:<span class="hljs-number">500</span>:<span class="hljs-number">54</span>::<span class="hljs-number">1</span><br><span class="hljs-built_in">a2</span>.nic.me.<span class="hljs-number">172800</span>INA<span class="hljs-number">199</span>.<span class="hljs-number">249</span>.<span class="hljs-number">119</span>.<span class="hljs-number">1</span><br><span class="hljs-built_in">a2</span>.nic.me.<span class="hljs-number">172800</span>INAAAA<span class="hljs-number">2001</span>:<span class="hljs-number">500</span>:<span class="hljs-number">47</span>::<span class="hljs-number">1</span><br><br><span class="hljs-comment">;; Query time: 178 msec</span><br><span class="hljs-comment">;; SERVER: 198.41.0.4#53(198.41.0.4)</span><br><span class="hljs-comment">;; WHEN: Thu Mar 26 19:23:12 CST 2020</span><br><span class="hljs-comment">;; MSG SIZE  rcvd: 344</span><br></code></pre></td></tr></table></figure><p>找到 me. 的五顶级域名服务器，选一个看：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">leo@leo-virtual-machine:~$</span> <span class="hljs-string">dig</span> <span class="hljs-string">@a0.nic.me</span> <span class="hljs-string">ele.me</span><br><br><span class="hljs-string">;</span> <span class="hljs-string">&lt;&lt;&gt;&gt;</span> <span class="hljs-string">DiG</span> <span class="hljs-number">9.10</span><span class="hljs-number">.3</span><span class="hljs-string">-P4-Ubuntu</span> <span class="hljs-string">&lt;&lt;&gt;&gt;</span> <span class="hljs-string">@a0.nic.me</span> <span class="hljs-string">ele.me</span><br><span class="hljs-string">;</span> <span class="hljs-string">(2</span> <span class="hljs-string">servers</span> <span class="hljs-string">found)</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">global options:</span> <span class="hljs-string">+cmd</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">Got answer:</span><br><span class="hljs-string">;;</span> <span class="hljs-string">-&gt;&gt;HEADER&lt;&lt;-</span> <span class="hljs-attr">opcode:</span> <span class="hljs-string">QUERY,</span> <span class="hljs-attr">status:</span> <span class="hljs-string">NOERROR,</span> <span class="hljs-attr">id:</span> <span class="hljs-number">42409</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">flags:</span> <span class="hljs-string">qr</span> <span class="hljs-string">rd;</span> <span class="hljs-attr">QUERY:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-attr">ANSWER:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">AUTHORITY:</span> <span class="hljs-number">2</span><span class="hljs-string">,</span> <span class="hljs-attr">ADDITIONAL:</span> <span class="hljs-number">1</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">WARNING:</span> <span class="hljs-string">recursion</span> <span class="hljs-string">requested</span> <span class="hljs-string">but</span> <span class="hljs-string">not</span> <span class="hljs-string">available</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">OPT PSEUDOSECTION:</span><br><span class="hljs-string">;</span> <span class="hljs-attr">EDNS: version:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-string">flags:;</span> <span class="hljs-attr">udp:</span> <span class="hljs-number">4096</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">QUESTION SECTION:</span><br><span class="hljs-string">;ele.me.</span><span class="hljs-string">IN</span><span class="hljs-string">A</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">AUTHORITY SECTION:</span><br><span class="hljs-string">ele.me.</span><span class="hljs-number">86400</span><span class="hljs-string">IN</span><span class="hljs-string">NS</span><span class="hljs-string">ns1.alibabadns.com.</span><br><span class="hljs-string">ele.me.</span><span class="hljs-number">86400</span><span class="hljs-string">IN</span><span class="hljs-string">NS</span><span class="hljs-string">ns2.alibabadns.com.</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">Query time:</span> <span class="hljs-number">302</span> <span class="hljs-string">msec</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">SERVER:</span> <span class="hljs-number">199.253</span><span class="hljs-number">.59</span><span class="hljs-number">.1</span><span class="hljs-comment">#53(199.253.59.1)</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">WHEN:</span> <span class="hljs-string">Thu</span> <span class="hljs-string">Mar</span> <span class="hljs-number">26</span> <span class="hljs-number">19</span><span class="hljs-string">:23:44</span> <span class="hljs-string">CST</span> <span class="hljs-number">2020</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">MSG SIZE  rcvd:</span> <span class="hljs-number">85</span><br></code></pre></td></tr></table></figure><p>获得两个阿里巴巴的 DNS 域名，<code>ns1.alibabadns.com</code> 与 <code>ns2.alibabadns.com</code>,继续查</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">leo@leo-virtual-machine:~$</span> <span class="hljs-string">dig</span> <span class="hljs-string">@ns2.alibabadns.com</span> <span class="hljs-string">ele.me</span><br><br><span class="hljs-string">;</span> <span class="hljs-string">&lt;&lt;&gt;&gt;</span> <span class="hljs-string">DiG</span> <span class="hljs-number">9.10</span><span class="hljs-number">.3</span><span class="hljs-string">-P4-Ubuntu</span> <span class="hljs-string">&lt;&lt;&gt;&gt;</span> <span class="hljs-string">@ns2.alibabadns.com</span> <span class="hljs-string">ele.me</span><br><span class="hljs-string">;</span> <span class="hljs-string">(2</span> <span class="hljs-string">servers</span> <span class="hljs-string">found)</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">global options:</span> <span class="hljs-string">+cmd</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">Got answer:</span><br><span class="hljs-string">;;</span> <span class="hljs-string">-&gt;&gt;HEADER&lt;&lt;-</span> <span class="hljs-attr">opcode:</span> <span class="hljs-string">QUERY,</span> <span class="hljs-attr">status:</span> <span class="hljs-string">NOERROR,</span> <span class="hljs-attr">id:</span> <span class="hljs-number">20973</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">flags:</span> <span class="hljs-string">qr</span> <span class="hljs-string">aa</span> <span class="hljs-string">rd;</span> <span class="hljs-attr">QUERY:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-attr">ANSWER:</span> <span class="hljs-number">2</span><span class="hljs-string">,</span> <span class="hljs-attr">AUTHORITY:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">ADDITIONAL:</span> <span class="hljs-number">1</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">WARNING:</span> <span class="hljs-string">recursion</span> <span class="hljs-string">requested</span> <span class="hljs-string">but</span> <span class="hljs-string">not</span> <span class="hljs-string">available</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">OPT PSEUDOSECTION:</span><br><span class="hljs-string">;</span> <span class="hljs-attr">EDNS: version:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-string">flags:;</span> <span class="hljs-attr">udp:</span> <span class="hljs-number">4096</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">QUESTION SECTION:</span><br><span class="hljs-string">;ele.me.</span><span class="hljs-string">IN</span><span class="hljs-string">A</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">ANSWER SECTION:</span><br><span class="hljs-string">ele.me.</span><span class="hljs-number">300</span><span class="hljs-string">IN</span><span class="hljs-string">A</span><span class="hljs-number">106.15</span><span class="hljs-number">.160</span><span class="hljs-number">.220</span><br><span class="hljs-string">ele.me.</span><span class="hljs-number">300</span><span class="hljs-string">IN</span><span class="hljs-string">A</span><span class="hljs-number">106.14</span><span class="hljs-number">.48</span><span class="hljs-number">.241</span><br><br><span class="hljs-string">;;</span> <span class="hljs-attr">Query time:</span> <span class="hljs-number">134</span> <span class="hljs-string">msec</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">SERVER:</span> <span class="hljs-number">106.11</span><span class="hljs-number">.35</span><span class="hljs-number">.18</span><span class="hljs-comment">#53(106.11.35.18)</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">WHEN:</span> <span class="hljs-string">Thu</span> <span class="hljs-string">Mar</span> <span class="hljs-number">26</span> <span class="hljs-number">19</span><span class="hljs-string">:24:46</span> <span class="hljs-string">CST</span> <span class="hljs-number">2020</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">MSG SIZE  rcvd:</span> <span class="hljs-number">67</span><br></code></pre></td></tr></table></figure><p>找到了饿了么的两个 IP 地址。也可以使用 nslookup 命令查询，在 Windows 下分别查询 ele.me 与 <a href="http://www.ele.me：">www.ele.me：</a></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">C:\Users\leo-6&gt;nslookup ele.me</span><br><span class="hljs-section">服务器:  public1.114dns.com</span><br><span class="hljs-section">Address:  114.114.114.114</span><br><br><span class="hljs-section">非权威应答:</span><br><span class="hljs-section">名称:    ele.me</span><br><span class="hljs-section">Addresses:  106.14.48.241</span><br>          106.15.160.220<br><br><span class="hljs-section">C:\Users\leo-6&gt;nslookup www.ele.me</span><br><span class="hljs-section">服务器:  cache1-xx</span><br><span class="hljs-section">Address:  124.89.1.129</span><br><br><span class="hljs-section">非权威应答:</span><br><span class="hljs-section">名称:    v6-zb-alibaba-clould.tengine.alibaba.com</span><br><span class="hljs-section">Addresses:  2408:4001:1000::4</span><br>          47.92.62.13<br>          47.92.21.245<br><span class="hljs-section">Aliases:  www.ele.me</span><br>          dualstack-sopush.elemecdn.com<br></code></pre></td></tr></table></figure><p>试一试访问 ele.me 会发生什么。首先是302的状态码，把我们重定向至 <a href="http://www.ele.me/">www.ele.me</a> 。<br/><img src="/img/whw1.jpg" class="" title="[me]"></p><p>之后是访问 <a href="http://www.ele.me/">www.ele.me</a> 的地址 47.92.21.245 ，获得了一些 js 文件。<br/><img src="/img/whw2.jpg" class="" title="[me]"></p><p>文件让我们继续访问  <a href="https://shadow.elemecdn.com/god/WEB://www.ele.me">https://shadow.elemecdn.com/god/WEB://www.ele.me</a> 。<br/><img src="/img/whw3.jpg" class="" title="[me]"></p><p>地址是 113.200.15.85，根据域名判断，显然是它的一个 CDN 服务器。<br/><img src="/img/whw4.jpg" class="" title="[me]"></p><p>原本打算一次写完，结果一个 DNS 就写了好多。先到这里吧。</p><p>参考资料：<br/><a href="https://segmentfault.com/a/1190000002578457">https://segmentfault.com/a/1190000002578457</a> 利用dns解析来实现网站的负载均衡<br/><a href="https://www.jianshu.com/p/b483300378af">https://www.jianshu.com/p/b483300378af</a> DNS的A、CNAME、MX、NS、TXT、SPF记录</p>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发(1)线程基础</title>
    <link href="/2020/03/16/java1/"/>
    <url>/2020/03/16/java1/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/java1.jpg" alt="Java并发(1)线程基础"></p><p>重新学习 Java 并发，本文包括线程的创建，线程的状态切换方法，守护线程。</p><p><strong>As We All Know</strong><br/><strong>进程是系统分配资源和调度的基本单位</strong><br/><strong>线程是在 CPU 上运行的基本单位</strong></p><p>在 Java 中，启动 main 函数即启动一个 JVM 进程，main 函数的线程是这个进程的一个线程，也称主线程。线程有自己的<strong>程序计数器</strong>（执行位置）和<strong>栈</strong>（局部变量）；进程有<strong>堆</strong>与<strong>方法区</strong>，前者存放 new 的对象实例，后者存放 JVM 加载的类、常量、静态变量，他们都是线程共享的。</p><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a><strong>线程创建</strong></h2><p>Java有三种方式创建线程：</p><ol><li><p>继承 Thread 类, 重写 run() 方法</p></li><li><p>实现 Runnable 接口</p></li><li><p>使用 FutureTask</p></li></ol><h5 id="1-继承-Thread-类，重写-run-方法："><a href="#1-继承-Thread-类，重写-run-方法：" class="headerlink" title="1.继承 Thread 类，重写 run() 方法："></a>1.继承 Thread 类，重写 run() 方法：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ticket; <br>MyThread(<span class="hljs-type">int</span> t) &#123;<br>ticket = t;<br>&#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ticket;i++)&#123; <br>            <span class="hljs-keyword">if</span>(ticket&gt;<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-built_in">this</span>.getName()+<span class="hljs-string">&quot; sold ticket&quot;</span>+ i);<br>            &#125;<br>        &#125;<br>    &#125; <br>&#125;;<br></code></pre></td></tr></table></figure><p>main 函数中：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">MyThread thread1 = new MyThread(); <span class="hljs-regexp">//</span>创建线程<br>thread1.start(); <span class="hljs-regexp">//</span>启动线程<br>MyThread thread2 = new MyThread(); <span class="hljs-regexp">//</span>创建线程<br>thread2.start(); <span class="hljs-regexp">//</span>启动线程<br></code></pre></td></tr></table></figure><p>这种方法直接调用 this 就可以获得当前进程，不必使用 Thread.currentThread() 方法。缺点是 Java 不支持多继承，继承 Thread 类就不能继承其他类了。</p><h5 id="2-实现-Runnable-接口"><a href="#2-实现-Runnable-接口" class="headerlink" title="2.实现 Runnable 接口:"></a>2.实现 Runnable 接口:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a child thread&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//main函数中:</span><br><span class="hljs-type">RunnableTask</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableTask</span>(); <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task).start(); <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task).start(); <br></code></pre></td></tr></table></figure><p>新建线程共用一个代码逻辑，并且线程可以继承其他类。</p><h5 id="3-FutureTask-方式"><a href="#3-FutureTask-方式" class="headerlink" title="3. FutureTask 方式"></a>3. FutureTask 方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallerTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException&#123;<br>    <span class="hljs-comment">//创建异步任务</span><br>    FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CallerTask</span>());<br>    <span class="hljs-comment">//启动线程</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br>    <span class="hljs-keyword">try</span>&#123;<span class="hljs-comment">//任务执行完成，返回结果</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> futureTask.get();<br>        System.out.println(result);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (ExecutionException e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建了一个 FutureTask 的对象，构造函数为 CallerTask ，使用 FutureTask 对象作为任务创建线程，这个对象可以调用 get() 方法，执行的是重写的 call()。</p><p>三种方法的后两者都是先创建任务 task，再启动。</p><h2 id="线程状态切换"><a href="#线程状态切换" class="headerlink" title="线程状态切换"></a><strong>线程状态切换</strong></h2><p><strong>wait() 函数:</strong> </p><p>wait(), wait(long timeout), wait(long timeout,int nanos)<br/>timeout: 超时则返回，参数 &#x3D;0 时为 wait()<br/>nanos: &gt;0时timeout++</p><p><strong>wait() 是 Object 方法，使用前需要获得对象的监视器锁。</strong></p><p>某线程调用共享对象的 wait() 方法时，该线程会挂起，释放对象的监视器锁。解除 wait() 状态需要其他线程调用共享对象的 notify() 或者 notifyAll() 方法，或者调用 wait() 线程的 interrupt() 方法抛出 IllegalMonitorStateException 异常。<br/><strong>当调用 wait() 方法时，只有该对象的监视器锁被线程释放。</strong></p><p>虚假唤醒: 莫名其妙被唤醒，<strong>在 wait() 外使用 while 循环</strong>防范，不满足则继续挂起。PS :这内部类看着真舒服</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WaitNotifyInterupt</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException&#123;<br><span class="hljs-comment">//创建线程</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;begin&quot;</span>);<br><span class="hljs-keyword">synchronized</span> (obj) &#123;<br>obj.wait();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;end&quot;</span>);<br><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;);<br>threadA.start();<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>System.out.println(<span class="hljs-string">&quot;begin interrupt threadA&quot;</span>);<br>threadA.interrupt();<br>System.out.println(<span class="hljs-string">&quot;end interrupt&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//执行结果：begin begin interrupt threadA end interrupt 中断报错</span><br></code></pre></td></tr></table></figure><p><strong>notify(),notifyAll()：</strong><br/>一个线程调用<strong>共享对象</strong>的 notify() 方法，会<strong>唤醒</strong>一个在该变量上调用 wait() 挂起的线程，若有多个则<strong>随机唤醒</strong>一个(notifyAll() 全部唤醒)。调用 notify() 方法会<strong>释放对象监视器锁</strong>，唤醒的线程需要竞争获得监视器锁。<br/><strong>wait 与 notify 都是 Object 的方法.</strong></p><p><strong>join()</strong>, 无参且返回值为 void，线程的方法，等待该线程执行完毕。</p><p><strong>sleep()</strong>, 线程的方法，阻塞自己一段时间，调用睡眠时不释放监视器锁</p><p><strong>yield()</strong>, 线程的方法，让出 CPU 使用权，线程不被阻塞挂起，故下一次可能还是调度它执行</p><p><strong>interrupt()</strong>, 中断，将线程的中断标志设置为 true 并返回，实际上还可以往下运行。但如果被 wait(),sleep(),join() 阻塞,则会在调用这些方法的地方抛出 InterruptedException 异常</p><p><strong>boolean isInterrupted()</strong> : 检测线程是否中断，返回布尔值<br/><strong>boolean interrupted()<strong>：检测</strong>当前</strong>线程是否中断，返回布尔值，如果中断则清除中断标志。static 可以通过 Thread 类直接调用，<strong>在主线程中调用</strong> threadOne.interrupted 实际上返回的是<strong>主线程的中断标志</strong>。<br/>可以在线程内调 Thread.currentThread().interrupted() 实现子线程的 interrupted 方法。</p><h4 id="中断异常处理实例："><a href="#中断异常处理实例：" class="headerlink" title="中断异常处理实例："></a><strong>中断异常处理实例：</strong></h4><p>线程A执行过程中，sleep 阻塞20s，但可能中间某一时刻就可以继续运行了，这时候用中断处理，将它中断，强制 <strong>sleep()方法</strong>发生中断异常而返回。关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">threadOne</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;threadOne begin sleep for 20s&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">200000</span>);<br>            System.out.println(<span class="hljs-string">&quot;threadOne awaking&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;threadOne is interrupted while sleeping&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;threadOne-leaving normally&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>上下文切换：在线程调度、上下文切换时，要保存现场，再次执行时恢复现场</p><p>线程死锁：操作系统都学过的四个条件：<br/>1. 互斥条件，资源排他性<br/>2. 请求和保持，不主动释放<br/>3. 不剥夺条件，不能剥夺<br/>4. 环路等待，死锁环<br/>预防死锁的主要方法是使用<strong>资源申请的有序性原则</strong>，假如线程 A 和线程 B 都需要资源 1, 2, 3, …, n 时，对资源进行排序，线程 A 和线程 B 都只有在获取了资源 n-1 时才能去获取资源 n. 这样做是从2,4条件入手，避免死锁。</p><p><strong>守护线程:</strong><br/>Java 中的线程分为两类，分别为 <strong>daemon 线程</strong>(守护线程)和 <strong>user 线程</strong>(用户线程)，在 JVM 启动时会调用 main 函数，main 函数所在的线程就是一个用户线程，在 JVM内部同时还启动了许多守护线程，比如垃圾回收线程。<br/>在 Java 中，父线程结束，子线程不一定结束。而只要有一个用户线程还没结束，正常情况下 JVM 就不会退出。如果我们想让一个线程不影响JVM结束工作，可以把它设置为守护线程。<code>thread.setDaemo(true) ;</code></p>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC初探</title>
    <link href="/2020/01/15/springmvc/"/>
    <url>/2020/01/15/springmvc/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Springmvc.jpg" alt="SpringMVC初探"></p><img src="/img/mvckj4th.png" class="" title="[mvc4th框架]"><p>上方的图片是《Spring实战第四版》给出的，DispatcherServlet处理请求，发给对应的控制器(Controller)，控制器返回应答的模型数据和视图名称，DispatcherServlet再去找视图，做出应答发送给用户（浏览器）。下方的是第五版的，简化了服务器端的细节，实际上在服务器端仍然有那些流程。</p><p>以下是《Spring实战》第五章的项目流程：</p><img src="/img/mvckj5th.jpg" class="" title="[mvc5th框架]"><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p>通过maven创建项目，在pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>maven的镜像源设置参考别处教程，这里不细说，只是提一下配置maven遇到的bug：</p><p>NoSuchMethodError，这个可能是版本问题，新版没有这个方法，或者是 jar包冲突 ，我遇到的情况是maven导入了这个包和另一个旧项目，之间发生了冲突。</p><p> PKIX path building failed </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http\:<span class="hljs-regexp">//m</span>aven.aliyun.com<span class="hljs-regexp">/nexus/</span>content<span class="hljs-regexp">/repositories/</span>central<span class="hljs-regexp">/.error=Could not transfer artifact com.github.stefanbirkner\:system-rules\:pom\:1.19.0 from/</span>to alimaven (http\:<span class="hljs-regexp">//m</span>aven.aliyun.com<span class="hljs-regexp">/nexus/</span>content<span class="hljs-regexp">/repositories/</span>central/)\: sun.security.validator.ValidatorException\: PKIX path building failed\: sun.security.provider.certpath.SunCertPathBuilderException\: unable to find valid certification path to requested target <br></code></pre></td></tr></table></figure><p>这个是在用阿里云镜像时常出现的bug，第一次遇到时发现是阿里云仓库导入依赖的写法不同，另一次解决不了干脆放弃阿里云，用 <a href="http://repo1.maven.org/maven2/">http://repo1.maven.org/maven2/</a> .看到阿里云仓库评论不止我遇到了这个问题。</p><p>maven遇到包无法导入的问题，进仓库删文件再reimport总是效果不错</p><h3 id="2-写基本的配置文件、控制类、测试类"><a href="#2-写基本的配置文件、控制类、测试类" class="headerlink" title="2.写基本的配置文件、控制类、测试类"></a>2.写基本的配置文件、控制类、测试类</h3><p>配置<strong>DispatcherServlet</strong>（SpittrWebAppInitializer）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> spittr.config;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SprittrWebAppInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123;RootConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123;WebConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<span class="hljs-comment">//将路径映射到DispatcherServlet，/为默认</span><br>    &#125;<br>    <span class="hljs-comment">//配置DispatcherServlet</span><br>    <span class="hljs-comment">//扩展了AbstractAnnotationConfigDispatcherServletInitializer的类会自动配置DispatcherServlet和Spring应用上下文</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>WebConfig</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> spittr.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ViewResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@ComponentScan(&quot;spittr.web&quot;)</span><span class="hljs-comment">//扫描该目录下的控制器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title function_">viewResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">InternalResourceViewResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalResourceViewResolver</span>();<br><span class="hljs-comment">//        resolver.setViewClass(JstlView.class);</span><br>        resolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/views/&quot;</span>);<br>        resolver.setSuffix(<span class="hljs-string">&quot;.jsp&quot;</span>);<br>        resolver.setExposeContextBeansAsAttributes(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> resolver;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(</span><br><span class="hljs-params">            DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>RootConfig</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> spittr.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan.Filter;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.FilterType;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages=&#123;&quot;spittr&quot;&#125;,excludeFilters=&#123;@Filter(type=FilterType.ANNOTATION,value=EnableWebMvc.class)</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RootConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上三个是配置类，接下来是控制器<strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> spittr.web;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.web.bind.annotation.RequestMethod.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.web.bind.annotation.RequestMethod.GET;<br><br><span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/homepage&quot;&#125;)</span><span class="hljs-comment">//处理对&#x27;/&#x27;、&#x27;/homepage&#x27;的请求</span><br><span class="hljs-meta">@Controller</span> <span class="hljs-comment">//声明为控制器,目的是找到它并生成Bean，和Conponent效果类似</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HomeController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(method=GET)</span> <span class="hljs-comment">//处理对&#x27;/&#x27;、&#x27;/homepage&#x27;的get请求</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;home&quot;</span>;  <span class="hljs-comment">//视图名为home，传回给DispatcherServlet</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>webapp-&gt;WEB-INF-&gt;views</code>新建<strong>home.jsp</strong>文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> spittr.web;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.test.web.servlet.setup.MockMvcBuilders.*;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.MockMvc;<br><span class="hljs-keyword">import</span> spittr.web.HomeController;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HomeControllerTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHomePage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">HomeController</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HomeController</span>();<br>        <span class="hljs-type">MockMvc</span> <span class="hljs-variable">mockMvc</span> <span class="hljs-operator">=</span> standaloneSetup(controller).build();<br>        mockMvc.perform(get(<span class="hljs-string">&quot;/&quot;</span>)).andExpect(view().name(<span class="hljs-string">&quot;home&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在测试中用到了Mock，有关Mock的使用参见 ：<a href="https://segmentfault.com/a/1190000006746409">https://segmentfault.com/a/1190000006746409</a></p><p>总之使用Mockito进行测试，导入依赖。这里值得学习。前后端分离Restful的开发方法，适合测试。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mockito<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mockito-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.111-beta<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-部署项目"><a href="#3-部署项目" class="headerlink" title="3.部署项目"></a>3.部署项目</h3><p>Tomcat与jdk之间有版本对应关系如下</p><table><thead><tr><th>web 版本</th><th>jdk 版本</th><th align="left">tomcat 版本</th></tr></thead><tbody><tr><td>version 2.2</td><td>jdk 1.1</td><td align="left">tomcat 3.3</td></tr><tr><td>version 2.3</td><td>jdk 1.3</td><td align="left">tomcat 4.1</td></tr><tr><td>version 2.4</td><td>jdk 1.4</td><td align="left">tomcat 5.5</td></tr><tr><td>version 2.5</td><td>jdk 1.5</td><td align="left">tomcat 6.0</td></tr><tr><td>version 3.0</td><td>jdk 1.6</td><td align="left">tomcat 7.0</td></tr><tr><td>version 3.1</td><td>jdk 1.7</td><td align="left">tomcat 8.0 或 tomcat 8.5</td></tr><tr><td>version 4.0</td><td>jdk 1.8</td><td align="left">tomcat 9.0</td></tr></tbody></table><p>这里记录下自己部署的流程：</p><p>在IDEA中点击右上角倒数第二个Project Structure-&gt;Artifacts，添加Web Application achieve，from 已有的Web Application explored（如果没有就先添加一个Web Application explored）。</p><p>在Tomcat中运行：选择Build-&gt;build artifacts，将得到的out文件夹中.war文件放到Tomcat的whatsapp目录下，运行bin目录中的startup.bat，访问localhost:端口&#x2F;文件名，即是项目的首页。</p><p>在IDEA中运行：在运行窗口上edit configurations, 添加一个tomcat服务，填写目录与端口，在Before launch 中添加build artifact, 即之前的.war文件。</p><h3 id="4-更多的控制器与测试"><a href="#4-更多的控制器与测试" class="headerlink" title="4.更多的控制器与测试"></a>4.更多的控制器与测试</h3><p>在写好了DispatcherServlet后，我们的功能都是由增加和修改控制器来完成。DispatcherServlet将请求发送给不同的控制器，控制器根据请求的类型和值返回视图名或其他信息（这些信息被称作模型），之后通过JSP把信息处理为HTML格式返回给用户。</p><p>看看我们的控制器</p><h4 id="1-最普通的，仅返回视图名。"><a href="#1-最普通的，仅返回视图名。" class="headerlink" title="1.最普通的，仅返回视图名。"></a><strong>1.最普通的，仅返回视图名。</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> spittr.web;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.web.bind.annotation.RequestMethod.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.web.bind.annotation.RequestMethod.GET;<br><br><span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/homepage&quot;&#125;)</span><span class="hljs-comment">//处理对&#x27;/&#x27;、&#x27;/homepage&#x27;的请求</span><br><span class="hljs-meta">@Controller</span> <span class="hljs-comment">//声明为控制器,目的是找到它并生成Bean，和Conponent效果类似</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HomeController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(method=GET)</span> <span class="hljs-comment">//处理对&#x27;/&#x27;、&#x27;/homepage&#x27;的get请求</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;home&quot;</span>;  <span class="hljs-comment">//视图名为home，传回给DispatcherServlet</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-处理带参数请求的控制器函数"><a href="#2-处理带参数请求的控制器函数" class="headerlink" title="2.处理带参数请求的控制器函数"></a><strong>2.处理带参数请求的控制器函数</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(method=RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> List <span class="hljs-title function_">spittles</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value=&quot;max&quot;,</span></span><br><span class="hljs-meta"><span class="hljs-params">                defaultValue=&quot;50&quot;)</span> <span class="hljs-type">long</span> max,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value=&quot;count&quot;, defaultValue=&quot;20&quot;)</span> <span class="hljs-type">int</span> count)</span> <br><span class="hljs-comment">//通过请求传入两个参数，默认值分别为50,20</span><br><span class="hljs-comment">//如请求URL&quot;/spittles?max=238900&amp;count=50&quot;</span><br>&#123;<br>    <span class="hljs-keyword">return</span> spittleRepository.findSpittles(max, count);<span class="hljs-comment">//返回List，其他的视图名等都包括在模型中</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-处理路径参数的控制器函数"><a href="#3-处理路径参数的控制器函数" class="headerlink" title="3.处理路径参数的控制器函数"></a><strong>3.处理路径参数的控制器函数</strong></h4><p>对于一个资源，形如”&#x2F;spittles&#x2F;show?spittle_id&#x3D;12345”的请求，可以替换为”&#x2F;spittles&#x2F;12345”的形式，这样的形式可以直接识别要查找的资源，不必通过带参数的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/&#123;spittleId&#125;&quot;, method=RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">spittle</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable(&quot;spittleId&quot;)</span> <span class="hljs-type">long</span> spittleId,</span><br><span class="hljs-params">        Model model)</span> &#123;<br>    model.addAttribute(spittleRepository.findOne(spittleId));<span class="hljs-comment">//模型中增加了ID</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;spittle&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析我们的测试例，使用mock测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.MockMvc;<br><span class="hljs-keyword">import</span> spittr.Spittle;<br><span class="hljs-keyword">import</span> spittr.data.SpittleRepository;<br><span class="hljs-keyword">import</span> spittr.web.SpittleController;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.mockito.Mockito.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpittleIDTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSpittle</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Spittle</span> <span class="hljs-variable">expectedSpittle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Spittle</span>(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-type">SpittleRepository</span> <span class="hljs-variable">mockRepository</span> <span class="hljs-operator">=</span> mock(SpittleRepository.class);<br>        when(mockRepository.findOne(<span class="hljs-number">12345</span>)).thenReturn(expectedSpittle);<br><br>        <span class="hljs-type">SpittleController</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpittleController</span>(mockRepository);<br>        <span class="hljs-type">MockMvc</span> <span class="hljs-variable">mockMvc</span> <span class="hljs-operator">=</span> standaloneSetup(controller).build();<br>        mockMvc.perform(get(<span class="hljs-string">&quot;/spittles/12345&quot;</span>))<br>                .andExpect(view().name(<span class="hljs-string">&quot;spittle&quot;</span>))<br>                .andExpect(model().attributeExists(<span class="hljs-string">&quot;spittle&quot;</span>))<br>                .andExpect(model().attribute(<span class="hljs-string">&quot;spittle&quot;</span>, expectedSpittle));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显分为了两个部分，前半部分是服务器的内容预设。后半部分是进行访问，与之前预设内容比较。这部分做完之后，我们可以看到如此的目录</p><img src="/img/mvcmulu.jpg" class="" title="[mvc目录]"><p>之后就去看springboot了，<strong>一键建站还看什么springmvc</strong>…就这样</p>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视觉实验三 全景图</title>
    <link href="/2020/01/10/BlogVE3/"/>
    <url>/2020/01/10/BlogVE3/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/BlogVE3.jpg" alt="视觉实验三 全景图"></p><p>这次实验让我们分别使用平移变换和单应变换（仿射变换）拼接图像，生成全景图。时间过去很久了，简单说一下实验步骤和遇到的问题</p><h3 id="一、球面坐标变换"><a href="#一、球面坐标变换" class="headerlink" title="一、球面坐标变换"></a>一、球面坐标变换</h3><p>使用平移变换需要先求得球面变换坐标，并校正径向畸变。按照公式可得代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 球面座标变换</span><br>xt = np.sin(xf)*np.cos(yf)<br>yt = np.sin(yf)<br>zt = np.cos(xf)*np.cos(yf)<br>xt = xt/zt<br>yt = yt/zt<br><span class="hljs-comment"># 校正畸变</span><br>r2=xt**<span class="hljs-number">2</span>+yt**<span class="hljs-number">2</span><br>xt = xt*(<span class="hljs-number">1</span>+k1*r2+k2*r2**<span class="hljs-number">2</span>)<br>yt = yt*(<span class="hljs-number">1</span>+k1*r2+k2*r2**<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h3 id="二、估计最佳变换矩阵"><a href="#二、估计最佳变换矩阵" class="headerlink" title="二、估计最佳变换矩阵"></a>二、估计最佳变换矩阵</h3><p>首先是求单应变换的方法，对于方程式 Ah &#x3D; 0， 最佳解 h 是 ATA 具有最小特征值的特征向量，其中 AT是 A 的转置。根据线性代数知识，A 的右奇异向量是 ATA 的特征向量 。所以，求右奇异向量就可以了。通过调用<code>np.linalg.svd()</code>,实现矩阵的SVD分解。A矩阵如图所示</p><img src="/img/Ajuzhen.jpg" class="" title="[A矩阵]"><p>之后是使用RANSAC估计最佳变换矩阵。判断使用平移变换还是仿射变换，执行步骤</p><blockquote><p>首先，它随机抽出一组最小的特征匹配对（对于平移变换只需要一个匹配对， 对于单应映射需要四个匹配对），估计相应的变换矩阵（对齐）（在单应映射时调用 computeHomography）， 然后调用 getInliers 获取与当前运动估计一致的特征匹配索引； 在重复试验之后， 选择具有最大内点数量的运动估计，并使用 LeastSquaresFit 来对这一最大内点集合计算两幅图间的变换 M。  </p></blockquote><p>代码请自行查看。</p><h3 id="三、融合图像"><a href="#三、融合图像" class="headerlink" title="三、融合图像"></a>三、融合图像</h3><blockquote><p>[TODO 8]给定图像和变换矩阵， 求出应用变换后图像的框。（imageBoundingBox）<br>[TODO 9]根据每幅图像的边框（使用 imageBoundingBox），计算出最终拼接图像的大小以及它们在全景图中的绝对位移。（getAccSize）  </p></blockquote><p>注意变换矩阵要齐次化，否则会失败</p><blockquote><p>[TODO 10]然后，将每个图像重新映射到其最终位置（此处需要使用反向卷绕）， 并将其与<br>相邻图像融合。  </p></blockquote><p>在这一步上纠结了将近一周，原因是没有注意到要用反向卷绕。反向卷绕是遍历生成图像的每个点，用变换矩阵的逆矩阵求出点在原图像的坐标，用这样的反向卷绕能很好的解决插值问题（直接在变换时加个参数就好）。如果是正向卷绕，生成图像上会有很多点被漏掉，再自己做插值处理就比较麻烦。</p><p>之后就是规范化和处理漂移问题。漂移这里我直接用了一个投影矩阵来实现生成图像的修正。</p><p>最终结果：<br>平移(translation)</p><img src="/img/yosemite_translation.jpg" class="" title="[translation]"><p>单应(homography)</p><img src="/img/yosemite_homography.jpg" class="" title="[homography]"><p>360度全景图</p><img src="/img/campus__translation.jpg" class="" title="[campus]"><p>代码地址：<br><a href="https://github.com/Xiayue09/VisionExp">https://github.com/Xiayue09/VisionExp</a></p>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资治通鉴笔记（汉高后-武帝）</title>
    <link href="/2019/12/29/tongjian/"/>
    <url>/2019/12/29/tongjian/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/%E6%B1%89%E5%B9%B6%E5%A4%A9%E4%B8%8B.jpg" alt="资治通鉴笔记（汉高后-武帝）"></p><p>开学时从图书馆一排资治通鉴中抽出来了一本，断断续续读了两个月，大概读了一半。感觉这样没有目标的阅读是抓不到重点的。总归还是记了点什么，稍稍整理一下。这一卷起自汉高后（卷十三），终于汉宣帝（卷二十七），中华书局版。在网上也找到了不错的版本。</p><h2 id="一、楚汉的新理解"><a href="#一、楚汉的新理解" class="headerlink" title="一、楚汉的新理解"></a>一、楚汉的新理解</h2><p>这部分是从另一本书上看到的，觉得很有意思就记了下来。</p><p><strong>1.项羽是楚国没落贵族，刘邦是个人冒险主义者。</strong><br/>项羽的八千子弟是贵族兵，是精英团体。作战能力强，但八千个兵死一个少一个。<br/>刘邦的军队是流民，难民，人多，战斗力差但可以源源不断地补充。</p><p><strong>2.目标不同</strong><br/>作为楚的贵族后裔，项羽的目标是当西楚霸王，解放楚国，继续搞封建制。他要做的是齐桓公晋文公，成就霸业。所以对他来说，为啥要统一呢？消灭暴秦各回各家不好吗？在他看来首先他是个楚国人，没事跑外地当皇帝干什么。不如回家。更推出一个结论 ，虽然秦在表面上统一了，但各个诸侯国的人还是认为自己是齐国人楚国人赵国人。尤其是楚国人，楚国本来就不是周王分封的，天下对他来说就是全世界，他只想守着他的地盘就好了。这就是我们先入为主容易产生的误区，我们看历史觉得统一是必然的，项王肯定也想统一，也想争天下，其实并不一定。</p><p><strong>3.项王不想定都中原，就如麦克阿瑟没有当天皇，苏联没有定都柏林一样。他们——尤其是他们贵族，文化认同上是楚国的。</strong><br/>所以彭城之战楚军长途奔袭，以少胜多。这是原生贵族军的谢幕。项羽逆统一帝国大势，想继续做诸侯王，想成就霸业，想召集诸侯开大会，他尽力了，他失败了。自此以后，原生的贵族没了。秦汉最怕的是山东豪强，六国后裔，那些曾经的贵族们。然后郡县制搞起，土地私有了，兼并开始，地主出现，新的士大夫阶级来到庙堂之上。家臣没了，贵族没了，现在是皇帝与士大夫治天下的新时代，不再是封邦建国公侯伯子男的分封制时代。</p><h2 id="二、题外话"><a href="#二、题外话" class="headerlink" title="二、题外话"></a>二、题外话</h2><p>先抛开正文，说说资治通鉴</p><h3 id="1-司马光的结衔"><a href="#1-司马光的结衔" class="headerlink" title="1.司马光的结衔"></a>1.司马光的结衔</h3><p>因为修资治通鉴的时间太久了（19年），司马光在每卷编撰完成时的署名有所不同。刚开始是[<strong>朝散大夫右谏议大夫权御史中丞充理检使上护军赐紫金鱼袋臣司马光</strong>]，官职几经变动，到后来[<strong>端明殿学士兼翰林侍读学士朝散大夫右谏议大夫充集贤殿修撰权判西京留司御史台上柱国河内郡开国侯食邑一千三百户食实封四百户赐紫金鱼袋臣司马光</strong>]，再之后还有若干种结衔。</p><p>有够长，其中有贴职有本官有差遣有散阶有爵位有食邑，大约解释一下：</p><ul><li>端明殿学士：馆职（贴职），嘉奖文臣以示恩典，无实际工作</li><li>翰林侍读学士：差遣（正式工作），经筵官，给天子讲论经史</li><li>朝散大夫：文散阶，有名无职，决定官服颜色。朝散大夫正五品下，正常只能穿绯色官服。</li><li>右谏议大夫： 本官，也叫寄禄官，决定品级与俸禄</li><li>充集贤殿修撰：馆职（贴职），嘉奖文臣以示恩典，无实际工作。充，低官高配称充</li><li>权判西京留司御史台：差遣（正式工作），在西京留司御史台工作。权，代理；判，以高官配低职称判；西京，北宋指西京洛阳</li><li>上柱国：勋，虚衔，勋级十二转制</li><li>河内郡开国侯：爵位</li><li>食邑一千三百户：食邑</li><li>食实封四百户：食实封</li><li>赐紫金鱼袋：特赐可穿紫色官服，佩金鱼袋</li></ul><h3 id="2-太岁纪年"><a href="#2-太岁纪年" class="headerlink" title="2.太岁纪年"></a>2.太岁纪年</h3><p>汉纪五，起阏逢摄提格，尽昭阳大渊献，凡十年。 <br/>在每一卷的开头，总有这样一句。这是用太岁纪年法表示的年份，但据说在这里只是给干支纪年换了个名字。 《尔雅‧释天》 这样写的：</p><blockquote><p>“大岁在甲曰阏逢．在乙曰旃蒙．在丙曰柔兆．在丁曰强圉．在戊曰著雍．在己曰屠维．在庚曰上章．在辛曰重光．在壬曰玄黓．在癸曰昭阳．岁阳．</p><p>大岁在寅曰摄提格．在卯曰单阏．在辰曰执徐．在巳曰大荒落．在午曰敦牂．在未曰协洽．在申曰涒滩．在酉曰作噩．在戌曰阉茂．在亥曰大渊献．在子曰困敦．在丑曰赤奋若．”</p></blockquote><p>具体解释可以参考知乎 <a href="https://www.zhihu.com/question/38602831">https://www.zhihu.com/question/38602831</a> </p><h3 id="3-正朔"><a href="#3-正朔" class="headerlink" title="3.正朔"></a>3.正朔</h3><p>周秦汉（汉武帝太初前）的一年都是从十月开始，直到汉武帝太初元年改正朔，用太初历，一年才从正月开始。</p><h2 id="三、汉高后"><a href="#三、汉高后" class="headerlink" title="三、汉高后"></a>三、汉高后</h2><p><em>太后议欲立诸吕为王，问右丞相陵。</em><br/>高祖刑白马与群臣盟曰：［非刘氏不王，非有功不侯］，王陵不同意。太后去问陈平周勃，说可以。<br/>陈平周勃（对王陵）曰 <em>于今，面折廷争，臣不如君；全社稷，定刘氏之后，君亦不如臣</em></p><blockquote><p>少帝寖长，自知非皇后子，乃出言曰：“后安能杀吾母而名我！我壮，即为变”*</p></blockquote><p>然后就领了便当。还是太年轻了。<br/>吕后有政治手段，吕家有势力，足以保护太子，对抗功臣，守护刘氏江山。这才是刘邦选择刘盈为太子而非如意的根本原因。然而吕后上台必然会培养自己的势力，怎么防止刘氏江山改为吕氏江山？有人说，刘邦封刘恒为代王就考虑到了这些。</p><p>吕后死后，齐王、琅琊王一起起义，给诸侯王发书，陈诸吕之罪，欲举兵诛之<br><em>吕禄吕产将兵南北军，欲作乱，内惮绛候，朱虚等，外畏齐楚兵。</em><br/><em>太尉以一节入北军一呼，士皆左袒，为刘氏，判诸吕。</em></p><p>这种状况吕家不反也不行，可惜时势不佳，吕氏被诛全族。群臣迎代王刘恒入京（原因：刘邦之子，年长，妻子家人老实）。刘恒左右担心功臣势大，劝刘恒先静观其变。（怕去了被欺负）<br/><em>中尉宋昌进曰：“群臣之议皆非也。夫秦失其政，诸侯豪桀并起，人人自以为得之者以万数，然卒践天子之位者，刘氏也，天下绝望，一矣。高帝封王子弟，地犬牙相制，此所谓盘石之宗也，天下服其强，二矣。汉兴，除秦苛政，约法令，施德惠，人人自安，难动摇，三矣。夫以吕太后之严，立诸吕为三王，擅权专制，然而太尉以一节入北军，一呼士皆左袒，为刘氏，叛诸吕，卒以灭之。此乃天授，非人力也。今大臣虽欲为变，百姓弗为使，其党宁能专一邪？方今内有朱虚、东牟之亲，外畏吴、楚、淮南、琅邪、齐、代之强。方今高帝子独淮南王与大王，大王又长，贤圣仁孝，闻于天下，故大臣因天下之心而欲迎立大王，大王勿疑也。</em><br/>这段分析很有意思，功臣虽然势大，但百姓弗为使。刘恒进京，内有亲信外有各地刘姓诸侯王，根本不用怕功臣。</p><p><em>夜，拜宋昌为卫将军，镇抚南北军。有司分部诛灭梁、淮阳、恒山王及少帝于邸。文帝还坐前殿，夜，下诏书赦天下。</em><br/>少帝伏诛，文帝即位。</p><h2 id="四、文帝"><a href="#四、文帝" class="headerlink" title="四、文帝"></a>四、文帝</h2><p>春正月，有司请蚤建太子。文帝很会装：这显得我不德～你看我季父楚王，我兄弟吴王淮南王，我现在要立太子，不就说我私心很重忘了有德之人吗？<br/>有司固请，搬出来高帝往事，上乃许之。</p><p>文帝越来越熟练了，问右丞相绛候周勃：天下一岁决狱几何，一岁钱谷入几何，勃不知。问左丞相陈平，陈平说：有主者，廷尉，治粟内史。<br/><em>上曰：苟各有主者，而君所主者何事也？</em><br/><em>平谢曰：陛下不知其驽下，使待罪宰相。宰相者，上佐天子，理阴阳，顺四时；下遂万物之宜，外镇抚四夷诸侯，内亲附百姓，使卿大夫各得其职焉。</em></p><p>贾谊上书，重农抑商。<br/><em>九月，诏曰：【农，天下之大本也，民所恃以为生也；而民或不务本而事末，故生不遂。朕尤其然，故今兹亲率群臣农以劝之；其赐天下民今年田租之半】</em></p><p><strong>淮南王自作法令</strong></p><blockquote><p>淮南厉王长自作法令行于其国，逐汉所置吏，请自置相、二千石；帝曲意从之。又擅刑杀不辜及爵人至关内侯；数上书不逊顺。帝重自切责之，乃令薄昭与书风谕之，引管、蔡及代顷王、济北王兴居以为儆戒。</p><p>王不说，令大夫但、士伍开章等七十人与棘蒲侯柴武太子奇谋以辇车四十乘反谷口；令人使闽越、匈奴。事觉，有司治之；使使召淮南王。王至长安，丞相张苍、典客冯敬行御史大夫事，与宗正、廷尉奏：“长罪当弃市。”制曰：“其赦长死罪，废，勿王；徙处蜀郡严道邛邮。”尽诛所与谋者。载长以辎车，令县以次传之。</p><p>袁盎谏曰：“上素骄淮南王，弗为置严傅、相，以故致此。淮南王为人刚，今暴摧折之，臣恐卒逢雾露病死，陛下有杀弟之名，奈何？”上曰：“吾特苦之耳，今复之。”</p><p>淮南王果愤恚不食死。县传至雍，雍令发封，以死闻。上哭甚悲，谓袁盎曰：“吾不听公言，卒亡淮南王！今为奈何？”盎曰：“独斩丞相、御史以谢天下乃可。”上即令丞相、御史逮考诸县传送淮南王不发封馈侍者，皆弃市；以列侯葬淮南王于雍，置守冢三十户。</p></blockquote><ol><li>汉初的郡国并行制，中央给诸侯派太傅与相，还是有一定管辖权。</li><li>这弟弟怎么说反就反。</li><li>弟弟死了还要斩丞相御史谢天下。</li></ol><p>长沙贾谊又上书(陈政事疏，又名治安策)</p><blockquote><p>臣窃惟事势，可为痛哭者一，可为流涕者二，可为长太息者六，若其它背理而伤道者，难遍以疏举。</p><p><strong>今或亲弟谋为东帝，亲兄之子西乡而击；今吴又告矣。</strong>……然天下少安，何也？大国之王幼弱未壮，汉之所置傅、相方握其事。数年之后，诸侯之王大抵皆冠，血气方刚；汉之傅相称病而赐罢，彼自丞尉以上偏置私人；如此，有异淮南、济北之为邪！</p></blockquote><p>贾谊看到了诸侯国现在搞事，未来必还要搞事，也提出了类似推恩令的再分封，<strong>众建诸侯而少其力</strong>，空置少子的国君。可惜这条意见没有被采纳。为什么呢？今吴又告矣，简直预言了七国之乱，是时候未到不好下手？</p><p>晁错出来了。<br/><em>是故明君贵五谷而贱金玉</em><br/>天工开物的也是按这个顺序排的</p><p><em>夫卑身以事强，小国之形也；合小以攻大，敌国之形也；以蛮夷攻蛮夷，中国之形也。</em></p><p><em>民有歌淮南王者曰：一尺布，尚可缝；一斗粟，尚可舂；兄弟二人不相容！帝闻而病之</em><br/>你是不知道，后来比你这过分的事多了去…</p><br/><blockquote><p>十二年，其赐农民今年租税之半。<br>十三年，其除田之租税！</p></blockquote><p>直到景帝元年复收民田半租，三十而税一。真的是人少地多，与民休息，年年减税…</p><p>十四年，老上单于十四万骑入朝那、萧关，杀北地尉卬，虏人民畜产甚多；遂至彭阳，使奇兵入烧回中宫，候骑至雍甘泉。帝以中尉周舍、郎中令张武为将军，发车千乘、骑卒十万军长安旁，以备胡寇；上郡、北地、陇西，屯三郡。击匈奴，汉逐出塞即还，不能有所杀。</p><img src="/img/%E5%8C%97%E5%9C%B0%E5%AE%89%E5%AE%9A.jpg" class="" title="[北地安定]"><p>朝那，萧关，北地，彭阳地理位置在图中央，至于甘泉宫都在关中了。(这也算天子守国门了)</p><p><em>陛下虽得廉颇李牧，弗能用也。</em><br><em>公奈何众辱我，独无间处乎！</em><br><strong>我不要面子哒！</strong></p><p><em>初，张苍以为汉得水德，鲁人公孙臣以为汉当土德，其应，黄龙见。<br/>十五年，春，黄龙见成纪。帝召公孙臣，拜为博士，与诸生申明土德，草改历服色事</em><br><em>夏四月，上始幸雍，郊见五帝。</em></p><p>想要改正朔，易服色，这时候新垣平出现了（新垣竟然是个中国姓！），做五帝庙。后来发现被骗了，就再没提这事。</p><p>和亲，和亲，与南越改善关系<br/>周亚夫：<em>军中闻将军令，不闻天子之诏。</em><br>文帝篇结束。</p><h2 id="五、景帝"><a href="#五、景帝" class="headerlink" title="五、景帝"></a>五、景帝</h2><p>景帝即位，立太宗之庙，赦天下，和亲，收地租，周围人升官，皇子封王。常规操作。<br/>宠幸晁错，气死丞相，牛逼！<br/>梁孝王，千秋万岁后传与王，牛逼！（这是学你爹啊，登基了先把弟弟哄一哄）<br/>暴躁老哥，棋盘杀人，牛逼！（上一个拿棋盘劈头盖脸砸过来还是三体人…）</p><p>吴王<strong>即山铸钱，煮海为盐</strong>，有钱，反了。晁错惨。</p><p>又信方术，又杀方术，咋跟你爹一样呢</p><p>大概是预感到自己大限将至，杀周亚夫，给太子加冠。周亚夫，惨。<br/>太子即位，年十六。</p><h2 id="六、武帝"><a href="#六、武帝" class="headerlink" title="六、武帝"></a>六、武帝</h2><p>建元：<br>元鼎四年方得宝鼎，其实<strong>年号之起在元鼎</strong>，以此而言，之前的年号都是追认的。</p><p>董仲舒出现了，天子善其对，以仲舒为江都相。会稽庄助亦以贤良对策，天子擢为中大夫。<br>丞相卫绾请罢免所举，没几个月丞相就换人了。窦婴为丞相，田蚡为太尉，代赵绾为御史大夫，兰陵王臧为郎中令。俱好儒。</p><p><em>太皇窦太后好黄老言，不喜儒术。赵绾请毋奏事东宫。(长乐宫在东)，窦太后大怒曰：此欲复为新垣平邪？阴求得赵绾王臧姦利事，以让上。下绾臧吏皆自杀，丞相太尉免。</em><br/>这时候权力还在窦太后手中。<br/><em>堂邑侯陈午尚帝姑馆陶公主嫖，帝之为太子，公主有力焉；以其女为太子妃，及即位，妃为皇后。擅宠而无子，后宠浸衰。</em><br>皇太后劝到，新即位不要这么搞事情，你被立为太子有馆陶公主的功劳。</p><p><em>上祓霸上，还，过上姊平阳公主，悦讴者卫子夫(齐歌曰讴)。子夫母卫媪，平阳公主家僮也；主因奉送子夫入宫，恩宠日隆。陈皇后闻之，恚，几死者数矣；上俞怒。</em><br>馆陶公主想杀卫青，被救了下来。</p><p>有太皇太后在，刘彻很郁闷，整天偷跑出去打猎，后来想搞上林苑，东方朔来劝谏，于是<br><em>上乃拜朔为太中大夫，给事中赐黄金百斤，然遂其上林苑，如寿王所奏。</em><br>你说的很对，但是我拒绝。</p><p>建元二年因太皇太后罢丞相太尉，刘彻之后三年基本没做事，善待诸侯，每天打打猎，直到<strong>建元六年太皇太后崩</strong>，一个月后便再起用田蚡为丞相。然后忍不住发兵闽越。<br>议论议论还是和亲了</p><p>又开始打辩论，要不要趁和亲做掉单于，两方都说的很有道理，最后决定用一座城诈降设下伏兵。可惜没成功，单于发现不对跑了。于是就没得和亲了。关系紧张起来。</p><p>元光后期：</p><ol><li>出使南越，得<strong>蜀地杞酱</strong>，于是知道有一条大江从蜀地流向南越，就在夜郎附近。于是招抚西南夷，置郡县，大修路。这个有趣，可以参考马伯庸的这篇回答： <a href="https://www.zhihu.com/question/31197876">https://www.zhihu.com/question/31197876</a><br><em>发巴蜀卒治道，自僰道直指牂柯江，作者数万人。诏发卒万人治雁门阻险。</em></li><li>馆陶公主的面首 董偃，讨好武帝。女巫楚服胁陈皇后入媚道，张汤纠三百同党，废皇后。</li><li>匈奴扰边，派卫青、公叔敖、李广征讨，卫青胜了，另外两路败，治罪。</li></ol><p>巴蜀四郡，鑿山通<strong>西南夷</strong>，千余里戍转相饷。数岁，道不通，士罷饿、离暑湿死者甚重；西南夷又数反，发兵兴击，<strong>费以巨万而无功</strong>。</p><p><em>六年，大司农郑当时言：［穿渭为渠，下至河，槽关东粟径易，又可以溉渠下民田万余顷。］春，诏发卒数万人穿渠，如当时策；三岁而通，人以为便。</em><br>这时候就有往<strong>关中</strong>的<strong>漕运</strong>了。搞了好多大工程。</p><p>元朔元年，有太子，立卫夫人为皇后。<br>秋，匈奴二万骑入汉，杀辽西太守，略两千余人，又入渔阳、雁门，各杀略千余人。天子乃复召李广，拜为右北平太守。匈奴号曰汉之飞将军，避之，数岁不敢入右北平。</p><p><em>不可，夫匈奴，无城郭之居，委積之守，迁徙鸟举，难得而制也。轻兵深入，粮食必绝；踵粮以行，重不及事。得其地，不足以为利也；得其民，不可调而守也；胜必杀之，非民父母也；靡敝中国，快心匈奴，非良策也。</em></p><p>元朔，起用主父偃，主父偃谏伐匈奴书，北筑朔方郡，<strong>颁布推恩令</strong>，<strong>聚天下豪杰于茂陵</strong>。<br>主父偃本来游于齐燕赵，被排挤，这才西入关。这句话现在看起来好可怕。燕王因为偷父姬、弟妻，被上报到主父偃，燕王被自杀，国除；齐王与姊私通，主父偃想和齐王做亲家，不许，就自请为齐相来治理，王惧，自杀……赵王表示好怕怕。<br>结果主父偃被下狱，上欲不诛……公孙弘：<strong>陛下不诛偃，无以谢天下</strong>。于是族主父偃。<br/>好嘛，汉代的高官多少都被谢天下了。</p><p>接下来是张骞回来了。就读到了这里。</p>]]></content>
    
    
    <categories>
      
      <category>人文社科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>史部</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视觉实验二 特征检测与匹配</title>
    <link href="/2019/11/19/BlogVE2/"/>
    <url>/2019/11/19/BlogVE2/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/BlogVE2.png" alt="视觉实验二 特征检测与匹配"></p><p>可以看到这次实验大致上可以分为三部分：<br>特征检测、特征描述、特征匹配</p><h3 id="一、特征检测"><a href="#一、特征检测" class="headerlink" title="一、特征检测"></a>一、特征检测</h3><p>角点检测需要我们实现Harris角点检测功能<br>计算Harris的2*2矩阵,如图所示</p><img src="/img/harris.jpg" class="" title="[Harris]"><p>使用3*3的Sobel算子对图上每个点计算x方向与y方向导数，也就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">imx = np.zeros(srcImage.shape)<br>ndimage.sobel(srcImage, <span class="hljs-number">1</span>, imx)<br>imy = np.zeros(srcImage.shape)<br>ndimage.sobel(srcImage, <span class="hljs-number">0</span>, imy)<br></code></pre></td></tr></table></figure><p>超出边界默认为<code>reflect</code>模式。有了<code>Ixp</code>与<code>Iyp</code>，这之后直接使用高斯滤波，<code>sigma</code>设为0.5.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">wxx = ndimage.gaussian<span class="hljs-constructor">_filter(<span class="hljs-params">imx</span> <span class="hljs-operator">*</span> <span class="hljs-params">imx</span>, <span class="hljs-params">sigma</span>=0.5)</span><br>wxy = ndimage.gaussian<span class="hljs-constructor">_filter(<span class="hljs-params">imx</span> <span class="hljs-operator">*</span> <span class="hljs-params">imy</span>, <span class="hljs-params">sigma</span>=0.5)</span><br>wyy = ndimage.gaussian<span class="hljs-constructor">_filter(<span class="hljs-params">imy</span> <span class="hljs-operator">*</span> <span class="hljs-params">imy</span>, <span class="hljs-params">sigma</span>=0.5)</span><br></code></pre></td></tr></table></figure><p>这样就有了每个点的Harris矩阵值，根据要求计算角点强度与方向.</p><img src="/img/charris.jpg" class="" title="[C]"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">wdet = wxx * wyy - wxy ** <span class="hljs-number">2</span><br>wtr = wxx + wyy<br>harrisImage = wdet - <span class="hljs-number">0.1</span> * (wtr ** <span class="hljs-number">2</span>)<br>orientationImage = np.arctan2(imy, imx)* <span class="hljs-number">180.0</span> / np.pi<br></code></pre></td></tr></table></figure><p>注意这里的角度单位，<code>np.arctan2</code>计算出的是弧度制，转化为角度制。求出每个像素的角点强度与方向后，需要找到在每一个上下左右7*7矩阵中角点强度最大的点，这些点就是我们需要的特征点.（TODO2,3）<br>用到了最大过滤器<code>maximum_filter</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">destImage = np.zeros_like(harrisImage, np.<span class="hljs-built_in">bool</span>)<br>height = harrisImage.shape[<span class="hljs-number">0</span>]<br>width = harrisImage.shape[<span class="hljs-number">1</span>]<br>maxImage = ndimage.maximum_filter(harrisImage,<span class="hljs-number">7</span>)<br><span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">if</span>(harrisImage[h][w]==maxImage[h][w]):<br>            destImage[h][w]=<span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            destImage[h][w]=<span class="hljs-literal">False</span><br><span class="hljs-keyword">return</span> destImage<br></code></pre></td></tr></table></figure><p>使用<code>cv2.KeyPoint()</code>存储检测到的每一个特征点.</p><h3 id="二、特征描述"><a href="#二、特征描述" class="headerlink" title="二、特征描述"></a>二、特征描述</h3><p>实现两种特征描述符，一种是只考虑平移的简单描述符，一种是MOPS（方形，考虑平移旋转）<br>1.简单描述符，存储5*5邻域的强度值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">image = image.astype(np.float32)<br>image /= <span class="hljs-number">255.</span><br>grayImage = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)<br>height, width = image.shape[:<span class="hljs-number">2</span>]<br>desc = np.zeros((<span class="hljs-built_in">len</span>(keypoints), <span class="hljs-number">5</span> * <span class="hljs-number">5</span>))<br><span class="hljs-keyword">for</span> i, f <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(keypoints):<br>    x, y = f.pt<br>    x, y = <span class="hljs-built_in">int</span>(x), <span class="hljs-built_in">int</span>(y)<br>    num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">2</span>,<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">2</span>,<span class="hljs-number">3</span>):<br>            <span class="hljs-keyword">if</span>(y+j&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> y+j&gt;height-<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x+k&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> x+k&gt;width-<span class="hljs-number">1</span>):<br>                desc[i][num] = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">else</span>:<br>                desc[i][num] = grayImage[y+j][x+k]<br>            num+=<span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> desc<br></code></pre></td></tr></table></figure><p>2.MOPS描述符，用8*8矩阵存储角度强度朝向右方的40*40邻域</p><img src="/img/MOPS.jpg" class="" title="[MOPS]"><p>分别求出平移、旋转、缩放、平移的仿射变换矩阵，采用齐次坐标<br>第一步平移：让位于图像左上角的坐标(0,0)点移动到计算的中心像素上<br>第二步旋转：将图像绕中心像素旋转，让该点的角点方向朝右<br>第三步缩放：将图像缩小为1&#x2F;8<br>第四步平移：将原点坐标移动到中心像素8*8邻域的左上角像素<br>这样就可以读出该特征点的MOPS描述符（8*8矩阵）</p><p>注意，平移时是对坐标值进行操作，所以让(-4,-4)变为(0,0)是要加4，旋转角度用弧度制。将上述四个仿射矩阵倒序相乘，用<code>cv2.warpAffine</code>实现变换，将结果进行检验，也就是实验说明提到的<strong>将 8*8 图像块规范化为零均值和单位方差</strong>。</p><p>这句话很让人纠结，零均值和单位方差完全是字面意思上的翻译。查了后发现这在数据处理中叫做<strong>中心化</strong>（又叫零均值化）和<strong>标准化</strong>（又叫归一化）。前者是指，让每个数据减去平均值；后者则将中心化后的数据除以标准差。这样做的目的是得到均值为0，标准差为1的标准正态分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i, f <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(keypoints):<br>    x, y = f.pt<br>    x, y = <span class="hljs-built_in">int</span>(x), <span class="hljs-built_in">int</span>(y)<br>    transMx = np.zeros((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><br>    <span class="hljs-comment">#平移到目标像素</span><br>    t1 = np.array([-x,-y,<span class="hljs-number">1</span>])<br>    get_t1 = np.eye(<span class="hljs-number">3</span>)<br>    get_t1[:<span class="hljs-number">3</span>, <span class="hljs-number">2</span>] = t1<br><br>    <span class="hljs-comment">#旋转</span><br>    rot = -f.angle/<span class="hljs-number">180</span>*np.pi<br>    get_rot = np.array([[math.cos(rot), -math.sin(rot), <span class="hljs-number">0</span>],<br>                         [math.sin(rot), math.cos(rot), <span class="hljs-number">0</span>],<br>                         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br>    <span class="hljs-comment">#缩放(缩小五倍)</span><br>    get_scale = np.array([[<span class="hljs-number">0.2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                         [<span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0</span>],<br>                         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br><br>    <span class="hljs-comment">#平移</span><br>    t2 = np.array([<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>])<br>    get_t2 = np.eye(<span class="hljs-number">3</span>)<br>    get_t2[:<span class="hljs-number">3</span>, <span class="hljs-number">2</span>] = t2<br><br>    a = np.matmul(get_t2,get_scale)<br>    b = np.matmul(a,get_rot)<br>    c = np.matmul(b,get_t1)<br>    transMx = c[:<span class="hljs-number">2</span>,:]<br><br>    <span class="hljs-comment"># Call the warp affine function to do the mapping</span><br>    <span class="hljs-comment"># It expects a 2x3 matrix</span><br>    destImage = cv2.warpAffine(grayImage, transMx,<br>        (windowSize, windowSize), flags=cv2.INTER_LINEAR)<br>    mean = np.mean(destImage)<br>    variance = np.std(destImage)<br>    newdest = np.zeros(destImage.shape)<br>    <span class="hljs-keyword">if</span> variance&lt;<span class="hljs-number">0.00001</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        newdest = (destImage-mean)/variance<br>    desc[i]=newdest.flatten()<br><span class="hljs-keyword">return</span> desc<br></code></pre></td></tr></table></figure><h3 id="三、特征匹配"><a href="#三、特征匹配" class="headerlink" title="三、特征匹配"></a>三、特征匹配</h3><blockquote><p>下一步是编写匹配它们的代码（即，在一个图像中给定一个特征，在另一个图像中找到最佳匹配特征）。最简单的方法如下：比较两个特征并计算它们之间的标量距离，最佳匹配是距离最小的特征。 你将实现两个距离函数：</p><ol><li>平方差之和（SSD）：这是两个特征向量之间的欧氏距离平方。</li><li>比率测试：通过 SSD距离查找最近和次近的两个特征，比率测试距离是它们的比率（即，最接近的特征匹配的SSD距离除以第二接近的特征匹配的 SSD 距离）。<br>求欧氏距离的平方，使用scipy.spatial.distance.cdist()，再用np.argmin找到每个特征点的最小距离（也就是最佳匹配）</li></ol></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">de = spatial<span class="hljs-selector-class">.distance</span><span class="hljs-selector-class">.cdist</span>(desc1, desc2, metric=<span class="hljs-string">&#x27;euclidean&#x27;</span>)<br><span class="hljs-keyword">for</span> n, dee <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(de):<br>    d = cv2<span class="hljs-selector-class">.DMatch</span>()<br>    d<span class="hljs-selector-class">.queryIdx</span> = n<br>    m = np<span class="hljs-selector-class">.argmin</span>(de<span class="hljs-selector-attr">[n]</span>)<br>    d<span class="hljs-selector-class">.trainIdx</span> = <span class="hljs-built_in">int</span>(m)<br>    d<span class="hljs-selector-class">.distance</span> = de<span class="hljs-selector-attr">[n]</span><span class="hljs-selector-attr">[m]</span><br>    matches<span class="hljs-selector-class">.append</span>(d)<br>return matches<br></code></pre></td></tr></table></figure><p>如果是比例测试，则用最小除以第二小作为距离</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">de = spatial<span class="hljs-selector-class">.distance</span><span class="hljs-selector-class">.cdist</span>(desc1, desc2, metric=<span class="hljs-string">&#x27;euclidean&#x27;</span>)<br><span class="hljs-keyword">for</span> n, dee <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(de):<br>    d = cv2<span class="hljs-selector-class">.DMatch</span>()<br>    d<span class="hljs-selector-class">.queryIdx</span> = n<br>    m = np<span class="hljs-selector-class">.argmin</span>(de<span class="hljs-selector-attr">[n]</span>)<br>    d<span class="hljs-selector-class">.trainIdx</span> = <span class="hljs-built_in">int</span>(m)<br>    f1 = de<span class="hljs-selector-attr">[n]</span><span class="hljs-selector-attr">[m]</span><br>    de<span class="hljs-selector-attr">[n]</span><span class="hljs-selector-attr">[m]</span> = <span class="hljs-attribute">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)<br>    m = np<span class="hljs-selector-class">.argmin</span>(de<span class="hljs-selector-attr">[n]</span>)<br>    f2 = de<span class="hljs-selector-attr">[n]</span><span class="hljs-selector-attr">[m]</span><br>    d<span class="hljs-selector-class">.distance</span> = f1/f2<br>    matches<span class="hljs-selector-class">.append</span>(d)<br>return matches<br></code></pre></td></tr></table></figure><p>结果测试：</p><img src="/img/pipei.jpg" class="" title="[图像匹配]"><img src="/img/pipei2.jpg" class="" title="[图像匹配2]"><img src="/img/ROC.png" class="" title="[ROC]"><p>ROC曲线如图，AUC&#x3D; 0.903848</p><h3 id="四、自适应非最大抑制-ANMS"><a href="#四、自适应非最大抑制-ANMS" class="headerlink" title="四、自适应非最大抑制(ANMS)"></a>四、自适应非最大抑制(ANMS)</h3><p>在检测Harris角点（特征值）的时候，在最后加入自适应非最大抑制，让特征值的分布更加均匀。思路：取最大的特征值角点强度rmax，过滤出大于0.9rmax的强特征点，在剩下的角点中，以距强特征点的最小距离为半径r，将这些特征点降序排列，选r最大的若干个特征点。具体代码在github中找到。</p><img src="/img/harrisnoa.jpg" class="" title="[无ANMS]"><img src="/img/harriswitha.png" class="" title="[有ANMS]"><p>明显可以看到，使用了ANMS的特征点分布更加均匀。</p><p>代码地址：<br><a href="https://github.com/Xiayue09/VisionExp">https://github.com/Xiayue09/VisionExp</a><br>参考文章：<a href="https://www.cnblogs.com/naive/p/3579610.html">https://www.cnblogs.com/naive/p/3579610.html</a></p>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记-儒家思想中的政教关系</title>
    <link href="/2019/11/01/rujia/"/>
    <url>/2019/11/01/rujia/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/qiniandian.jpg" alt="笔记-儒家思想中的政教关系"></p><p>最近在读一些关于思想史的东西，做点笔记。<br>超越：名词，意思是不属于现实世界的领域，如精神、神话之类。<br>超越实体化：超越在现实世界的体现与化身。</p><h5 id="殷："><a href="#殷：" class="headerlink" title="殷："></a>殷：</h5><p>王是政教合一的领袖，只有商王可以通过祭祀先祖来祭祀上帝。上帝只不过是在另一领域，他不是无所不能的。<br>另：商、帝、辛 字形的相似</p><h5 id="西周："><a href="#西周：" class="headerlink" title="西周："></a>西周：</h5><p>发现了“<strong>天</strong>”、“<strong>天命</strong>”、“<strong>德性</strong>”的概念，天是无所不能的超越存在，天命是统治合法性的来源。统治者的德性决定了天命的归属。<strong>天厌商德</strong>，周王受命于天，成为人间的统治者。</p><h5 id="东周："><a href="#东周：" class="headerlink" title="东周："></a>东周：</h5><p>“天”这一概念在人间的化身与体现，称为天的超越实体化。礼乐制被赋予了新的意义，“<strong>礼以顺天</strong>”。<strong>阴阳五行</strong>的观念逐渐流行，<strong>万物相关相感</strong>，这都是天的规律。这时候的天子不仅仅要有好的德性，还要<strong>法天地</strong>，也就是遵行以阴阳五行四时四方为核心的宗教(礼乐)仪节。<br>德性的发展，出现以仁为代表的<strong>全德</strong>概念，在全德之中，政治又是核心。群体的德性必须要有政治的参与。<br>“天命扩大”，在天子以外，每个人的心灵可以直接与天沟通(孟·马丁路德·轲)<br>以上时期，政教未划出区别。天子既要施政，又要祭祀法天地。</p><h5 id="汉代："><a href="#汉代：" class="headerlink" title="汉代："></a>汉代：</h5><p>汉武帝独尊儒术，董仲舒将<strong>万物相感</strong>进一步发展为<strong>天人合一</strong>，丰收、异象、灾变都与人相关，与天子的德性相关。王是沟通天地人的枢纽，所以上天发怒的原因归结到王的身上。彗星来了，一定是王的原因。地震了，请王反思自己是否对天不敬。<br><strong>五德始终论</strong>将阴阳五行引入天人合一观念，王朝更迭也要遵行这样的规律。谶纬之学得到发展。<br><strong>政治伦理</strong>(君臣)与<strong>家庭伦理</strong>(父子夫妇)被视为天道的一部分，被<strong>神圣化</strong>，不得违背。<br>虽然儒学出自孔子，孔子被称为<strong>素王</strong>，但在此时君王承担了教化和祭祀中心的地位，可以<strong>主持和裁决儒生会议</strong>，石渠阁会议与白虎观会议最终由皇帝来拍板。儒学为政治服务，为统治服务。</p><h5 id="宋明："><a href="#宋明：" class="headerlink" title="宋明："></a>宋明：</h5><blockquote><p>宇宙之间一理而已。天得之而为天，地得之而为地，凡生于天地之间者，又各得之以为性；其张之为三纲，其纪之为五常，盖皆此理之流行，无所适而不在。</p></blockquote><p>自韩愈以来，儒学重新复苏，变“我注六经”为“<strong>六经注我</strong>”。朱熹在法统（王位传承）之外发现了<strong>道统</strong>（”圣教“传承），即“<em>三代-周公-孔子-曾子-子思-孟子-二程</em>”这一传承链条，并对三代以来的君主统治感到悲观。政教二元已呼之欲出。<br>可惜朱熹将三代以来法统与道统分离视为三代以下堕落黑暗的根源，一心恢复三代的<strong>圣王之治</strong>，也就是让君主身兼精神领袖（圣）与政治领袖（王），继续神圣化礼教来维持统治，将君主视为宇宙秩序的一块神圣空间（<strong>建皇级</strong>），提倡通过<strong>经筵教育</strong>让君主达到圣王的要求。法统与道统在君师不分时得到统一。以此来看，<strong>政教仍然是一体的</strong>。<br>三代圣王之治的尧舜禹，根据儒家经典是先为圣、后为王的。然而在家天下的现实中，皇位是由血缘传下去的。因此即使是欲恢复三代的朱熹也只能放弃圣王，转而投向先王后圣（也就是经筵教育）。<br>此时的儒学由官方转向民间，各个派别的争斗辩论不再由君主定夺。</p><h5 id="近代的碰撞："><a href="#近代的碰撞：" class="headerlink" title="近代的碰撞："></a>近代的碰撞：</h5><p>晚清士大夫宋育仁说，</p><blockquote><p>其（指西学）用心尤在破中国祖先之言，为以彼教易名教之助，<strong>天为无物</strong>，<strong>地与五星同为地球</strong>，俱由吸力相引，则天尊地卑之说为诬，肇造天地之主可信，乾坤不成，两大阴阳，无分贵贱，<strong>日月星不为三光，五星不配五行</strong>，七曜拟于不伦，上祀诬而无理，<strong>六经皆虚言，圣人为妄作</strong>。据此为本，则人身无上下，推之则家无上下，国无上下，<strong>从发源处决去天尊地卑，则一切平等，男女均有自由主权，妇不统于夫，子不制于父，族性无别，人伦无处立根，举宪天法地，顺阴阳，陈五行诸大义，一扫而空…</strong></p><p>夫人受中天地，秉秀五行，其降曰命，<strong>人与天息息相通</strong>。天垂象见，吉凶儆人，改过迁善，故谈天之学以推天象，知人事为考验，以畏天命，修人事为根本，以阴阳消长，五行生胜建皇极，敬五事为作用，<strong>如彼学所云，则一部周易全无是处，洪范五行，春秋灾异，皆成瞽说，中国所谓圣人者，亦无知妄人耳</strong>，学术日微，为异域所劫，学者以耳为心，视为无关要义，从而雷同附和，人欲塞其源，而我为操畚，可不重思之乎？</p></blockquote><p>象天法地，五德始终，五星七曜，天人感应，纲常名教，沉浸在这样世界观中的中国人突然有一天被告知，天是假的，天命是假的，地和五星一样是个球，都因为引力绕着太阳转，彗星和日食都是有规律的，和君主的德性一点关系都没有，尚书的阴阳五行都是胡扯，一部周易全无用处，圣贤也是无知的妄人。以天朝上国而自居的我们在那些”蛮夷“眼中是没有步入文明社会的半开化野蛮人，天地没有尊卑，三纲五常并非普世真理。</p><p>以此来看，晚晴以来对传统的抨击与反思也是无可非议的。</p><p>参考——《<strong>幽暗意识与时代探索</strong>》，张灏</p>]]></content>
    
    
    <categories>
      
      <category>人文社科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>史部</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视觉实验一 混合图像</title>
    <link href="/2019/10/06/BlogVE1/"/>
    <url>/2019/10/06/BlogVE1/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/BlogVE1.jpg" alt="视觉实验一 混合图像"></p><p>目标是将用低通滤波与高通滤波处理的图像混合，生成新的图像。该图像放大时看到的以高频信号为主，缩小时看到的以低频信号为主，呈现出两种图像。实验需要通过python、numpy、OpenCV，设计函数实现图像卷积、高斯模糊、得到滤波处理后的图像。不能使用已有的卷积与滤波函数。</p><p>这个项目需要实现 5 个函数，每个函数都建立在前面函数的基础上:</p><ol><li>cross_correlation_2d ：互相关函数</li><li>convolve_2d ：卷积函数</li><li>gaussian_blur_kernel_2d ：产生高斯核函数</li><li>low_pass ：图像与高斯核卷积，实现低通滤波</li><li>high_pass ：图像减去低通滤波，实现高通滤波</li></ol><h3 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h3><p>首先是安装python(这里使用的是python3)<br>安装pip，再通过pip安装numpy与opencv-python以及pillow<br>当然也可以使用conda或直接安装Anaconda<br>IDE我用的是pycharm</p><h3 id="二、互相关函数"><a href="#二、互相关函数" class="headerlink" title="二、互相关函数"></a>二、互相关函数</h3><p>这个函数是难度最大的部分，写出了这个函数剩下的就简单多了。为了方便测试，将test.py的互相关测试部分提取出来边做边测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pylab <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 生成大小两张灰度二维数组(图像)，</span><br>small_height = <span class="hljs-number">10</span><br>small_width = <span class="hljs-number">8</span><br>height = <span class="hljs-number">50</span><br>width = <span class="hljs-number">40</span><br>big_img_grey = np.random.rand(height,width)<br>small_img_grey = np.random.rand(small_height,small_width)<br>img_rgb = np.random.rand(height,width,<span class="hljs-number">3</span>)<br><br><br>identity = np.zeros((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br>identity[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br><br>img = big_img_grey.copy()<br><br></code></pre></td></tr></table></figure><p><strong>numpy与图像处理基础：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-comment">#导入图像</span><br>img = plt.imread(<span class="hljs-string">&#x27;test.jpg&#x27;</span>)<br><br><span class="hljs-comment">#绘出图像</span><br>plt.imshow(img)<br>plt.show()<br><br><span class="hljs-comment">#图像的存储结构是一个numpy数组，灰度图是二维数组(高、宽)，RGB图是三维数组（长、宽、色彩通道）</span><br><span class="hljs-built_in">print</span>(img.shape) <span class="hljs-comment">#输出为（高，宽，通道）</span><br><span class="hljs-built_in">print</span>(img) <span class="hljs-comment">#输出数组内容</span><br><br><span class="hljs-comment"># numpy对图像的基本处理</span><br>height = img.shape[<span class="hljs-number">0</span>]<br>width = img.shape[<span class="hljs-number">1</span>]<br>img = img[:,:,<span class="hljs-number">0</span>] <span class="hljs-comment">#图像分割/分通道</span><br><span class="hljs-built_in">print</span>(img.ndim) <span class="hljs-comment">#n维数组</span><br><span class="hljs-built_in">print</span>(img.dtype) <span class="hljs-comment">#值的类型</span><br><br><span class="hljs-comment"># numpy生成数组</span><br>img1 = np.zeros(im.shape) <span class="hljs-comment">#生成一个结构与img相同，值全为0的数组</span><br>img2 = np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))) <span class="hljs-comment">#生成一个结构为3*3，值全为1的二维数组</span><br>img3 = np.random.rand(height,width) <span class="hljs-comment">#生成一个结构为height*width，值为0~1随机数的二维数组</span><br><br><span class="hljs-comment"># 通道分离与合成</span><br>b,g,r=cv2.split(img) <span class="hljs-comment">#b,g,r分别对应Blue，Green，Red通道的图像</span><br>new_img = cv2.merge([b,g,r]) <span class="hljs-comment">#将分离为b，g，r的通道的图像合并</span><br></code></pre></td></tr></table></figure><p>先从简单的让灰度图像向右平移一个像素写起。<br><br>基本思路：生成一个3&amp;#42;3的数组，其[0,1]值为1，剩下值为0。让灰度图中以每个像素为中心的3&amp;#42;3图像与该数组做互相关运算（超出图像边界取零），得到的结果填入新的图像中对应位置。</p><p>测试成功后，将灰度图像换成RGB图像，加入通道分离与合并的部分，这样互相关函数就算做完了。<br><br><br><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cross_correlation_2d</span>(<span class="hljs-params">img, kernel</span>):<br>    height = img.shape[<span class="hljs-number">0</span>]<br>    width = img.shape[<span class="hljs-number">1</span>]<br>    new_img = np.zeros((height, width))<br><br>    Channel = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> img.ndim == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        Channel = <span class="hljs-literal">True</span><br>        b, g, r = cv2.split(img)<br>        new_img_1 = np.zeros((height, width))<br>        new_img_2 = np.zeros((height, width))<br>        new_img_3 = np.zeros((height, width))<br><br>    identity = kernel.copy()<br><br>    id_height = identity.shape[<span class="hljs-number">0</span>]<br>    id_width = identity.shape[<span class="hljs-number">1</span>]<br>    id_go_height = id_height // <span class="hljs-number">2</span><br>    id_go_width = id_width // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">xg</span>(<span class="hljs-params">a, v</span>):<br>        sum0 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a.flat, v.flat):<br>            sum0 += x * y<br>        <span class="hljs-keyword">return</span> sum0<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">former_img</span>(<span class="hljs-params">h, w, <span class="hljs-built_in">id</span>, img</span>):<br>        new_value_sum = np.zeros(<span class="hljs-built_in">id</span>.shape)<br>        hh = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> nh <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h - id_go_height, h + id_go_height + <span class="hljs-number">1</span>):<br>            ww = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> nw <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w - id_go_width, w + id_go_width + <span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> (nh &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> (nh &gt;= height) <span class="hljs-keyword">or</span> (nw &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> (nw &gt;= width):<br>                    new_value_sum[hh][ww] = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">else</span>:<br>                    new_value_sum[hh][ww] = img[nh][nw]<br>                ww += <span class="hljs-number">1</span><br>            hh += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> new_value_sum<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_img</span>(<span class="hljs-params">identity, im</span>):<br>        new_image = np.zeros((height, width))<br>        <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, height):<br>            <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, width):<br>                v = former_img(h, w, identity, im)<br>                <span class="hljs-comment"># print(v)</span><br>                value = xg(former_img(h, w, identity, im), identity)<br>                <span class="hljs-comment"># print(value)</span><br>                new_image[h][w] = value<br>        <span class="hljs-keyword">return</span> new_image<br><br>    <span class="hljs-keyword">if</span> Channel:<br>        new_img_1 = run_img(identity, b).copy()<br>        new_img_2 = run_img(identity, g).copy()<br>        new_img_3 = run_img(identity, r).copy()<br>        new_img = cv2.merge([new_img_1, new_img_2, new_img_3])<br>    <span class="hljs-keyword">else</span>:<br>        new_img = run_img(identity, img)<br>    <span class="hljs-keyword">return</span> new_img<br></code></pre></td></tr></table></figure><h3 id="三、产生高斯核的函数"><a href="#三、产生高斯核的函数" class="headerlink" title="三、产生高斯核的函数"></a>三、产生高斯核的函数</h3><p>根据公式写出lambda表达式，其中π是np.pi，e是np.e，注意高斯核要求的和为1.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gaussian_blur_kernel_2d</span>(<span class="hljs-params">sigma, height, width</span>):<br>    g_function = <span class="hljs-keyword">lambda</span> s, x, y: (<span class="hljs-number">1</span> / (<span class="hljs-number">2</span> * np.pi * s ** <span class="hljs-number">2</span>)) * np.e ** (-<span class="hljs-number">1</span> * (x ** <span class="hljs-number">2</span> + y ** <span class="hljs-number">2</span>) / (<span class="hljs-number">2</span> * s ** <span class="hljs-number">2</span>))<br>    kernel = np.zeros((height, width))<br>    go_height = height // <span class="hljs-number">2</span><br>    go_width = width // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span> - go_height, go_height + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span> - go_width, go_width + <span class="hljs-number">1</span>):<br>            kernel[h + go_height][w + go_width] = g_function(sigma, w, h)<br><br>    change = <span class="hljs-number">1.0</span> / np.<span class="hljs-built_in">sum</span>(kernel)<br>    kernel *= chang<br>    <span class="hljs-keyword">return</span> kernele<br></code></pre></td></tr></table></figure><p>剩下的两个函数就非常简单了，其实整个实验做下来也不是特别难，对numpy更熟悉了一些。</p><p>完整的代码放在github上<br><a href="https://github.com/Xiayue09/VisionExp">https://github.com/Xiayue09/VisionExp</a></p>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring初探-核心特性与解耦</title>
    <link href="/2019/08/31/Springchutan/"/>
    <url>/2019/08/31/Springchutan/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/BlogSpring.jpg" alt="Spring初探-核心特性与解耦"></p><p>Spring用<code>JavaBean</code>来表示应用组件，<code>JavaBean</code>在此处指的是<code>POJO</code>，即简单老式java对象。</p><p>Spring通过以下四个方面简化java开发：</p><ul><li>基于POJO的轻量级和最小侵入性编程</li><li>通过依赖注入和面向接口实现松耦合</li><li>基于切面和惯例进行声明式编程</li><li>通过切面和模板减少样板式代码</li></ul><p>依赖注入：<strong>DI</strong>  面向切面编程：<strong>AOP</strong></p><p>Spring不强迫使用接口或类，在Spring应用中通常看不到使用了Spring的痕迹</p><h3 id="用依赖注入让对象间松散耦合："><a href="#用依赖注入让对象间松散耦合：" class="headerlink" title="用依赖注入让对象间松散耦合："></a>用依赖注入让对象间松散耦合：</h3><p>为了摆脱对象间的紧耦合，使用DI，依赖关系将被自动注入到需要他们的对象中。<br>构造器注入，也就是构造器传入一个大的类的对象，具有该类接口的类就可以传入（注入），不用调用其他对象。使用时用传入的就可以。以书上代码为例，两个类分别为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.springinaction.knights;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BraveKnight</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Knight</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Quest quest;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BraveKnight</span><span class="hljs-params">(Quest quest)</span> &#123;<br>    <span class="hljs-built_in">this</span>.quest = quest;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">embarkOnQuest</span><span class="hljs-params">()</span> &#123;<br>    quest.embark();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.springinaction.knights;<br><br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SlayDragonQuest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Quest</span> &#123;<br><br>  <span class="hljs-keyword">private</span> PrintStream stream;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SlayDragonQuest</span><span class="hljs-params">(PrintStream stream)</span> &#123;<br>    <span class="hljs-built_in">this</span>.stream = stream;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">embark</span><span class="hljs-params">()</span> &#123;<br>    stream.println(<span class="hljs-string">&quot;Embarking on quest to slay the dragon!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果一个对象只通过接口（而不是具体实现或初始化过程）来表明依赖关系，呢么这种依赖就能够在对象本身毫不知情的情况下，用不同的具体实现进行替换。</p><p>使用依赖注入需要两个额外文件，一个是表明协作关系的装配文件（xml或java），另一个是应用上下文Main，用来创建和组装对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">      http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;knight&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.springinaction.knights.BraveKnight&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;quest&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;quest&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.springinaction.knights.SlayDragonQuest&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#&#123;T(System).out&#125;&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>二者都被声明bBean，在这里的BraveKnight在构造时传入了对SlayDragonQuest bean的引用，作为构造器的参数。</p><p>疑惑 如果id唯一，怎么实现的不同的依赖注入，一个id可以对应多个class？或者说不同的类用同一个借口进行依赖注入是否必要？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.springinaction.knights;<br><br><span class="hljs-keyword">import</span> org.springframework.context.support.<br>                   ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KnightMain</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<br>            <span class="hljs-string">&quot;META-INF/spring/knights.xml&quot;</span>);<br>    <span class="hljs-type">Knight</span> <span class="hljs-variable">knight</span> <span class="hljs-operator">=</span> context.getBean(Knight.class);<br>    knight.embarkOnQuest();<br>     context.close();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这是基于XML文件创建的应用上下文。调用该应用上下文获得了一个ID为knight的bean，这个类只是用来执行embarkOnQuest()方法，不知道是哪个对象来执行。（这说的还是有点绕啊。。）</p><h3 id="面向切片编程，将服务模块化"><a href="#面向切片编程，将服务模块化" class="headerlink" title="面向切片编程，将服务模块化"></a>面向切片编程，将服务模块化</h3><p>在实际使用中，有很多服务如安全、日志、事务管理都是所有应用要用到的。面向切片编程(AOP)可以把它们变成切面覆盖在组件上，以声明的方式存在。</p><blockquote><p>骑士不该去管理吟游诗人。吟游诗人该做好自己的事。</p></blockquote><p><strong>在配置文件声明切面:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;minstrel&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.springinaction.knights.Minstrel&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#&#123;T(System).out&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;minstrel&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;embark&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *.embarkOnQuest(..))&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;embark&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;singBeforeQuest&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;embark&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;singAfterQuest&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>先定义一个bean，再aop命名空间定义切点，切点前通知，切点后通知</p><h4 id="此外还有通过模块封装来消除样板代码"><a href="#此外还有通过模块封装来消除样板代码" class="headerlink" title="此外还有通过模块封装来消除样板代码"></a>此外还有通过模块封装来消除样板代码</h4><p>比如JDBC的样板代码</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p><strong>参考：Spring实战（第四版） 人民邮电出版社</strong></p><p>具体的Spring学习在之后更新。（希望如此）</p><p>关于配置环境：有了maven后果然简单多了，参照Spring官网：<a href="https://spring.io/guides/gs/intellij-idea/">https://spring.io/guides/gs/intellij-idea/</a></p><p>遇到了非常坑的一件事情：我的mavensetting中用了镜像但却在注释里。。。于是怎么都装不上依赖包。</p><p>最后附上Spring框架的结构图</p><img src="/img/spring%E7%BB%84%E4%BB%B6.png" class="" title="[Spring]">]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL安装排错</title>
    <link href="/2019/05/12/MySQL/"/>
    <url>/2019/05/12/MySQL/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/mysql.jpg" alt="MySQL安装排错"></p><p>在Windows上使用了msi安装MySQL2.0的版本，结果出了问题。主要报错原因是Data文件夹以及8.0版本的MySQL配置程序自动创建了一个MySQL服务引起的。记录下安装的步骤及排错过程。</p><h3 id="1-运行安装程序"><a href="#1-运行安装程序" class="headerlink" title="1. 运行安装程序"></a>1. 运行安装程序</h3><p>打开<code>mysql-installer-community-8.0.16.0.msi</code>，默认安装。</p><p>在这一步中程序会自动生成一个服务并让你配置，我当时并没有意识到这是一个服务，所以后来又重复了创建新的服务的步骤。</p><h3 id="2-配置环境，创建my-ini文件。"><a href="#2-配置环境，创建my-ini文件。" class="headerlink" title="2. 配置环境，创建my.ini文件。"></a>2. 配置环境，创建my.ini文件。</h3><p>根据教程，在环境变量中添加MySQL Server 8.0目录，并在此目录下创建一个<code>my.ini</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># 设置3306端口</span><br>port=3306<br><span class="hljs-comment"># 设置mysql的安装目录</span><br>basedir=C:\\Program Files\\MySQL\\MySQL Server 8.0   <span class="hljs-comment"># 切记此处一定要用双斜杠\\，单斜杠我这里会出错，不过看别人的教程，有的是单斜杠。自己尝试吧</span><br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br>datadir=C:\\Program Files\\MySQL\\MySQL Server 8.0\\Data   <span class="hljs-comment"># 此处同上</span><br><span class="hljs-comment"># 允许最大连接数</span><br>max_connections=200<br><span class="hljs-comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br>max_connect_errors=10<br><span class="hljs-comment"># 服务端使用的字符集默认为UTF8</span><br>character-set-server=utf8<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br>default-storage-engine=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br>default_authentication_plugin=mysql_native_password<br>[mysql]<br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br>default-character-set=utf8<br>[client]<br><span class="hljs-comment"># 设置mysql客户端连接服务端时默认使用的端口</span><br>port=3306<br>default-character-set=utf8<br></code></pre></td></tr></table></figure><p>不要自己创建Data文件夹！！！<br><br>不要自己创建Data文件夹！！！<br><br>不要自己创建Data文件夹！！！</p><h3 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3. 启动服务"></a>3. 启动服务</h3><p>控制台输入<code>mysqld -install与mysqld  --initialize</code>，启动服务命令<code>net start mysql</code>，报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">MySQL 服务正在启动 ..<br>MySQL 服务无法启动。<br><br>服务没有报告任何错误。<br><br>请键入 NET HELPMSG 3534 以获得更多的帮助。<br></code></pre></td></tr></table></figure><p>查看记录，输入<code>mysqld -console</code>，获得以下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Program Files\MySQL\MySQL Server 8.0\bin&gt;mysqld --console<br>2019-05-11T04:20:13.041783Z 0 [System] [MY-010116] [Server] C:\Program Files\MySQL\MySQL Server 8.0\bin\mysqld.exe (mysqld 8.0.16) starting as process 19832<br>2019-05-11T04:20:13.044980Z 0 [Warning] [MY-013242] [Server] --character-set-server: <span class="hljs-string">&#x27;utf8&#x27;</span> is currently an <span class="hljs-built_in">alias</span> <span class="hljs-keyword">for</span> the character <span class="hljs-built_in">set</span> UTF8MB3, but will be an <span class="hljs-built_in">alias</span> <span class="hljs-keyword">for</span> UTF8MB4 <span class="hljs-keyword">in</span> a future release. Please consider using UTF8MB4 <span class="hljs-keyword">in</span> order to be unambiguous.<br>2019-05-11T04:20:15.076636Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.<br>2019-05-11T04:20:15.078181Z 0 [ERROR] [MY-010262] [Server] Can<span class="hljs-string">&#x27;t start server: Bind on TCP/IP port: 通常每个套接字地址(协议/网络地址/端 口)只允许使用一次。</span><br><span class="hljs-string"></span><br><span class="hljs-string">2019-05-11T04:20:15.078189Z 0 [ERROR] [MY-010257] [Server] Do you already have another mysqld server running on port: 3306 ?</span><br><span class="hljs-string">2019-05-11T04:20:15.094148Z 0 [ERROR] [MY-010119] [Server] Aborting</span><br><span class="hljs-string">2019-05-11T04:20:16.309270Z 0 [System] [MY-010910] [Server] C:\Program Files\MySQL\MySQL Server 8.0\bin\mysqld.exe: Shutdown complete (mysqld 8.0.16)  MySQL Community Server - GPL.</span><br></code></pre></td></tr></table></figure><p>很明显出错原因就是服务中现在有了配置产生的网络服务<strong>mysql80</strong>与自己创建的本地服务<strong>mysql</strong>共用同一个端口3306，于是删除网络服务<strong>mysql80</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Program Files\MySQL\MySQL Server 8.0\bin&gt;sc delete mysql80<br>[SC] DeleteService 成功<br></code></pre></td></tr></table></figure><p>删除后在<code>管理-&gt;服务</code>中仍然看到了正在运行的mysql80，停止它，重新运行net start mysql，运行成功，mysql80消失不见。</p><p>此外，如果出现报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Program Files\MySQL\MySQL Server 8.0\bin&gt;mysql -u root -p<br>Enter password: ************<br>ERROR 2003 (HY000): Can<span class="hljs-string">&#x27;t connect to MySQL server on &#x27;</span>localhost<span class="hljs-string">&#x27; (10061)</span><br></code></pre></td></tr></table></figure><p>其原因是没有start服务.<br></p><p>启动服务后的操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Program Files\MySQL\MySQL Server 8.0\bin&gt;mysql -u root -p<br>Enter password: ************<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection <span class="hljs-built_in">id</span> is 8<br>Server version: 8.0.16<br><br>Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>. Type <span class="hljs-string">&#x27;\c&#x27;</span> to clear the current input statement.<br><br>mysql&gt; ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;新密码&#x27;</span>;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></td></tr></table></figure><p>到此，即完成了安装与配置。</p>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git的操作</title>
    <link href="/2018/11/19/Git/"/>
    <url>/2018/11/19/Git/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/git.jpg" alt="Git的操作"></p><p>Git是很好用的项目管理工具，记录下它的常用操作。</p><h3 id="一、创建仓库"><a href="#一、创建仓库" class="headerlink" title="一、创建仓库"></a><strong>一、创建仓库</strong></h3><ol><li>选择一个空目录（不要包含中文）</li><li>通过<code>git init</code>命令把它变为仓库：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git init<br><br>Initialized empty Git repository <span class="hljs-keyword">in</span> <span class="hljs-regexp">/Users/mi</span>chael<span class="hljs-regexp">/learngit/</span>.git/<br></code></pre></td></tr></table></figure><strong>提示：</strong> 不要用记事本编辑.txt(Windows会在首位加上一串0xefbbbf（十六进制）的字符)</li></ol><p>Git仅支持纯文本文档（文本文档、程序代码等的改动控制，不支持图片视频以及word文档。）</p><h3 id="二、添加文件"><a href="#二、添加文件" class="headerlink" title="二、添加文件"></a><strong>二、添加文件</strong></h3><p>在该目录下或子目录下新建文件readme.txt，输入一些字符。</p><p>执行添加文件命令：<code>git add</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ git <span class="hljs-built_in">add</span> readme.txt<br></code></pre></td></tr></table></figure><p>没有错误提示，即为成功。<br>然后是提交到仓库：<code>git commit -m&quot; &quot;</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git commit -m <span class="hljs-string">&quot;wrote a readme file&quot;</span><br><br>[<span class="hljs-keyword">master</span> <span class="hljs-title">(root-commit</span>) eaadf4e] wrote a readme file<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">2</span> insertions(+)<br> create mode <span class="hljs-number">100644</span> readme.txt<br></code></pre></td></tr></table></figure><p>-m 后为本次提交的说明，可以为任何字符。<br>提示一个文件修改，添加了一行。</p><h3 id="三、版本回滚"><a href="#三、版本回滚" class="headerlink" title="三、版本回滚"></a><strong>三、版本回滚</strong></h3><p><code>git status</code>可以用来查看工作区状态，当前状态下有哪些文件是有修改的、没有提交的。<br/><br><code>git diff &lt;file&gt;</code>可以用来查看修改文件有何不同</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ git status<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span> readme.txt <br></code></pre></td></tr></table></figure><p>添加过的文件修改后直接git commit即可。</p><h4 id="查看提交日志：git-log"><a href="#查看提交日志：git-log" class="headerlink" title="查看提交日志：git log"></a><strong>查看提交日志</strong>：<code>git log</code></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ git log<br><span class="hljs-keyword">commit</span> e09483d6b5d75a3d5f848eeb708a36e61cd4307c (HEAD <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> master)<br>Author: xywang <span class="hljs-operator">&lt;</span>xywang99<span class="hljs-variable">@outlook</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>:   Sat Nov <span class="hljs-number">3</span> <span class="hljs-number">16</span>:<span class="hljs-number">54</span>:<span class="hljs-number">05</span> <span class="hljs-number">2018</span> <span class="hljs-operator">+</span><span class="hljs-number">0800</span><br><br>    <span class="hljs-keyword">new</span> <span class="hljs-keyword">add</span> test<br><br><span class="hljs-keyword">commit</span> <span class="hljs-number">4078</span>d72ac69eb23969e77e579a85ee988d1a62ea<br>Author: xywang <span class="hljs-operator">&lt;</span>xywang99<span class="hljs-variable">@outlook</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>:   Sat Nov <span class="hljs-number">3</span> <span class="hljs-number">16</span>:<span class="hljs-number">05</span>:<span class="hljs-number">09</span> <span class="hljs-number">2018</span> <span class="hljs-operator">+</span><span class="hljs-number">0800</span><br><br>    the <span class="hljs-keyword">first</span> file<br></code></pre></td></tr></table></figure><p>其中commit后为版本号（自动生成的），并附有提交者、日期、描述信息。<br>只查看版本号与描述信息：加上<code>--pretty=oneline</code>参数<br>查看历史所有命令日志：<code>git reflog</code></p><h4 id="回退到上一个版本："><a href="#回退到上一个版本：" class="headerlink" title="回退到上一个版本："></a><strong>回退到上一个版本：</strong></h4><p>HEAD为当前版本，前一版本为HEAD^，前一百版本为HEAD~100<br>使用<code>git reset</code>命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ git reset <span class="hljs-comment">--hard HEAD^</span><br>HEAD <span class="hljs-keyword">is</span> now <span class="hljs-keyword">at</span> <span class="hljs-number">4078</span>d72 <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> <span class="hljs-built_in">file</span><br></code></pre></td></tr></table></figure><p>这样就回到了上一个版本。</p><h4 id="返回未来版本："><a href="#返回未来版本：" class="headerlink" title="返回未来版本："></a><strong>返回未来版本：</strong></h4><p>回到上一版本后，想要恢复之前的版本，则可以继续通过<code>git reset --hard</code>命令，不过需要把hard后的HEAD^换为版本号（通常只要输入版本号的前几位即可。）</p><p>如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard e094</span><br>HEAD <span class="hljs-keyword">is</span> now at e09483d <span class="hljs-built_in">new</span> <span class="hljs-keyword">add</span> test<br></code></pre></td></tr></table></figure><p>忘记版本号可以用<code>git reflog</code>查看。</p><h3 id="四、管理修改"><a href="#四、管理修改" class="headerlink" title="四、管理修改"></a><strong>四、管理修改</strong></h3><p>当修改过一个文件后，使用<code>git add</code>将其放入暂存区。再次修改后，使用<code>git commit</code>提交，发现提交的会是第一次修改的文件。这是因为提交的是暂存区的修改。<br>想要撤销修改时，用<code>git status</code>，会发现他会告诉你如何撤销：</p><h3 id="工作区的修改：-git-checkout-test-txt让文件回到最后一次commit或add。"><a href="#工作区的修改：-git-checkout-test-txt让文件回到最后一次commit或add。" class="headerlink" title="工作区的修改：  git checkout -- test.txt让文件回到最后一次commit或add。"></a><strong>工作区的修改：</strong>  <code>git checkout -- test.txt</code>让文件回到最后一次commit或add。</h3><h3 id="暂存区的修改：-执行命令git-reset-HEAD-test-txt"><a href="#暂存区的修改：-执行命令git-reset-HEAD-test-txt" class="headerlink" title="暂存区的修改：  执行命令git reset HEAD test.txt"></a><strong>暂存区的修改：</strong>  执行命令<code>git reset HEAD test.txt</code></h3><p>让暂存区的修改退回到工作区。</p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><strong>删除文件</strong></h4><p>在文件夹中删除文件后，在仓库中的删除需要以下命令：<br><code>git rm test.txt</code></p><p>如果删错了，使用<code>git checkout --test.txt</code>用版本库里的文件替换工作区文件。<br>但只能恢复到最后一次提交的状态。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><ol><li>在目录下使用<code>git init</code>初始化，建立仓库，生成.git文件夹</li><li>创建多个文件，使用<code>git add &lt;file&gt;</code>将工作区的文件一个个添加到缓存区</li><li>使用<code>git commit</code>将缓存区的文件提交</li><li><code>git status</code>查看当前状态，<code>git diff &lt;file&gt;</code>查看某一文件与仓库有何区别。</li><li><code>git log</code>查看历史修改记录，<code>git reflog</code>查看历史命令。</li><li>HEAD 为仓库中指向当前版本的指针，<code>git reset --hard HEAD^</code>返回上一个版本，<code>git reset --hard HEAD~100</code>返回上一百个版本，<code>git reset --hard XXX</code>重置为版本号为XXX的版本（无论是在此之前还是之后）</li><li><code>git checkout --&lt;file&gt;</code>让某文件回到上次add或commit状态。（发生修改和删除后），<code>git rm &lt;file&gt;</code>在仓库中删去文件。</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android/Activity,Intent,Context总结</title>
    <link href="/2018/09/30/Activity/"/>
    <url>/2018/09/30/Activity/</url>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a><strong>一、简介</strong></h3><p><code>Activity</code>,即<strong>活动</strong>，<code>Android</code>四大组件之一。</p><blockquote><p>Android四大组件：<br>Activity, Service, BroadcastReciver, ContentProvider.</p></blockquote><p>一个应用通常由多个彼此松散联系的 Activity组成。</p><p>当新 Activity启动时，前一Activity便会停止，但系统会在<strong>返回栈</strong>中保留该Activity。 当新Activity启动时，系统会将其推送到返回栈上，并取得用户焦点。 返回栈遵循<strong>后进先出</strong>堆栈机制。</p><p><strong>注意：返回栈是每个任务单独含有的，与任务管理器不同</strong></p><img src="/img/diagram_backstack.png" class="" title="[返回栈]"><h3 id="二、生命周期"><a href="#二、生命周期" class="headerlink" title="二、生命周期"></a><strong>二、生命周期</strong></h3><p>Activity的生命周期相关方法包括：</p><ul><li>onCreate()：创建时调用</li><li>onStart()：处于可见状态调用</li><li>onResume(): 处于焦点时调用（初次启动、弹窗消失）</li><li>onPause(): 失去焦点但依旧可见时调用（出现弹窗）</li><li>onStop(): 不在最顶层不可见时调用（新activity、home键）</li><li>onDistory: 退出时调用（back键）</li></ul><img src="/img/activity_lifecycle.png" class="" title="[生命周期]"><p>官方文档描述：</p><blockquote><p>Activity 的<strong>整个生命周期</strong>发生在 onCreate() 调用与 onDestroy() 调用之间。您的 Activity 应在 onCreate() 中执行“全局”状态设置（例如定义布局），并释放 onDestroy() 中的所有其余资源。例如，如果您的 Activity 有一个在后台运行的线程，用于从网络上下载数据，它可能会在 onCreate() 中创建该线程，然后在 onDestroy() 中停止该线程。</p></blockquote><blockquote><p>Activity的<strong>可见生命周期</strong>发生在 onStart() 调用与 onStop() 调用之间。在这段时间，用户可以在屏幕上看到 Activity 并与其交互。 例如，当一个新 Activity 启动，并且此 Activity 不再可见时，系统会调用 onStop()。您可以在调用这两个方法之间保留向用户显示 Activity 所需的资源。 例如，您可以在 onStart() 中注册一个 BroadcastReceiver 以监控影响 UI 的变化，并在用户无法再看到您显示的内容时在 onStop() 中将其取消注册。在 Activity 的整个生命周期，当 Activity 在对用户可见和隐藏两种状态中交替变化时，系统可能会多次调用 onStart() 和 onStop()。</p></blockquote><blockquote><p>Activity 的<strong>前台生命周期</strong>发生在 onResume() 调用与 onPause() 调用之间。在这段时间，Activity 位于屏幕上的所有其他 Activity 之前，并具有用户输入焦点。 Activity 可频繁转入和转出前台 — 例如，当设备转入休眠状态或出现对话框时，系统会调用 onPause()。 由于此状态可能经常发生转变，因此这两个方法中应采用适度轻量级的代码，以避免因转变速度慢而让用户等待。</p></blockquote><h4 id="协调不同Activity生命周期："><a href="#协调不同Activity生命周期：" class="headerlink" title="协调不同Activity生命周期："></a><strong>协调不同Activity生命周期：</strong></h4><p>当一个Activity启动另一个Activity时，有如下顺序：</p><ol><li>Activity A 的 onPause() 方法执行。</li><li>Activity B 的 onCreate()、onStart() 和 onResume() 方法依次执行。（Activity B 现在具有用户焦点。）</li><li>如果 Activity A 在屏幕上不再可见，则其 onStop() 方法执行。</li></ol><h3 id="三、任务与状态保存"><a href="#三、任务与状态保存" class="headerlink" title="三、任务与状态保存"></a><strong>三、任务与状态保存</strong></h3><ul><li>一个返回栈即一个任务（即使他们可能来自不同的应用）。</li><li>当用户按下<em>back</em>键，栈顶的Activity被销毁，前一个Activity恢复执行（并恢复其UI状态（滚动位置与已输入表单的文本））。</li><li>当用户按下<em>Home</em>键或开启新任务，原任务执行<code>onStop()</code>，保存原有的返回栈并后台运行。再次启动则回到前台，原有的返回栈不变。</li><li>当一个Activity不在前台时（即onStop()），系统可能会为了回收资源完全销毁该Activity。故应该在Activity中实现<code>onSaveInstanceState()</code>来保留其状态。并且若用户长时间离开任务，系统会清除除根Activity外的所有Activity。可用属性修改此行为。具体见<a href="https://developer.android.com/guide/components/tasks-and-back-stack?hl=zh-cn#Clearing">官方文档</a>。</li></ul><p>onSaveInstanceState()的用法：</p><blockquote><p>系统会先调用 onSaveInstanceState()，然后再使 Activity 变得易于销毁。系统会向该方法传递一个 Bundle，您可以在其中使用 putString() 和 putInt() 等方法以名称-值对形式保存有关 Activity 状态的信息。然后，如果系统终止您的应用进程，并且用户返回您的 Activity，则系统会重建该 Activity，并将 Bundle 同时传递给 onCreate() 和 onRestoreInstanceState()。您可以使用上述任一方法从 Bundle 提取您保存的状态并恢复该 Activity 状态。如果没有状态信息需要恢复，则传递给您的 Bundle 是空值。</p></blockquote><p><strong>默认实现</strong>通过调用View.onSaveInstanceState()保存具有id的视图的状态，并保存其id。重写此方法时注意调用它的超类来保存数据。</p><h3 id="四、启动模式"><a href="#四、启动模式" class="headerlink" title="四、启动模式"></a><strong>四、启动模式</strong></h3><p>Android提供4种启动方式：</p><ul><li>标准模式（Standard）</li><li>栈顶复用模式（SingleTop）：在顶部启动自身时不再实例化新的Activity。</li><li>栈内复用模式（SingleTask）：存在这样的Activity（无论在不在这一个任务中），则将它的任务拿来放在栈顶。</li><li>单例模式（SingleInstance）：该Activity所在任务中只有自身，打开新的Activity都是新建单独的栈。</li></ul><img src="/img/diagram_backstack_singletask_multiactivity.png" class="" title="[栈内复用]"><p>以上模式皆在<code>AndroidMainifest</code> <code>launchMode</code> 属性定义。<br>或使用<code>intent</code>设置标记位</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">intent</span>.addFlags(<span class="hljs-keyword">Intent</span>.FLAG_ACTIVITY_NEW_TASK);<br></code></pre></td></tr></table></figure><p>此方法优先级高于AndroidMainifest</p><table><thead><tr><th>Intent 标志</th><th>作用</th></tr></thead><tbody><tr><td>FLAG_ACTIVITY_SINGLE_TOP</td><td>与SingleTop相同</td></tr><tr><td>FLAG_ACTIVITY_NEW_TASK</td><td>与SingleTask相同</td></tr><tr><td>FLAG_ACTIVITY_CLEAR_TOP</td><td>销毁当前任务顶部的所有 Activity，使所需Activity置顶</td></tr><tr><td>FLAG_ACTIVITY_CLEAR_TOP 通常与 FLAG_ACTIVITY_NEW_TASK 结合使用。</td><td></td></tr></tbody></table><h3 id="五、数据传递与返回"><a href="#五、数据传递与返回" class="headerlink" title="五、数据传递与返回"></a><strong>五、数据传递与返回</strong></h3><p>Android使用Intent在Activity中启动新Activity，分为显式与隐式两种.</p><h5 id="显式："><a href="#显式：" class="headerlink" title="显式："></a><strong>显式：</strong></h5><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Intent</span> <span class="hljs-keyword">intent</span> = new <span class="hljs-keyword">Intent</span>(Context,<span class="hljs-keyword">Class</span>);<br>startActivity(<span class="hljs-keyword">intent</span>);<br></code></pre></td></tr></table></figure><h5 id="隐式："><a href="#隐式：" class="headerlink" title="隐式："></a><strong>隐式：</strong></h5><p>根据操作让其他适合的应用处理它，如分享操作.</p><blockquote><p>创建隐式 Intent 时，Android 系统通过将 Intent 的内容与在设备上其他应用的清单文件中声明的 Intent 过滤器进行比较，从而找到要启动的相应组件。 如果 Intent 与 Intent 过滤器匹配，则系统将启动该组件，并向其传递 Intent 对象。 如果多个 Intent 过滤器兼容，则系统会显示一个对话框，支持用户选取要使用的应用。通过为 Activity 声明 Intent 过滤器，可以使其他应用能够直接使用某一特定类型的 Intent 启动 Activity.</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// Create the text message with a string</span><br>Intent sendIntent = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Intent()</span>;<br>sendIntent.set<span class="hljs-constructor">Action(Intent.ACTION_SEND)</span>;<br>sendIntent.put<span class="hljs-constructor">Extra(Intent.EXTRA_TEXT, <span class="hljs-params">textMessage</span>)</span>;<br>sendIntent.set<span class="hljs-constructor">Type(<span class="hljs-string">&quot;text/plain&quot;</span>)</span>;<br><br><span class="hljs-comment">// Verify that the intent will resolve to an activity</span><br><span class="hljs-keyword">if</span> (sendIntent.resolve<span class="hljs-constructor">Activity(<span class="hljs-params">getPackageManager</span>()</span>) != null) &#123;<br>    start<span class="hljs-constructor">Activity(<span class="hljs-params">sendIntent</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动Activity可以带有操作，如<code>ACTION_VIEW</code>, <code>ACTION_SEND</code>. 通过<code>setAction()</code>设置其操作常量，前者为调用其他应用显式某信息，后者为通过Intent共享数据。此外还有<code>ACTION_EDIT</code>等.</p><h4 id="数据传递："><a href="#数据传递：" class="headerlink" title="数据传递："></a><strong>数据传递：</strong></h4><p>设置数据uri调用<code>setData()</code>，设置MIME类型调用<code>setType()</code>，同时设置时务必调用<code>setDataAndType()</code>.<br>Intent还可以携带特定的Extra。如上例中使用<code>putExtras()</code>，每个方法均接受两个参数：键名与值。</p><h4 id="启动Activity更常用的方法："><a href="#启动Activity更常用的方法：" class="headerlink" title="启动Activity更常用的方法："></a><strong>启动Activity更常用的方法：</strong></h4><p>为了使启动Activity更加稳定安全，一般可以在要启动的Activity中写一个方法，在该方法内实现intent与启动。则在要启动它时只需在上一个Activity中调用该方法并传入必需的参数即可。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void action<span class="hljs-constructor">Start(Context <span class="hljs-params">context</span>, String <span class="hljs-params">data</span>)</span>&#123;<br>    Intent intent = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Intent(<span class="hljs-params">context</span>,SecondActivity.<span class="hljs-params">class</span>)</span>;<br>    intent.put<span class="hljs-constructor">Extra(<span class="hljs-string">&quot;text&quot;</span>,<span class="hljs-params">data</span>)</span>;<br>    context.start<span class="hljs-constructor">Activity(<span class="hljs-params">intent</span>)</span>;<br>    &#125;<br><span class="hljs-comment">// 所需参数为Context与Extra的String.</span><br></code></pre></td></tr></table></figure><p>Activity中调用方法：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">SecondActivity</span><span class="hljs-operator">.</span><span class="hljs-variable">actionStart</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Context</span><span class="hljs-operator">,</span><span class="hljs-built_in">String</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><p>即可启动新的Activity。</p><h5 id="构建Intent过滤器："><a href="#构建Intent过滤器：" class="headerlink" title="构建Intent过滤器："></a><strong>构建Intent过滤器：</strong></h5><p>在清单文件中使用 <code>&lt;intent-filter&gt; </code>元素为每个应用组件声明一个或多个 Intent 过滤器。<br>使用一下一个或多个指定要接受的Intent类型。</p><p><code>&lt;action&gt;</code>:<br>在 name 属性中，声明接受的 Intent 操作。该值必须是操作的文本字符串值，而不是类常量。</p><p><code>&lt;category&gt;</code>:<br>在 name 属性中，声明接受的 Intent 类别。该值必须是操作的文本字符串值，而不是类常量。必须将CATEGORY_DEFAULT 设置为category的一部分，否则Intent将不会对他解析</p><p><code>&lt;data&gt;</code>:<br>使用一个或多个指定数据 URI 各个方面（scheme、host、port、path 等）和 MIME 类型的属性，声明接受的数据类型。<br>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;ShareActivity&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.SEND&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:mimeType</span>=<span class="hljs-string">&quot;text/plain&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="六、处理配置变更"><a href="#六、处理配置变更" class="headerlink" title="六、处理配置变更"></a><strong>六、处理配置变更</strong></h3><p>运行时变更包括以下类型，在发生这些变更时系统会重启正在运行的应用，并通过onSaveInstanceState()恢复之前状态。</p><img src="/img/configuration.png" class="" title="[配置变更]"><p>如果不希望这样做，有两种选择：</p><h4 id="1-当配置改变时维持一个对象"><a href="#1-当配置改变时维持一个对象" class="headerlink" title="1.当配置改变时维持一个对象"></a>1.当配置改变时维持一个对象</h4><p>如果数据很多，它们不会都放bundle中，那么加载起来就会影响到用户体验。</p><h4 id="2-阻止系统重启，自己处理"><a href="#2-阻止系统重启，自己处理" class="headerlink" title="2.阻止系统重启，自己处理"></a>2.阻止系统重启，自己处理</h4><p>这种技术应该被视为最后的手段，对于大多数应用程序不建议使用。<br>具体方法参考<a href="https://developer.android.com/guide/topics/resources/runtime-changes#RetainingAnObject">官方文档</a>，遇到相关问题再进行总结。</p><h3 id="七、Context"><a href="#七、Context" class="headerlink" title="七、Context"></a><strong>七、Context</strong></h3><p>在Android开发中经常遇到Context这一抽象类。通俗来说，Context便是场景，有时也被译作上下文。它包括这个应用、活动、服务、广播接收器、内容提供器的所有资源。<br>为了让系统能够顺利回收内存，避免内存泄漏，就需要在传Context时使用当前组件类型的Context。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a><strong>后记</strong></h3><p>写总结虽然累了些，但能对知识查漏补缺、建立体系，加深理解并且可供以后的查阅复习，实为一种好方法。<br>可就是太累了啊！！！两天一篇效率好低…<br><strong>参考：</strong><br>官方文档：<a href="https://developer.android.com/guide/components/activities?hl=zh-cn">https://developer.android.com/guide/components/activities?hl=zh-cn</a><br>《Android基础：最易懂的Activity启动模式详解》：<a href="https://www.jianshu.com/p/399e83d02e33">https://www.jianshu.com/p/399e83d02e33</a><br>《Android插件化基础2—-理解Context》：<a href="https://www.jianshu.com/p/e6ce2d03f8f9">https://www.jianshu.com/p/e6ce2d03f8f9</a></p>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从神探夏洛克到失落的潼关古城</title>
    <link href="/2018/05/16/tongguan/"/>
    <url>/2018/05/16/tongguan/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/chen.jpg" alt="从神探夏洛克到失落的潼关古城"></p><h3 id="一切的开端"><a href="#一切的开端" class="headerlink" title="一切的开端"></a>一切的开端</h3><p>寒假期间，曾趁着下雪到西安碑林看风景。在那里，一块石刻的地图引起了我的注意。</p><p>这块地图位于碑林第四陈列室，室内另有宋代以来著名书法家如黄庭坚米芾等人真迹，可以做拓片，故而有很大一股油墨味。除去碑帖，陈列室里还有几块石刻地图，包括北宋吕大防所主持雕刻的长安图残片、太极宫残片、兴庆宫图，也包括这除碑石本体外没有任何标识的石刻图。（局部如下）</p><p><img src="/img/map2.jpg" alt="map2"><br><img src="/img/map3.jpg" alt="map3"><br><img src="/img/map4.jpg" alt="map4"><br>在这张不只是何时何地镌刻的地图上，我发现了熟悉的苏州码子！<br><img src="/img/hangzhou.jpg" alt="suzhou"><br><img src="/img/slock.jpg" alt="mazi"></p><h3 id="何为苏州码子？"><a href="#何为苏州码子？" class="headerlink" title="何为苏州码子？"></a>何为苏州码子？</h3><blockquote><p>苏州码子，也叫草码，花码、番仔码、商码。是中国早期民间的“商业数字”。我国在商周时期已出现记数的符号，但在很长时期内并未形成一套完整的用于记数和演算的数码。至唐代才开始用数码记数，宋元时期逐步得到完善，其使用也更加普遍。</p></blockquote><p>苏州码子表示方法如下：</p><table><thead><tr><th>苏州码子</th><th>阿拉伯数字</th></tr></thead><tbody><tr><td>〡</td><td>1</td></tr><tr><td>〢</td><td>2</td></tr><tr><td>〣</td><td>3</td></tr><tr><td>〤</td><td>4</td></tr><tr><td>〥</td><td>5</td></tr><tr><td>〦</td><td>6</td></tr><tr><td>〧</td><td>7</td></tr><tr><td>〨</td><td>8</td></tr><tr><td>〩</td><td>9</td></tr><tr><td>十</td><td>10</td></tr></tbody></table><p>而在地图上，明显可以看到有用苏州码子来标注的距离（圆圈的）。大概“去”代表长度，“濶”为宽度。<br><img src="/img/map3q.jpg" alt="map3q"><br>根据标注的地名（方框的）看起来不像是西安的地图。<br>于是乎出于对地图描绘的地点的好奇，我把它拍了下来，回家抽空再看。</p><h3 id="地图初探"><a href="#地图初探" class="headerlink" title="地图初探"></a>地图初探</h3><p>首先，从地名入手，通过搜索来找到这些地方在哪。然而地图上所标注的地名，大多是全国各地随处可见的名字。排除这些诸如<code>南街</code>、<code>城北一阡</code>、<code>教场北阡</code>或是<code>柳家园</code>、<code>王家壕</code>、<code>咸水井</code>的名字，尝试用“吊桥”、“南坡子”、“桥子口（并不是西大街的桥梓口）”进行搜索，毫无所获。后在地图上发现城隍庙与关帝庙二处以及“港口”这么一个意味不明的地方，更是不明白了。</p><p>仔细观察地图，又发现了一处自然景物，“匼河”。百度出来如下结果：</p><p><img src="/img/kehe.png" alt="kehe"></p><p>于是就把视线聚焦于风陵渡——陕、晋、豫的交界处。</p><h3 id="港口寻津"><a href="#港口寻津" class="headerlink" title="港口寻津"></a>港口寻津</h3><p>在发现了匼河后，对该地的寻找却又一次陷入僵局。我没有发现其他有力的证据证明这个地方在哪，而且我并不能百分百确定中国只有那一个匼河村。或许在其他地方也有匼河，只是因为时间的流逝而变得无人知晓，或是像济河那样永远地消失。</p><p>除去自然景物，名称能一直保留下来的，或许还有那些被框柱的建筑。于是我仔细寻找地图上被方框框起的地方，但却发现，全国到处都有五龙宫，到处都有寿圣寺。对长兴堡和东滩地等也没有搜出什么结果。然后我看到了寺南寨子，进行搜索。</p><p>于是，我找到了这个</p><p><img src="/img/zhaizi.png" alt="zhaizi"></p><h4 id="那么，就到潼关看看吧"><a href="#那么，就到潼关看看吧" class="headerlink" title="那么，就到潼关看看吧!"></a><strong>那么，就到潼关看看吧!</strong></h4><p><img src="/img/gangkou.png" alt="gangkou"><br><img src="/img/tongguan.png" alt="tongguan"><br>在地图上确认了港口这个名字，然而这里距潼关县城却有一段距离。按照碑文所述，这个地方附近应该是有着城隍庙、关帝庙的城镇。幸运的是，我找到了这个。</p><p><img src="/img/guchengmap.jpeg" alt="guchengmap"></p><p>是的，在这张民国时期的地图上，可以看到有城隍庙与关帝庙的标注，而且这个潼关城，是在渭河边上的，也就是今天地图上标注为潼关古城的地方。</p><p>那之后发生了什么？现今的潼关县城为何比起民国时期向南移动了？</p><h3 id="搬走一座城"><a href="#搬走一座城" class="headerlink" title="搬走一座城"></a>搬走一座城</h3><blockquote><p>1954年，国家计委正式成立黄河规划委员会。1月，以苏联列宁格勒水电设计院副总工程师柯洛略夫为组长的苏联专家组来华。2月至6月，中苏专家120余人，行程12000余公里，进行黄河现场大查勘。苏联专家在查勘中肯定了三门峡坝址。<br>&lt;br &gt;<br>1956年，苏联列宁格勒水电设计分院提交设计报告，将水位在350米的基础上提高到360米，库区淹没农田面积由200万亩增加到325万亩，移民由58.4万人增加到87万人。 按照这个水位，附近的陕州古城、潼关古城、蒲州以及方圆百里的村庄均要沉没。在水库蓄水前，潼关等几个古城被迫不及待地拆掉了，居民也迁出了他们世代居住的家园。<br>&lt;br &gt;<br>1962年，大坝施工完成。当水库水位为332.5米时，黄河流量为2000秒立方。黄河水受到拦截后，在水库底部造成回水顶托，流速减缓，泥沙沉降，在渭河口形成“拦门沙”，渭河入黄河的堑口抬高，河底淤积的渭河成了悬河。一场大雨后，渭河淹没农田25万亩。如此，水库水位还未达到340米时，就出了严重的问题，三门峡不得不开闸泄洪，降低水位，同时大坝开始改建，高坝变中坝。1969年，三门峡开始第二次改建工程。当时国务院批准确定的非汛期水位为310米，比原设计低了50米,三门峡电站从计划的高水头改为低水头发电。 正是这几十米决定了潼关等几座古城的存亡。三门峡水电站建成后，水位从未到达过离大坝只有几公里的陕州古城，也从未到达过潼关老城，更未到达上游20公里处的蒲州、朝邑和蒲津渡。<br>&lt;br &gt;<br>这座古城死得不明不白：按照三门峡水库最初的规划，它应该静静地躺在水库下面。人，搬了；城，拆了。然而具有讽刺意味的是，三门峡蓄水后的水位，从来没有到达和淹没过潼关古城。</p></blockquote><p>这便是潼关古城消失的故事。</p><h3 id="回到地图"><a href="#回到地图" class="headerlink" title="回到地图"></a>回到地图</h3><p>最后，还是对那张石刻地图做一些小小的说明吧。<br>在图上辨认出了几个人的名字，于是搜索到了这篇博客：<br><a href="http://blog.sina.com.cn/s/blog_a332b01b0101l5hh.html">http://blog.sina.com.cn/s/blog_a332b01b0101l5hh.html</a></p><p>引一小部分内容如下：</p><blockquote><p>《三界图》是一幅灾后地籍图，所表示的地理位置十分特殊和独特。此图表示耕地的地区，处于陕、晋、豫三省交界的潼关城近郊。<br>&lt;br &gt;<br>在《三界图》右上方，有400多文字记载。详细说明了黄河泛滥时间及水淹灾情，以及为避免日后引起土地争议而著册立碑的情况：“道光二十二年六月二十九日，黄河西浸，崩塌我村堡寨、村庄，共九处；水田、井园、旱地、沙滩地亩共五百余顷。不数年间，胥移河东，欲渡河耕种，岂知新滩阴湿过盛，萌芽难生。缓待数载，恐其与邻村地界混迷，随鸣钟集众，谪议将所伤之地亩、村庄形式，并各阡长阔数目，著册、绘图、刊石，以防异日之用耳，当此时也”。<br>&lt;br &gt;<br>著册绘图、刻石年代，是黄河水灾两年之后，清朝道光二十四年二月二十五日立碑（公元1844年）。发起者为首事人王殿魁、王廷辅、柳若金，执笔者为铁笔赵廷兵。<br>此碑图高68厘米，宽120厘米。其范围位于潼关城之西，东接黄河、北靠渭河一带的村庄地籍详情。图上表示的耕地约有50余块，面积不同、形状类似（多为长方形）。全图覆盖面积，实地约有60多平方公里；涉及到实地耕地面积，约有30平方公里。</p></blockquote><p>另外，在潼关县志也有相关记载：<br><a href="http://www.sxsdq.cn/sqzlk/xbsxz/sxdyl/wns_16202/tgxz/201610/t20161025_730745.html">http://www.sxsdq.cn/sqzlk/xbsxz/sxdyl/wns_16202/tgxz/201610/t20161025_730745.html</a></p><p>的确是潼关了。<br>有兴趣的请自行查阅。由一块碑引发的折腾，到此为止。</p><p>以上。(写markdown还是累啊！</p>]]></content>
    
    
    <categories>
      
      <category>人文社科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>方志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A MAD A DAY（四月下）</title>
    <link href="/2018/05/07/AMADADAY2/"/>
    <url>/2018/05/07/AMADADAY2/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/shooting_star.jpg" alt="A MAD A DAY（四月下）"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=514774419&auto=0&height=66"></iframe><h3 id="4-21【AMV-x2F-玉子爱情故事】-Dandelion-x2F-蒲公英"><a href="#4-21【AMV-x2F-玉子爱情故事】-Dandelion-x2F-蒲公英" class="headerlink" title="4.21【AMV&#x2F;玉子爱情故事】 Dandelion &#x2F; 蒲公英"></a><strong>4.21【AMV&#x2F;玉子爱情故事】 Dandelion &#x2F; 蒲公英</strong></h3><p><a href="https://www.bilibili.com/video/av1968461">av1968461</a></p><p>很喜欢的MAD 综合评分5星。再看一遍发现的确是歌好听，虽然之后单独听起来没有好到那种程度。果然是声画组合的魅力！</p><p>调色很有感觉，镜头流畅转换流畅。是一个驾轻就熟的MADer将许多技巧自然地用上才能做得出来如此有感觉的作品。</p><p>这才叫做有剧情的mad！！一按下播放键就停不下来了，一气呵成行云流水。</p><ul><li>一开始没有声音！竟然是留声机启动才有声的！而且声音一开始是空灵而小的，插入了环境音效不让他单调。之后放大声音。果然声音也是可以变化的要素</li><li>然后是两个人走进咖啡店镜头的交错出现，声音一变，回忆开始（这里就没有按什么顺序编排，反而是从一个普通场景开始。）</li><li>然后两句歌词，两个人，自带闪光效果。之后很多镜头都有这样的小亮点的位移，很有意思，比如1:18的相对无言。即使是静态的图片素材，我们也要让它动起来，动起来才是动画，才能流畅，才能够让作品不单调乏味。</li><li>镜头的组织，要搞明白，是我在做MAD，而不是我在重现原作剧情和名场景。这篇中的末尾插入回忆就很好，如果是自己做出来的那更棒了。该怎么组织素材就是重点。</li><li>然后一组照片切换 1:20-1:24 配合鼓点，镜头有疏有缓。镜头的舒缓节奏也很重要。之后的树荫表明他要切换下一组场景了？</li><li>1:32的缓缓放大，停滞，透明，用在这里就很舒服。</li><li>要用一些字啊（在背景上）（字体也是一个方面），风景啊，对比一下什么的，来缓解观看疲劳。毕竟一直盯着主角还是有些累……1:40到1:55的镜头切换，有曝光效果，切换到风景、角色</li><li>2:12的转场 登登登，登登登 </li><li>2:32的镜头组合，中间向左扔电话时，有人物向左转的镜头插入。这就是镜头语言吧。</li><li>之后的场景有把速度放慢的，总之配合音乐加上你的镜头吧，镜头的节奏！</li><li>可以用其他动画的一些小镜头来充当转场、背景、营造氛围。（虽然没怎么看出来。</li></ul><h3 id="4-22【AMV-x2F-冰菓】The-Boy-Who-Murdered-Love-x2F-谋杀爱情的男孩"><a href="#4-22【AMV-x2F-冰菓】The-Boy-Who-Murdered-Love-x2F-谋杀爱情的男孩" class="headerlink" title="4.22【AMV&#x2F;冰菓】The Boy Who Murdered Love &#x2F; 谋杀爱情的男孩"></a><strong>4.22【AMV&#x2F;冰菓】The Boy Who Murdered Love &#x2F; 谋杀爱情的男孩</strong></h3><p><a href="https://www.bilibili.com/video/av824293">av824293</a></p><p>如果说上一个是值得我这次视频参考的mad原型，那这个就完全是高山仰止的大师作品了。节奏，特效，转场，很能让人感觉到作者想要讲些什么。然而这却是同一个作者！！！简直不敢相信……</p><h3 id="4-2？-【海贼王】绝不背叛伙伴——五分半看完佐乌岛篇"><a href="#4-2？-【海贼王】绝不背叛伙伴——五分半看完佐乌岛篇" class="headerlink" title="4.2？ 【海贼王】绝不背叛伙伴——五分半看完佐乌岛篇"></a><strong>4.2？ 【海贼王】绝不背叛伙伴——五分半看完佐乌岛篇</strong></h3><p><a href="http://www.bilibili.com/video/av11342546">av11342546</a></p><p>卧槽我的四月没了</p><p>这个其实更应该归类为混剪，而非mad。<br>总之，这个节奏感和转场，编排都值得一看。</p><hr><p>大致可以把mad分为两类吧，一类是以原始素材和小部分特效做成的剪辑的MAD，另一种是主要以（AE）特效为主把各种小素材拼接在一起的MAD。前一类偏向混剪，后一类偏向于自我创作，包括误解系的那些。接下来的任务是了解AE，下东西，剪素材。</p>]]></content>
    
    
    <categories>
      
      <category>折腾搞事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Digital Ocean服务器遇到的问题</title>
    <link href="/2018/04/18/DigitalOcean/"/>
    <url>/2018/04/18/DigitalOcean/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Digital.jpg" alt="搭建Digital Ocean服务器遇到的问题"></p><p>经过几天的尝试，终于用Digital Ocean搞定了一个自己的服务器（VPS）。记录一下自己搭建过程遇到的问题，或许可以给他人带来帮助。</p><h3 id="什么是VPS？"><a href="#什么是VPS？" class="headerlink" title="什么是VPS？"></a>什么是VPS？</h3><p>VPS主机（虚拟专用服务器）（”Virtual Private Server”，或简称 “VPS”）是利用虚拟服务器软件（如微软的Virtual Server、VMware的ESX server、SWsoft 的Virtuozzo）在一台物理服务器上创建多个相互隔离的小服务器。这些小服务器（VPS）本身就有自己操作系统，它的运行和管理与独立服务器完全相同。虚拟专用服务器确保所有资源为用户独享，让用户以虚拟主机的价格享受到独立主机的服务品质。</p><h3 id="搭建过程："><a href="#搭建过程：" class="headerlink" title="搭建过程："></a>搭建过程：</h3><p>1.在Github上<a href="https://education.github.com/">申请学生优惠包</a>（在校学生专享优惠,包括50美元DO抵用券）<br>2.使用优惠包和优惠码，申请Digital Ocean的账号，并且用PayPal付费5美元（如果你有Visa信用卡，这5美元也可以省下来）<br>3.申请服务器，选择服务器地址（我选的旧金山）并按照教程配置服务器。<br>4.然后你就可以把博客转移到服务器上或是用Shadowsocks上网了。</p><h3 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h3><p>1.申请github学生优惠包没有通过。这一步要写上你的真实姓名，上传自己的学生证（上传学生证比邮箱管用），然后写一写申请理由（夸一夸GIthub），在第二次给我过了。<br>2.申请的学生优惠包点DO项目没有反应。于是给Github工作人员写了邮件反应，一天之内得到了回复，优惠码Get。</p><img src="/img/ghre.png" class="" title="[github的回复]"><p>3.使用PayPal付款，用一般的储蓄卡也可以支付，虽然让填写CVC（信用卡的安全代码），我随意填写了个000就过了。<br>4.DO里不到填写优惠码的地方（据说学生优惠码和10美元优惠码只能用一个）于是再度邮件联系DO的工作人员反映问题，附上自己的优惠码。也是当天收到回复，把50美元加到账户里了。</p><img src="/img/send.png" class="" title="[发给DO的ticket]"><img src="/img/dore.png" class="" title="[DO的回复]"><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><strong>学生优惠：</strong><br><a href="https://www.zhihu.com/question/31512990/answer/176503497">https://www.zhihu.com/question/31512990/answer/176503497</a><br><strong>Digital Ocean搭建指南：</strong><br><a href="https://segmentfault.com/a/1190000011564797">https://segmentfault.com/a/1190000011564797</a></p>]]></content>
    
    
    <categories>
      
      <category>折腾搞事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A MAD A DAY（四月上）</title>
    <link href="/2018/04/15/AMADADAY1/"/>
    <url>/2018/04/15/AMADADAY1/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/aecut.jpg" alt="A MAD A DAY（四月上）"></p><h3 id="4-2【京阿尼AMV】-Don’t-Let-Me-Down"><a href="#4-2【京阿尼AMV】-Don’t-Let-Me-Down" class="headerlink" title="4.2【京阿尼AMV】 Don’t Let Me Down"></a>4.2【京阿尼AMV】 Don’t Let Me Down</h3><p>开始了一天一个MAD的学习计划。为了自己又立下的Flag  不过第一天就发现要想做出个让自己满意的MAD，还是有很长的路要走。</p><p>今日份 永远的我的鸟笼Me 的  【京阿尼AMV】Don’t Let Me Down(<a href="http://www.bilibili.com/video/av12110340">av12110340</a>)</p><p>一开始就被震撼到:</p><ul><li>调色与暗角非常有感觉</li><li>恰到好处的慢放（每个素材后几乎都有）</li><li>画面中的歌词出现</li><li>最强的是与鼓点搭配的抖动特效</li><li>还有帅气的转场</li></ul><p>具体转场方面：<br>前半部分没有特殊转场，都是间隔差不多直接切，但切之前都会把速度调慢，出现慢放效果。镜头之间都是直接有关联（蒙太奇效果）</p><p>1:24音乐达到高潮前，用快速的切镜头营造氛围，3秒内调整不透明度曝光左右分别放置，高潮部分开始，之后就是他的教程中也提到具体方法的抖动旋转曝光拉镜头二分切，放大缩小镜像拉窗帘。</p><p>之后继续相关联的镜头慢放为主，同样在接近高潮部分时用几组奔跑寻找呐喊的镜头快切来营造氛围。然后是以桥为线索的抖动放大缩小曝光切换。 </p><p>那个黑边也算是个小技巧吧（或许可以用来修整素材）。让观众只看中心。<br>还得好好学Ae啊。。。摄像机旋转，粒子消散什么的。加入了收藏夹。有个疑问就是如果用Ae分着做用pr合起来，怎么让镜头和bgm接的上啊？难道是直接先把音乐分段再去一段一段地制作？以及果然是音乐决定风格啊。</p><h3 id="4-3-悠哉·风和·故乡"><a href="#4-3-悠哉·风和·故乡" class="headerlink" title="4.3 悠哉·风和·故乡"></a>4.3 <strong>悠哉·风和·故乡</strong></h3><p>悠哉·风和·故乡 <a href="http://www.bilibili.com/video/av1829711">av1829711</a> p17<br>日常系的悠哉大王，音乐和画面都很轻缓。故即便时长5分钟也还很好。还是<strong>音乐 镜头 风格</strong> 都是要在一起说的。</p><ul><li>节奏和画面配合，包括字和星星的出现</li><li>画面很明显是在用滤镜蒙版处理。滤镜是在切换的。<img src="/img/mb.png" class="" title="[蒙版]"></li><li>过场值得学习，先模糊再消失，或者让后图不动，前边的图片消失掉。<img src="/img/natsu.png" class="" title="[矢量小标]"></li><li>还有用Ai搞的小玩意，像上图的字</li><li>最后，有一些漫画组合。感觉留白还是很重要的。 做静止系可以参考。</li></ul><p>整体的确是给人以美的感受。<br>最后的绳吊有些意思，可以练练手，与小图形一起。</p><img src="/img/rope.png" class="" title="[绳索]"><h3 id="4-4-恋之印记"><a href="#4-4-恋之印记" class="headerlink" title="4.4 恋之印记"></a>4.4 <strong>恋之印记</strong></h3><p>还是上一个视频 <a href="http://www.bilibili.com/video/av1829711">av1829711</a> 的p15</p><p>静止系，重要的是要在静中体现动，从而配合音乐使得不会那么乏味。从这样一个全屏的静止系可以看出对透明度和放缩的使用的确很好，但是还是觉得静止的话就应该多留白，并用更多特效营造感觉。<br>所以说<br>不是那么好弄的啊！<br>值得学习的地方：</p><ul><li>透明度与放缩</li><li>一开始的樱花是粒子特效么？</li><li>调色。</li></ul><h3 id="4-9【游戏人生zero-x2F-ASMV】未完结的故事"><a href="#4-9【游戏人生zero-x2F-ASMV】未完结的故事" class="headerlink" title="4.9【游戏人生zero&#x2F;ASMV】未完结的故事"></a>4.9【游戏人生zero&#x2F;ASMV】未完结的故事</h3><p><em>把之前看过的拿出来继续分析。</em><br>未完结的故事 <a href="http://www.bilibili.com/video/av20507292">av20507292</a><br>这个MAD，主要是要看素材的挑选与恰到好处的文字出现。</p><p>素材方面：</p><ul><li>自然而然地选取 <strong>需要</strong> 的素材，而非什么东西都往上加，</li><li>至于选定了的，素材要相互关联。<br>文字方面：</li><li>文字和主角的声音都是配合的天衣无缝恰到好处。文字的效果也是可以学习的一个方面。</li></ul><h3 id="4-13【综漫-x2F-暖】愿你被这世界温柔以待"><a href="#4-13【综漫-x2F-暖】愿你被这世界温柔以待" class="headerlink" title="4.13【综漫&#x2F;暖】愿你被这世界温柔以待"></a>4.13【综漫&#x2F;暖】愿你被这世界温柔以待</h3><p>综漫，愿你被世界温柔以待 <a href="http://www.bilibili.com/video/av11037395">av11037395</a><br>感想：难道真的是把一堆自带人气的东西聚集在一起就能人气超高？？但还是要就视频本身的优点进行分析：</p><ul><li>镜头，没有用什么特效，但是特别地能体现出蒙太奇的思想。镜头语言很棒！</li><li>配音的插入刚好在仅有伴奏时，值得借鉴。</li></ul>]]></content>
    
    
    <categories>
      
      <category>折腾搞事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 的简单语法</title>
    <link href="/2018/04/08/Markdown/"/>
    <url>/2018/04/08/Markdown/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/4.jpg" alt="Markdown 的简单语法"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=470 height=86 src="//music.163.com/outchain/player?type=2&id=41416580&auto=0&height=66"></iframe><p>记录下 markdown 的各种格式，以便查阅。</p><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a><strong>1.标题</strong></h2><p>使用</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># h1<br>## h2<br>### h3<br>#### h4<br>##### h5<br>###### h6<br></code></pre></td></tr></table></figure><p>分别表示从大到小六种标题。</p><p><strong>演示</strong></p><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><hr><h2 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a><strong>2. 列表</strong></h2><ol><li>有序列表</li><li>直接使用 <code>1. 有序列表 2. XXX</code>即可</li></ol><hr><ul><li>无序列表</li><li>使用 <code>- 无序列表XXX</code>即可</li></ul><h2 id="3-文字标记"><a href="#3-文字标记" class="headerlink" title="3. 文字标记"></a><strong>3. 文字标记</strong></h2><p><strong>加粗</strong> <code>**加粗文字**</code><br><em>斜体</em> <code>*斜体* </code><br><del>删除线</del> <code>~~ .删除线 ~~</code>(无空格)</p><h2 id="4-引用与代码"><a href="#4-引用与代码" class="headerlink" title="4.引用与代码"></a><strong>4.引用与代码</strong></h2><p><code>使用 </code> &#96;&#96; (中间加入文字)实现短词语的引用</p><blockquote><p>使用&gt;+文字可引用若干行</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">使用··· ···中间加入代码实现代码的分行显示<br></code></pre></td></tr></table></figure><h2 id="5-链接与图片"><a href="#5-链接与图片" class="headerlink" title="5.链接与图片"></a><strong>5.链接与图片</strong></h2><p>链接：<code>[链接文字](链接到的网站)</code><br>图片：<code>![图片名](图片地址)</code></p><p>简单的语法就是这些了。</p>]]></content>
    
    
    <categories>
      
      <category>学习相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 遇到的问题汇总与解决</title>
    <link href="/2018/04/01/Hexo/"/>
    <url>/2018/04/01/Hexo/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/3.jpg" alt="Hexo 遇到的问题汇总与解决"></p><p>直到现在才终于解决掉博客的残留问题。<br>流程大致如下：</p><ul><li>新建github项目</li><li>在官网跟随教程安装Hexo与需要的组件(npm有时需要用cnpm)</li><li>配置出无主题的博客</li><li>安装主题</li><li>在安装主题的过程中可能需要安装更多组件</li><li>配置主题</li><li>为了减少麻烦而使用SSH快速上传博客</li><li>开始写你的第一篇博客吧</li></ul><p><del>看起来真的好简单呢</del></p><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>选择主题时要慎重（泪的教训），比如这个主题（<a href="https://github.com/Mrminfive/hexo-theme-skapp">hexo-theme-skapp</a>）,从安装到部署到报错就没有停过。。。好不容易一切搞定部署成功，第二次去用时就又出问题。最后转到了ubuntu系统下才算是搞定了。</p><h2 id="下载组件"><a href="#下载组件" class="headerlink" title="下载组件"></a>下载组件</h2><p>在下载需要的组件 在下载lunr.js时报错。换ubuntu后一切正常。此外，为了使用nodejieba分词软件，windows系统下需要下载windows_tool包，下载后仍然会因为配置不正常而出错。</p><h2 id="图标无法显示的Bug"><a href="#图标无法显示的Bug" class="headerlink" title="图标无法显示的Bug"></a>图标无法显示的Bug</h2><p>为什么会变成这样呢，第一次有了自己的博客，第一次能够在博客上发表东西。两件快乐的事重合在一起……</p><p>为什么图标都不能显示了呢啊摔！</p><p>最后通过查看别人的网页样式表与自己的样式表的不同，发现设置的样式表中的图标目录与图标文件夹并不相同（多了一个&#x2F;…），修改后图标正常显示。</p><h2 id="重新安装时遇到的提示"><a href="#重新安装时遇到的提示" class="headerlink" title="重新安装时遇到的提示"></a>重新安装时遇到的提示</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error: The `/home/leo/桌面/blog/blog/themes/node_modules/_jpeg-recompress-bin@3.0.1@jpeg-recompress-bin/vendor/jpeg-recompress` binary doesn<span class="hljs-string">&#x27;t seem to work correctly</span><br><span class="hljs-string"></span><br><span class="hljs-string">    at BinWrapper.&lt;anonymous&gt; (/home/leo/桌面/blog/blog/themes/node_modules/_bin-wrapper@3.0.2@bin-wrapper/index.js:156:7)</span><br><span class="hljs-string">    at ChildProcess.&lt;anonymous&gt; (/home/leo/桌面/blog/blog/themes/node_modules/_bin-check@2.0.0@bin-check/index.js:26:4)</span><br><span class="hljs-string">    at emitTwo (events.js:126:13)</span><br><span class="hljs-string">    at ChildProcess.emit (events.js:214:7)</span><br><span class="hljs-string">    at Process.ChildProcess._handle.onexit (internal/child_process.js:198:12)</span><br></code></pre></td></tr></table></figure><p>通过查询发现是一个压缩图片的组件，但现在已经没有了。但其实并不影响，只是得自己压缩图片了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">deprecate hexo-autoprefixer@1.0.0 › minimatch@^2.0.1 Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue<br>deprecate hexo-renderer-swig@1.1.0 › swig@^1.4.2 This package is no longer maintained<br>deprecate hexo-filter-cleanup@1.0.7 › imagemin-gifsicle@5.2.0 › gifsicle@3.0.4 › bin-wrapper@3.0.2 › download@4.4.3 › gulp-decompress@1.2.0 › gulp-util@^3.0.1 gulp-util is deprecated - replace it, following the guidelines at https://medium.com/gulpjs/gulp-util-ca3b1f9f9ac5<br></code></pre></td></tr></table></figure><p>这个好像没什么问题…</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在博客的主页可以显示左上角的Loge，在内容页无法显示。并不知道是为什么，最后想到可以把Loge地址直接改为以前上传了的主页的Loge，完美解决。</p>]]></content>
    
    
    <categories>
      
      <category>折腾搞事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寒假总结与Hello新学期</title>
    <link href="/2018/03/18/newterm/"/>
    <url>/2018/03/18/newterm/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/2.jpg" alt="寒假总结与Hello新学期"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=470 height=86 src="//music.163.com/outchain/player?type=2&id=445886994&auto=0&height=66"></iframe>## 总结<p>这个寒假之充实丰富简直让人怀疑去年那暑假的三个月自己都干了些什么。短短42天，虽然并没有完成之前所想的全部，但也很佩服自己了。</p><h3 id="原定计划如下："><a href="#原定计划如下：" class="headerlink" title="原定计划如下："></a>原定计划如下：</h3><p>1.去玩。<br>2.初步了解前端知识，搭出博客。<br>3.做MAD。<br>4.搭好JAVA环境。<br>5.学习算法。<br>6.其他的补电影补番补游戏与看书（?）</p><h3 id="完成与总结如下："><a href="#完成与总结如下：" class="headerlink" title="完成与总结如下："></a>完成与总结如下：</h3><p>1.虽然因为身体原因，之前无聊之下计划的那个一周之行没有下文，但还是去了些地方，看了未曾见过的风景。<br>比如在雪中：</p><img src="/img/bl.jpg" class="" title="[雪中建筑]"><p>街道上：</p><img src="/img/gw.jpg" class="" title="[书院门]"><p>路遇吸猫会所：</p><img src="/img/xm.jpg" class="" title="[吸猫会所]"><p>以及最后一天（元宵节）：</p><img src="/img/wh.jpg" class="" title="[古渡廊桥]"><p>2.虽然经历了图标无法显示与重新安装，终于是把HTML学了些，把博客搭出来了。<br>顺便发现微信小程序其实和前端是差不多的东西，除夕夜边看拜年祭边敲了个小程序（通过免费接口把文字转换为二维码）：</p><img src="/img/xcx.jpg" class="" title="[二维码转换器]"><p>3.终于是下定决心并且把MAD做了出来。虽然不是多么好的作品，但也算完成了flag，之后也得到了很多的指导。</p><img src="/img/mad.png" class="" title="[mad]"><p>4.算法…..好吧这个算未完成项了。。。容我惭愧一秒</p><p>5.其他的：补了素晴，看了游戏人生（剧场版），看了李狗嗨（第一季），玩文明5玩到头晕然后下载了守望……<br>也没有什么了。</p><img src="/img/hz.jpg" class="" title="[会长]"><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>新的学期，也从学长那里收到了些建议，与自身情况结合写出如下计划：</p><p>1.学习…即 刷分 （谁也不知道未来自己的想法会怎样变化）</p><p>2.学习JAVA与安卓的基础</p><p>3.搞定《算法》</p><p>4.玩玩爬虫，想做点东西。</p><p>5.锻炼身体，增强体质</p><p>6.读写书，看些电影。</p><h2 id="说到春天那便是"><a href="#说到春天那便是" class="headerlink" title="说到春天那便是:"></a>说到春天那便是:</h2><p>今日微风，畅快无比</p><p>(PS: 终于把博客的残留问题解决了！)</p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个带着睡意与忧郁的Hello_world</title>
    <link href="/2018/02/02/Helloworld/"/>
    <url>/2018/02/02/Helloworld/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/megumi.png" alt="一个带着睡意与忧郁的Hello_world"></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=450 height=86 src="//music.163.com/outchain/player?type=2&id=36492599&auto=0&height=66"></iframe><h2 id="于是乎"><a href="#于是乎" class="headerlink" title="于是乎"></a>于是乎</h2><p>折腾了一天（多）总算把博客弄好了</p><h3 id="那么……"><a href="#那么……" class="headerlink" title="那么……"></a>那么……</h3><img src="/img/hw.jpg" class="" title="[Hello world]"><p>这个图片显示出来了吧？能显示的吧？</p><h3 id="嗯，各种测试而已"><a href="#嗯，各种测试而已" class="headerlink" title="嗯，各种测试而已"></a>嗯，各种测试而已</h3><p>（既然是测试就不要放上来了啊喂！）然后呢，图标的显示好像还有点问题。。。</p><h2 id="不管啦"><a href="#不管啦" class="headerlink" title="不管啦"></a>不管啦</h2><p>流程：普通地安装<a href="https://hexo.io/" title="" target="">HEXO</a>，普通地安装nodejs，普通地用vpm装各种东西<br>挑个喜欢的主题，找点图片素材（这个好像耗时挺久的），然后切换个好心情迎接各种报错吧。<br>（是我选的这个主题太小众了？不明白啊..QAQ）图标显示不出，折腾了一下午一晚上回到原点。<br>话说这个主题的文章页面就不能在旁边显示文章结构么？</p><h2 id="帮我关下灯谢谢"><a href="#帮我关下灯谢谢" class="headerlink" title="帮我关下灯谢谢"></a>帮我关下灯谢谢</h2><p>总之，不学HTML不学CSS什么JS就能搭出来个网站，比我预想的要简单…<br>晚安，好梦<br>明天再干…</p><p>测试这么写是否可行：<br><a href="https://github.com/Moeditor/Moeditor/issues/153">The future of Moeditor</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br>npm start<br></code></pre></td></tr></table></figure><p>In China, you may want to replace npm with cnpm for a fas ter download speed.</p><ul><li><p>Set <code>debug</code> to <code>true</code> in the config. The config file is stored in <code>~/.config/configstore/Moeditor.json</code> (for every system).</p></li><li><p><code>Ctrl</code> + <code>Shift</code> + <code>I</code> in Linux &#x2F; Windows or <code>Command</code> + <code>Option</code> + <code>I</code> in OS X &#x2F; macOS to toggle devtools for a window.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>折腾搞事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
